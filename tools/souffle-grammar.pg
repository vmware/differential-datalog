// Grammar for parsing programs written in (a subset of the) Souffle Datalog language.
// https://souffle-lang.github.io
// This grammar is written in the syntax of the Python Parglare parser generator.

Program: DeclarationList EOF
       ;

DeclarationList: EMPTY
               | Declaration DeclarationList
               ;

Declaration: TypeDecl
           | InputDecl
           | OutputDecl
           | RelationDecl
           | Rule
           | Init
           | Fact
           | Component
           | FunctorDecl
           | CompInit
           | Pragma
           ;

FunctorDecl: FUNCTOR Identifier "(" IdentifierList ")" ":" Identifier
    ;

Init: INIT Identifier "=" Identifier
    ;

CompInit: INSTANTIATE Identifier "=" CompType
        ;

CompType: Identifier TypeParameters
        ;

TypeParameters: EMPTY
              | "<" TypeParameterList ">"
              ;

TypeParameterList: Identifier
                 | TypeParameterList "," TypeId
                 ;

TypeId: Identifier
      | TypeId DOT Identifier
      ;

Pragma: PRAGMA String String
      | PRAGMA String
      ;

// TODO: handle inheritance and type parameters
Component: COMP Identifier "{" DeclarationList "}"
         ;

TypeDecl: TYPE Identifier
        | TYPE Identifier "=" UnionType
        | TYPE Identifier "=" "[" "]"
        | TYPE Identifier "=" "[" RecordType "]"
        | SYMBOL_TYPE Identifier
        | NUMBER_TYPE Identifier
        ;

UnionType : TypeId
          | UnionType "|" TypeId
          ;

RecordType: Identifier ":" TypeId
          | RecordType "," Identifier ":" TypeId
          ;

RelationDecl: DECL RelationList RelationBody Qualifiers
            ;

RelationList: Identifier
            | Identifier "," RelationList
            ;

RelationBody: "(" ParameterList ")"
            ;

Qualifiers: EMPTY
          | Qualifier Qualifiers
          ;

Qualifier: OUTPUT_QUALIFIER
         | INPUT_QUALIFIER
         | PRINTSIZE_QUALIFIER
         | OVERRIDABLE_QUALIFIER
         | INLINE_QUALIFIER
         | BRIE_QUALIFIER
         | BTREE_QUALIFIER
         | EQREL_QUALIFIER
         ;

NonEmptyKeyValuePairs : Identifier "=" KVValue
                      | KeyValuePairs "," Identifier "=" KVValue
                      ;

KVValue : String
        | "True"
        | Identifier
        ;

KeyValuePairs : EMPTY
              | NonEmptyKeyValuePairs
              ;

// load_head in the souffle grammar
InputDecl: INPUT IodirectiveList
         ;

// store_head in the souffle grammar
OutputDecl: OUTPUT IodirectiveList
          | PRINTSIZE IodirectiveList
          ;

IodirectiveList : IodirectiveBody
                | Identifier "," IodirectiveList
                ;

IodirectiveBody : RelId
                | RelId "(" KeyValuePairs ")"
                ;

ParameterList: Parameter "," ParameterList
             | Parameter
             ;

Parameter: Identifier ":" Identifier
         ;

IdentifierList: EMPTY
              | Identifier "," IdentifierList
              ;

ArgumentList: Argument
            | Argument "," ArgumentList
            ;

Argument: Identifier "=" String
        ;

Fact: Atom DOT
    ;

Head: Atom
    | Head "," Atom
    ;

Term: Literal
    | "!" Term
//    | "(" Disjunction ")" // TODO
    ;

Conjunction: Term
    | Conjunction "," Term
    ;

Disjunction: Conjunction
           | Disjunction OR Conjunction
           ;

Body: Disjunction
    ;

Arg: String
   | "_"
   | "$"
   | "@" Identifier FunctorList
   | Identifier
   | NUMBER
   | "(" Arg ")"
   | Arg Binop Arg
   | FunctionCall
   | Arg AS Identifier
   | Unop Arg
   | "[" "]"
   | "[" RecordList "]"
   | NIL
   ;

FunctorList : "(" ")"
            | "(" FunctorArgs ")"
            ;

FunctorArgs : Arg
            | FunctorArgs Arg
            ;

RecordList : Arg
           | RecordList "," Arg
           ;

ArgList : EMPTY
        | Arg
        | ArgList "," Arg
        ;

Atom : RelId "(" ArgList ")"
     ;

RelId : Identifier
      | RelId DOT Identifier
      ;

NonEmptyAttributes : Identifier ":" TypeId
                   | Attributes "," Identifier ":" TypeId
                   ;

Attributes : NonEmptyAttributes
           | EMPTY
           ;

Literal : Arg Relop Arg
        | Atom
        | TRUE
        | FALSE
        ;

Binop: "|" | "^" | "&" | "||" | "&&" | "+" | "-" | "*" | "/" | "%" ;
Unop: "~" | "!" | "-" ;
Relop: "<" | ">" | "=" | "!=" | ">=" | "<=" ;

// TODO: Allow aggregates over expressions
Aggregate : AGGREGATEARG Arg ":" AggregateBody
          | COUNT ":" AggregateBody
          ;

AggregateBody :  Atom
               | "{" Body "}"
               ;

FunctionCall: FUNCTIONNAME "(" FunctionArgumentList ")"
            ;

FunctorCall: "@" Identifier "(" FunctionArgumentList ")"
           ;

FunctionArgumentList: Arg
                    | Arg "," FunctionArgumentList
                    ;

Rule : Head ":-" Body DOT
     ;

////// Special stuff

LAYOUT: LayoutItem
      | LAYOUT LayoutItem
      ;

LayoutItem: WS
          | LineComment
          | EMPTY
          ;

terminals
DOT: "." ;
IO: "IO" ;
FILE: "\"file\"" ;
FILENAME: "filename" ;
DELIMITER: "delimiter" ;
TYPE: ".type" ;
SYMBOL_TYPE: ".symbol_type" ;
NUMBER_TYPE: ".number_type" ;
FUNCTOR: ".functor" ;
INIT: ".init" ;
COMP: ".comp" ;
DECL: ".decl" ;
INPUT: ".input" ;
OUTPUT: ".output" ;
OUTPUT_QUALIFIER: "output" ;
INPUT_QUALIFIER: "input" ;
PRINTSIZE_QUALIFIER: "printsize" ;
OVERRIDABLE_QUALIFIER: "overridable" ;
INLINE_QUALIFIER: "inline" ;
BRIE_QUALIFIER: "brie" ;
BTREE_QUALIFIER: "btree" ;
EQREL_QUALIFIER: "eqrel" ;
OR: ";" ;
KEYWORD: /[\w-]+/ ;
WS: /\s+/ ;
LineComment: /\/\/.*/ ;
String: /\"[^"]*\"/ ;
INSTANTIATE: "instantiate" ;
PRAGMA: "pragma" ;
PRINTSIZE: ".printsize" ;
AS: "as" ;
NIL: "nil" ;
TRUE: "true" ;
FALSE: "false" ;
NUMBER: /0|([1-9][0-9]*)/ ;
MIN: "min" ;
MAX: "max" ;
CAT: "cat" ;
ORD: "ord" ;
STRLEN: "strlen" ;
TONUMBER: "tonumber" ;
TOSTRING: "tostring" ;
SUBSTR: "substr" ;
MATCH: "match" ;
CONTAINS: "contains" ;
SUM: "sum";
FUNCTIONNAME : /min|max|cat|ord|strlen|tonumber|tostring|substr|match|contains/ {2} ;
AGGREGATEARG : /min|max|sum/ {2} ;
COUNT: "count" {2} ;
Identifier: /[_\w\?][_\d\w]*/ {1} ;
