// Grammar for parsing programs written in (a subset of the) Souffle Datalog language.
// https://souffle-lang.github.io
// This grammar is written in the syntax of the Python Parglare parser generator.

Program: DeclarationList EOF
       ;

DeclarationList: EMPTY
               | Declaration DeclarationList
               ;

Declaration: TypeDecl
           | InputDecl
           | OutputDecl
           | RelationDecl
           | Rule
           | Init
           | Fact
           | Component
           | FunctorDecl
           | CompInit
           | Pragma
           ;

FunctorDecl: FUNCTOR Identifier "(" IdentifierList ")" ":" Identifier
    ;

Init: INIT Identifier "=" Identifier
    ;

CompInit: INSTANTIATE Identifier "=" CompType
        ;

CompType: Identifier TypeParameters
        ;

TypeParameters: EMPTY
              | "<" TypeParameterList ">"
              ;

TypeParameterList: TypeId
                 | TypeId "," TypeParameterList
                 ;

TypeId: Identifier
      | TypeId DOT Identifier
      ;

Pragma: PRAGMA String String
      | PRAGMA String
      ;

Component: COMP Identifier "{" DeclarationList "}"
         ;

TypeDecl: TYPE Identifier
        | TYPE Identifier "=" UnionType
        | TYPE Identifier "=" "[" "]"
        | TYPE Identifier "=" "[" RecordType "]"
        | SYMBOL_TYPE Identifier
        | NUMBER_TYPE Identifier
        ;

UnionType : TypeId
          | TypeId "|" UnionType
          ;

RecordType: Identifier ":" TypeId
          | Identifier ":" TypeId "," RecordType
          ;

RelationDecl: DECL RelationList RelationBody Qualifiers
            ;

RelationList: Identifier
            | Identifier "," RelationList
            ;

RelationBody: "(" ParameterList ")"
            ;

Qualifiers: EMPTY
          | Qualifier Qualifiers
          ;

Qualifier: OUTPUT_QUALIFIER
         | INPUT_QUALIFIER
         | PRINTSIZE_QUALIFIER
         | OVERRIDABLE_QUALIFIER
         | INLINE_QUALIFIER
         | BRIE_QUALIFIER
         | BTREE_QUALIFIER
         | EQREL_QUALIFIER
         ;

KVValue : String
        | "True"
        | Identifier
        ;

KeyValuePairs : EMPTY
              | Identifier "=" KVValue
              | Identifier "=" KVValue "," KeyValuePairs
              ;

// load_head in the souffle grammar
InputDecl: INPUT IodirectiveList
         ;

// store_head in the souffle grammar
OutputDecl: OUTPUT IodirectiveList
          | PRINTSIZE IodirectiveList
          ;

IodirectiveList : IodirectiveBody
                | Identifier "," IodirectiveList
                ;

IodirectiveBody : RelId
                | RelId "(" KeyValuePairs ")"
                ;

ParameterList: Parameter "," ParameterList
             | Parameter
             ;

Parameter: Identifier ":" Identifier
         ;

IdentifierList: EMPTY
              | IdentifierList "," Identifier
              ;

ArgumentList: Argument
            | Argument "," ArgumentList
            ;

Argument: Identifier "=" String
        ;

Fact: Atom DOT
    ;

Head: Atom
    | Head "," Atom
    ;

Term: Literal
    | "!" Term
//    | "(" Body ")" // TODO
    ;

Conjunction: Term
           | Term "," Conjunction
           ;

Arg: String
   | "_"
   | "$"
   | "@" Identifier FunctorList
   | Identifier
   | NUMBER
   // | "(" Arg ")"  // ?
   | Arg Binop Arg
   | FunctionCall
   | Arg AS Identifier
   | Unop Arg
   | "[" "]"
   | "[" RecordList "]"
   | Aggregate
   | NIL
   ;

FunctorList : "(" ")"
            | "(" FunctorArgs ")"
            ;

FunctorArgs : Arg
            | Arg "," FunctorArgs
            ;

RecordList : Arg
           | Arg "," RecordList
           ;

ArgList : EMPTY
        | Arg
        | Arg "," ArgList
        ;

Atom : RelId "(" ArgList ")"
     ;

RelId : Identifier
      | Identifier DOT RelId
      ;

Attributes : EMPTY
           | Identifier ":" TypeId
           | Identifier ":" TypeId "," Attributes
           ;

Literal : Arg Relop Arg
        | Atom
        | FunctionCall
        | TRUE
        | FALSE
        ;

Binop: "|" | "^" | "&" | "||" | "&&" | "+" | "-" | "*" | "/" | "%" ;
Unop: "~" | "!" | "-" ;
Relop: "<" | ">" | "=" | "!=" | ">=" | "<=" ;

Aggregate : "min" Arg ":" AggregateBody
          | "max" Arg ":" AggregateBody
          | "sum" Arg ":" AggregateBody
          | "count" ":" AggregateBody
          ;

AggregateBody :  Atom
              // | "{" Body "}" // TODO
              | "{" Conjunction "}"
              ;

Body : Conjunction
     | Conjunction OR Body;

FunctionCall: "min" "(" FunctionArgumentList ")"
            | "max" "(" FunctionArgumentList ")"
            | "cat" "(" FunctionArgumentList ")"
            | "ord" "(" FunctionArgumentList ")"
            | "strlen" "(" FunctionArgumentList ")"
            | "tonumber" "(" FunctionArgumentList ")"
            | "tostring" "(" FunctionArgumentList ")"
            | "substr" "(" FunctionArgumentList ")"
            | "match" "(" FunctionArgumentList ")"
            | "contains" "(" FunctionArgumentList ")"
            ;

FunctorCall: "@" Identifier "(" FunctionArgumentList ")"
           ;

FunctionArgumentList: Arg
                    | Arg "," FunctionArgumentList
                    ;

Rule : Head ":-" Body DOT
     ;

////// Special stuff

LAYOUT: LayoutItem
      | LAYOUT LayoutItem
      ;

LayoutItem: WS
          | LineComment
          | Comment
          | EMPTY
          ;

CorNCs: CorNC | CorNCs CorNC | EMPTY;
CorNC: Comment | NotComment | WS;
Comment: "/*" CorNCs "*/" ;

terminals
DOT: "." ;
IO: "IO" ;
FILE: "\"file\"" ;
FILENAME: "filename" ;
DELIMITER: "delimiter" ;
TYPE: ".type" ;
SYMBOL_TYPE: ".symbol_type" ;
NUMBER_TYPE: ".number_type" ;
FUNCTOR: ".functor" ;
INIT: ".init" ;
COMP: ".comp" ;
DECL: ".decl" ;
INPUT: ".input" ;
OUTPUT: ".output" ;
OUTPUT_QUALIFIER: "output" ;
INPUT_QUALIFIER: "input" ;
PRINTSIZE_QUALIFIER: "printsize" ;
OVERRIDABLE_QUALIFIER: "overridable" ;
INLINE_QUALIFIER: "inline" ;
BRIE_QUALIFIER: "brie" ;
BTREE_QUALIFIER: "btree" ;
EQREL_QUALIFIER: "eqrel" ;
OR: ";" ;
WS: /\s+/ ;
LineComment: /\/\/.*/ ;
String: /\"[^"]*\"/ ;
INSTANTIATE: "instantiate" ;
PRAGMA: "pragma" ;
PRINTSIZE: ".printsize" ;
AS: "as" ;
NIL: "nil" ;
TRUE: "true" ;
FALSE: "false" ;
NUMBER: /0|([1-9][0-9]*)/ ;
Identifier: /[_a-zA-Z\?][_\d\w]*/;
NotComment: /((\*[^\/])|[^\s*\/]|\/[^\*])+/ ;
