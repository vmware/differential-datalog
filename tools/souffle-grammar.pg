// Grammar for parsing programs written in (a subset of the) Souffle Datalog language.
// https://souffle-lang.github.io
// This grammar is written in the syntax of the Python Parglare parser generator.

Program: DeclarationList EOF
       ;

DeclarationList: EMPTY
               | Declaration DeclarationList
               ;

Declaration: TypeDecl
           | InputDecl
           | OutputDecl
           | RelationDecl
           | Rule
           | Init
           | Fact
           | Namespace
           | Functor
           ;

Functor: FUNCTOR Identifier "(" IdentifierList ")" ":" Identifier
    ;

Init: INIT Identifier "=" Identifier
    ;

// TODO: handle inheritance and type parameters
Namespace: COMP Identifier "{" DeclarationList "}"
         ;

// TODO: handle records
TypeDecl: TYPE Identifier
        | TYPE Identifier "=" TypeList
        | SYMBOL_TYPE Identifier
        ;

TypeList: Identifier
        | Identifier "|" TypeList
        ;

RelationDecl: DECL Identifier "(" ParameterList ")" OUTPUT_DEPRECATED?
            ;

InputDecl: INPUT Identifier "(" IO "=" FILE "," FILENAME "=" String "," DELIMITER "=" String ")"
         | INPUT Identifier
         ;

OutputDecl: OUTPUT Identifier // TODO does not handle arguments
         ;

ParameterList: Parameter "," ParameterList
             | Parameter
             ;

Parameter: Identifier ":" Identifier
         ;

IdentifierList: EMPTY
              | Identifier "," IdentifierList
              ;

ArgumentList: Argument
            | Argument "," ArgumentList
            ;

Argument: Identifier "=" String
        ;

Rule: Head ":-" Tail DOT
    ;

Fact: Clause DOT
    ;

Head: ClauseList
    ;

ClauseList: Clause
          | ClauseList "," Clause
          ;

Clause: Identifier "(" ClauseArgList ")"
      ;

ClauseArgList: ClauseArg
             | ClauseArg "," ClauseArgList
             ;

ClauseArg: VarName
         | String
         | FunctionCall
         | FunctorCall
         ;

VarName: Identifier
       ;

Tail: ConjunctionsOrDisjunctions
    ;

ConjunctionsOrDisjunctions: Expression
                          | ConjunctionsOrDisjunctions "," ConjunctionsOrDisjunctions {left,1}
                          | ConjunctionsOrDisjunctions OR ConjunctionsOrDisjunctions {left,2}
                          | "(" ConjunctionsOrDisjunctions ")"
                          ;

Expression: Assignment
          | "!" Relation
          | Relation
          | Identifier NE Identifier
          | Identifier NE String
          | Expression ARITHMOP Expression
          ;

// TODO: Allow aggregates over expressions
Aggregate : AggregateFunction Identifier ":" Expression
          | AggregateFunction Identifier ":" "{" ConjunctionsOrDisjunctions "}"
          ;

AggregateFunction : MIN
                  | MAX
                  | COUNT
                  ;

Relation: Path "(" ClauseArgList ")"
        ;

Path: Identifier
    | Identifier DOT Path
    ;

Assignment: Identifier "=" FunctionCall
          | Identifier "=" Identifier
          | Identifier "=" String
          | Identifier "=" Aggregate
          ;

FunctionCall: Identifier "(" FunctionArgumentList ")"
            ;

FunctorCall: "@" FunctionCall
           ;

FunctionArgumentList: FunctionArgument
                    | FunctionArgument "," FunctionArgumentList
                    ;

FunctionArgument: Identifier
                | String
                | FunctionCall
                ;

////// Special stuff

LAYOUT: LayoutItem
      | LAYOUT LayoutItem
      ;

LayoutItem: WS
          | LineComment
          | EMPTY
          ;

terminals
DOT: "." ;
IO: "IO" ;
FILE: "\"file\"" ;
FILENAME: "filename" ;
DELIMITER: "delimiter" ;
NE: "!=" ;
TYPE: ".type" ;
SYMBOL_TYPE: ".symbol_type" ;
FUNCTOR: ".functor" ;
INIT: ".init" ;
COMP: ".comp" ;
DECL: ".decl" ;
INPUT: ".input" ;
OUTPUT: ".output" ;
OUTPUT_DEPRECATED: "output" ;
OR: ";" ;
KEYWORD: /[\w-]+/ ;
WS: /\s+/ ;
LineComment: /\/\/.*/ ;
String: /\"[^"]*\"/ ;
Identifier: /[_\w\?][_\d\w]*/ ;
MIN: "min" ;
MAX: "max" ;
COUNT: "count" ;
ARITHMOP: /[\+\-\/\^\%]/ ;