import java.io.IOException;
import java.util.*;
import java.lang.RuntimeException;
import java.math.BigInteger;

/* Generic DDlog API shared by all programs. */
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogCommand;

/* Additional program-specific bindings generated by `ddlog`. */
import ddlog.flatbuf_test.*;

public class Test {
    private final DDlogAPI api;

    Test() {
        /* Create an instance of the DDlog program with one worker thread. */
        this.api = new DDlogAPI(1, null, false);
    }

    void check(int exit) {
        if (exit != 0)
            throw new RuntimeException("Exit code shows error" + exit);
    }

    void onCommit(DDlogCommand command) {
        System.out.println(command.toString());
    }

    void run() {
        this.api.start();

        flatbuf_testUpdateBuilder builder = new flatbuf_testUpdateBuilder();
        builder.insert_BI(true);
        builder.insert_CI((byte)8);
        builder.insert_DI((short)-5);
        builder.insert_DI((short)5);
        builder.insert_DI((short)Short.MAX_VALUE);
        builder.insert_DI((short)Short.MIN_VALUE);
        builder.insert_EI(BigInteger.ZERO.subtract(BigInteger.ONE));
        builder.insert_FI("string");
        builder.insert_GI((long)100);
        builder.insert_HI(new BigInteger("0ABACABA0ABACABA", 16));
        builder.insert_II((short)7);
        {
            Tuple3__bool__bit_8___string ji = builder.create_Tuple3__bool__bit_8___string(true, (byte)10, "string");
            builder.insert_JI(ji);
        }
        {
            Tuple3__bool__bit_8___string ki = builder.create_Tuple3__bool__bit_8___string(false, (byte)9, "text");
            builder.insert_KI(ki);
        }
        builder.insert_LI(true, (byte)-1, "something");
        builder.insert_L0I(false, (byte)-2, "else");
        {
            boolean[] v = { true, false, true };
            builder.insert_MI(v);
        }
        {
            Tuple3__bool__bit_8___string[] vec = {
                builder.create_Tuple3__bool__bit_8___string(true, (byte)-1, "check"),
                builder.create_Tuple3__bool__bit_8___string(false, (byte)1, "fails")
            };
            builder.insert_NI(vec);
        }
        {
            boolean[][] nest = { { false, false }, { true, true } };
            builder.insert_OI(nest);
        }
        {
            int[] pi = { 2, 3, 2, 3 };
            builder.insert_PI(pi);
        }
        {
            Map<Integer, String> map = new HashMap<Integer, String>();
            map.put(2, "here");
            map.put(3, "there");
            builder.insert_QI(map);
        }
        builder.insert_RI(2);
        {
            C c = builder.create_C("s");
            builder.insert_SI(c);
        }
        {
            std_Option__bit_32_ b = builder.create_std_Some__bit_32_(10);
            builder.insert_TI(b);
            std_Option__bit_32_ b1 = builder.create_std_None__bit_32_();
            builder.insert_TI(b1);
        }
        builder.insert_UI_A("a");
        builder.insert_UI_B(false);
        builder.insert_UI_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "zz"));
        {
            Many a = builder.create_A("aa");
            Many b = builder.create_B(false);
            Many d = builder.create_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"));
            builder.insert_VI(false, a);
            builder.insert_VI(true, b);
            builder.insert_VI(false, d);
        }
        {
            /* issue 322
            std_Option__Many om0 = builder.create_std_None__Many();
            builder.insert_WI(om0);
            */
            std_Option__Many om1 = builder.create_std_Some__Many(builder.create_B(true));
            builder.insert_WI(om1);
        }
        {
            Many[] m = {
                builder.create_A("aa"),
                builder.create_B(false),
                builder.create_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"))
            };
            builder.insert_XI(m);
        }
        {
            std_Option___bool__bit_8___string_[] v = {
                builder.create_std_Some___bool__bit_8___string_(
                    builder.create_Tuple3__bool__bit_8___string(false, (byte)-1, "")),
                builder.create_std_Some___bool__bit_8___string_(
                    builder.create_Tuple3__bool__bit_8___string(true, (byte)-2, "!"))
                //builder.create_std_None___bool__bit_8___string_()
            };
            builder.insert_YI(v);
        }
        int res = builder.applyUpdates(this.api);
        check(res);
        this.api.commit_dump_changes(r -> this.onCommit(r));
    }

    public static void main(String[] args) throws IOException {
        Test test = new Test();
        test.run();
    }
}
