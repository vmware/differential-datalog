import java.io.IOException;
import java.util.*;
import java.lang.RuntimeException;

/* Generic DDlog API shared by all programs. */
import ddlogapi.DDlogException;
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogCommand;

/* Additional program-specific bindings generated by `ddlog`. */
import ddlog.redist_opt.*;

public class Test {
    private final DDlogAPI api;

    Test() throws DDlogException, IOException {
        /* Create an instance of the DDlog program with one worker thread. */
        this.api = new DDlogAPI(1, false);
        api.recordCommands("replay.dat", false);
    }

    void onCommit(DDlogCommand<Object> command) {
        int relid = command.relid();
        switch (relid) {
            case redist_optRelation.Span:
                SpanReader span = (SpanReader)command.value();
                System.out.println("From " + relid + " " + command.kind() + " Span{" + span.entity() + "," + span.tns() + "}");
                break;
            default: throw new IllegalArgumentException("Unknown relation id " + relid);
        }
    }

    void run() throws DDlogException {

        /* First transaction */
        {
            /* Start transaction.  All DDlog table updates must be made in the
             * context of a transaction. */
            this.api.transactionStart();

            /* Create a builder object that will be used to serialize DDlog commands
             * into a buffer. */
            redist_optUpdateBuilder builder = new redist_optUpdateBuilder();

            /* Create several DDlog commands.  Commands are stored inside the
             * builder. */
            builder.insert_DdlogNode(10000, builder.create_EntityLSP(true));
            builder.insert_DdlogNode(20000, builder.create_EntityLSP(true));
            builder.insert_DdlogBinding((short)100, 10000);
            builder.insert_DdlogDependency(10000, 20000);

            /* Apply commands serialized by the builder to the DDlog program. */
            builder.applyUpdates(this.api);

            /* Commit transaction, triggering the `onCommit` callback for every
             * record in an output relation modified by the transaction. */
            redist_optUpdateParser.transactionCommitDumpChanges(this.api, r -> this.onCommit(r));
        }

        /* Queries */
        {
            System.out.println("Query ExtDdlogDependency_by_child[20000]:");
            redist_optQuery.queryExtDdlogDependency_by_child(this.api, 20000,
                    dep -> {
                        System.out.println("ExtDdlogDependency{" + dep.parent() + "," + dep.child() + "}");
                    });

            System.out.println("Query ExtDdlogDependency_by_parent[10000]:");
            redist_optQuery.queryExtDdlogDependency_by_parent(this.api, 10000,
                    dep -> {
                        System.out.println("ExtDdlogDependency{" + dep.parent() + "," + dep.child() + "}");
                    });

            System.out.println("Query Span_by_entity[10000]:");
            redist_optQuery.querySpan_by_entity(this.api, 10000,
                    span -> {
                        System.out.println("Span{" + span.entity() + "," + span.tns() + "}");
                    });
        }

        /* Dump indexes */
        {
            System.out.println("Dump ExtDdlogDependency_by_child:");
            redist_optQuery.dumpExtDdlogDependency_by_child(this.api,
                    dep -> {
                        System.out.println("ExtDdlogDependency{" + dep.parent() + "," + dep.child() + "}");
                    });
            System.out.println("Dump ExtDdlogDependency_by_parent:");
            redist_optQuery.dumpExtDdlogDependency_by_parent(this.api,
                    dep -> {
                        System.out.println("ExtDdlogDependency{" + dep.parent() + "," + dep.child() + "}");
                    });
            System.out.println("Dump Span_by_entity:");
            redist_optQuery.dumpSpan_by_entity(this.api,
                    span -> {
                        System.out.println("Span{" + span.entity() + "," + span.tns() + "}");
                    });

        }

        /* Second transaction */
        {
            this.api.transactionStart();
            /* each applyUpdates requires its own builder */
            redist_optUpdateBuilder builder = new redist_optUpdateBuilder();
            builder.insert_DdlogNode(20000, builder.create_EntityOther());
            builder.insert_DdlogBinding((short)200, 20000);
            builder.delete_DdlogNode(10000, builder.create_EntityLSP(true));

            builder.applyUpdates(this.api);

            redist_optUpdateParser.transactionCommitDumpChanges(this.api, r -> this.onCommit(r));
        }

        this.api.stop();
    }

    public static void main(String[] args) throws IOException, DDlogException {
        Test test = new Test();
        test.run();
    }
}
