import java.io.IOException;
import java.util.*;
import java.lang.RuntimeException;

/* Generic DDlog API shared by all programs. */
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogCommand;

/* Additional program-specific bindings generated by `ddlog`. */
import ddlog.redist.*;

public class Test {
    private final DDlogAPI api;

    Test() {
        /* Create an instance of the DDlog program with one worker thread. */
        this.api = new DDlogAPI(1, null, false);
    }

    void onCommit(DDlogCommand command) {
        System.out.println(command.toString());
    }

    void run() {

        /* First transaction */
        {
            /* Start transaction.  All DDlog table updates must be made in the
             * context of a transaction. */
            this.api.start();

            /* Create a builder object that will be used to serialize DDlog commands
             * into a buffer. */
            redistUpdateBuilder builder = new redistUpdateBuilder();

            /* Create several DDlog commands.  Commands are stored inside the
             * builder. */
            builder.insert_DdlogNode(10000);
            builder.insert_DdlogBinding((short)100, 10000);
            builder.insert_DdlogDependency(10000, 20000);

            /* Apply commands serialized by the builder to the DDlog program. */
            int res = builder.applyUpdates(this.api);

            /* Commit transaction, triggering the `onCommit` callback for every
             * record in an output relation modified by the transaction. */
            this.api.commit_dump_changes(r -> this.onCommit(r));
        }

        /* Second transaction */
        {
            this.api.start();
            /* each applyUpdates requires its own builder */
            redistUpdateBuilder builder = new redistUpdateBuilder();
            builder.insert_DdlogNode(20000);
            builder.insert_DdlogBinding((short)200, 20000);
            builder.delete_DdlogNode(10000);

            int res = builder.applyUpdates(this.api);

            this.api.commit_dump_changes(r -> this.onCommit(r));
            this.api.stop();
        }
    }

    public static void main(String[] args) throws IOException {
        Test test = new Test();
        test.run();
    }
}
