/// Library supporting dates, times, and date-times
/// This parallels closely the Rust time crate
/// https://time-rs.github.io/time/time/struct.Time.html

///////////////////////////////////////////////////////////////////////////////////////////
/// The clock time within a given date. Nanosecond precision.
/// All minutes are assumed to have exactly 60 seconds; no attempt is
/// made to handle leap seconds (either positive or negative).
/// When comparing two Times, they are assumed to be in the same
/// calendar date.

extern type Time

/// Create a Time that is exactly midnight.
extern function midnight(): Time

/// Attempt to create a Time from the hour, minute, and second.
extern function try_from_hms(hours: bit<8>, minutes: bit<8>, seconds: bit<8>): Result<Time, string>

/// Attempt to create a Time from the hour, minute, second, and millisecond.
extern function try_from_hms_milli(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, milliseconds: bit<16>): Result<Time, string>

/// Attempt to create a Time from the hour, minute, second, and microsecond.
extern function try_from_hms_micro(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>

/// Attempt to create a Time from the hour, minute, second, and nanosecond.
extern function try_from_hms_nano(hours: bit<8>, minutes: bit<8>, seconds: bit<8>, microseconds: bit<32>): Result<Time, string>

/// Get the clock hour.  The returned value will always be in the range 0..24.
extern function hour(t: Time): bit<8>

/// Get the minute within the hour.  The returned value will always be in the range 0..60.
extern function minute(t: Time): bit<8>

/// Get the second within the minute.  The returned value will always be in the range 0..60.
extern function second(t: Time): bit<8>

/// Get the milliseconds within the second.  The returned value will always be in the range 0..1000.
extern function millisecond(t: Time): bit<16>

/// Get the microseconds within the second.  The returned value will always be in the range 0..1000000.
extern function microsecond(t: Time): bit<32>

/// Get the nanoseconds within the second.  The returned value will always be in the range 0..1000000000.
extern function nanosecond(t: Time): bit<32>

// Here is a list of the format specifiers:
// Spec	Replaced by                                                             Example
// %a	Abbreviated weekday name                                                Thu
// %A	Full weekday name	                                                Thursday
// %b	Abbreviated month name	                                                Aug
// %B	Full month name	                                                        August
// %c	Date and time representation, equivalent to %a %b %-d %-H:%M:%S %-Y	Thu Aug 23 14:55:02 2001
// %C	Year divided by 100 and truncated to integer (00-99)	                20
// %d	Day of the month, zero-padded (01-31)	                                23
// %D	Short MM/DD/YY date, equivalent to %-m/%d/%y	                        8/23/01
// %F	Short YYYY-MM-DD date, equivalent to %-Y-%m-%d	                        2001-08-23
// %g	Week-based year, last two digits (00-99)	                        01
// %G	Week-based year	                                                        2001
// %H	Hour in 24h format (00-23)	                                        14
// %I	Hour in 12h format (01-12)	                                        02
// %j	Day of the year (001-366)	                                        235
// %m	Month as a decimal number (01-12)	                                08
// %M	Minute (00-59)	                                                        55
// %N	Subsecond nanoseconds. Always 9 digits	                                012345678
// %p	am or pm designation	                                                pm
// %P	AM or PM designation	                                                PM
// %r	12-hour clock time, equivalent to %-I:%M:%S %p	                        2:55:02 pm
// %R	24-hour HH:MM time, equivalent to %-H:%M	                        14:55
// %S	Second (00-59)	                                                        02
// %T	24-hour clock time with seconds, equivalent to %-H:%M:%S	        14:55:02
// %u	ISO 8601 weekday as number with Monday as 1 (1-7)	                4
// %U	Week number with the first Sunday as the start of week one (00-53)	33
// %V	ISO 8601 week number (01-53)	                                        34
// %w	Weekday as a decimal number with Sunday as 0 (0-6)	                4
// %W	Week number with the first Monday as the start of week one (00-53)	34
// %y	Year, last two digits (00-99)	                                        01
// %Y	Full year, including + if >= 10,000	                                2001
// %z	ISO 8601 offset from UTC in timezone (+HHMM)	                        +0100
// %%	Literal %	                                                        %

// All specifiers that are strictly numerical have modifiers for formatting.
// Adding a modifier to a non-supporting specifier is a no-op.
// Modifier	     Behavior	         Example
// - (dash)	     No padding	         %-d => 5
// _ (underscore)    Pad with spaces	 %_d =>  5
// 0	             Pad with zeros	 %0d => 05

/// Convert the time to a string using a default format.
extern function time2string(t: Time): string

/// Convert the string to a time using a default format.  Inverse of time2string.
extern function string2time(s: string): Result<Time, string>

/// Format the Time using the provided string.
extern function time_format(t: Time, format: string): string

/// Attempt to parse a Time using the provided format string.
extern function time_parse(s: string, format: string): Result<Time, string>

///////////////////////////////////////////////////////////////////////////////////////////
/// Dates
/// Calendar date.
/// Years between -100_000 and +100_000 inclusive are guaranteed to be representable.

extern type Date

/// Attempt to create a Date from the year, month, and day.
extern function try_from_ymd(year: signed<32>, month: bit<8>, day: bit<8>): Result<Date, string>

/// Create a Date from the year and ordinal day number.
extern function try_from_yo(year: signed<32>, ordinal: bit<16>): Result<Date, string>

/// Attempt to create a Date from the ISO year, week, and weekday.
extern function try_from_iso_ywd(year: signed<32>, week: bit<8>, weekday: Weekday): Result<Date, string>

/// Get the year of the date.
extern function year(date: Date): signed<32>

/// Get the month.  The returned value will always be in the range 1..=12.
extern function month(date: Date): bit<8>

/// Get the day of the month.  The returned value will always be in the range 1..=31.
extern function day(date: Date): bit<8>

/// Get the day of the year.  The returned value will always be in the range 1..=366
extern function ordinal(date: Date): bit<16>

/// Get the ISO week number.  The returned value will always be in the range 1..=53.
extern function week(date: Date): bit<8>

/// Get the week number where week 1 begins on the first Sunday.  The returned value will always be in the range 0..=53.
extern function sunday_based_week(date: Date): bit<8>

/// Get the week number where week 1 begins on the first Monday.  The returned value will always be in the range 0..=53.
extern function monday_based_week(date: Date): bit<8>

/// Get the weekday.
extern function weekday(date: Date): Weekday

/// Get the next calendar date.
extern function next_day(date: Date): Date

/// Get the previous calendar date.
extern function previous_day(date: Date): Date

/// Get the Julian day for the date.
extern function julian_day(date: Date): signed<64>

/// Create a Date from the Julian day.
extern function from_julian_day(julian_day: signed<64>): Date

/// Attempt to parse a Date using the provided format string.
extern function date_parse(s: string, format: string): Result<Date, string>

/// format the Date using the specified format string
extern function date_format(date: Date, format: string): string

/// Convert the date to a string using a default format.
extern function date2string(t: Date): string

/// Convert the string to a date using the default format.
extern function string2date(s: string): Result<Date, string>

typedef Weekday = Monday
                | Tuesday
                | Wednesday
                | Thursday
                | Friday
                | Saturday
                | Sunday

typedef DateTime = DateTime { date: Date, time: Time }

/// Parse a string into a DateTime using the specified format
extern function datetime_parse(s: string, format: string): Result<DateTime, string>

/// Serialize a DateTime to a string representation using the default format
extern function dateTime2string(d: DateTime): string

/// Inverse of datetime2string.
extern function string2datetime(s: string): Result<DateTime, string>

/// format the DateTime using the specified format string
extern function datetime_format(d: DateTime, format: string): string

/// Create a DateTime from a given unix timestamp
extern function datetime_from_unix_timestamp(timestamp: signed<64>): DateTime
