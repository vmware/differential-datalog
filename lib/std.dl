/* Description: DDlog "standard library" automatically imported into every module */

/*
 * Ref
 */
extern type Ref<'A>

extern function ref_new(x: 'A): Ref<'A>
extern function deref(x: Ref<'A>): 'A

/*
 * max(), min()
 */
extern function max(x: 'A, y: 'A): 'A
extern function min(x: 'A, y: 'A): 'A

/*
 * Option
 */

typedef Option<'A> = Some{x: 'A}
                   | None

function is_none(x: Option<'A>): bool = {
    match (x) {
        None -> true,
        _    -> false
    }
}

function is_some(x: Option<'A>): bool = {
    match (x) {
        Some{} -> true,
        _      -> false
    }
}

/*
 * Either
 */
typedef Either<'A,'B> = Left{l: 'A}
                      | Right{r: 'B}

/*
 * Range
 */
extern function range(from: 'A, to: 'A, step: 'A): Vec<'A>

/*
 * String conversion
 */
extern function __builtin_2string(x: 'X): string
extern function hex(x: 'X): string

extern function parse_dec_u64(s: string): Option<bit<64>>

extern function string_join(strings: Vec<string>, sep: string): string
extern function string_split(s: string, sep: string): Vec<string>
extern function string_contains(s1: string, s2: string): bool
extern function string_len(s: string): bit<64>

/* Substring of `s` that begins at `start` and continues up to, but not
 * including, `end`.*/
extern function string_substr(s: string, start: bit<64>, end: bit<64>): string

extern function str_to_lower(s: string): string

/*
 * hashing
 */
extern function hash64(x: 'X): bit<64>
extern function hash128(x: 'X): bit<128>

/*
 * Standard aggregates
 */

extern type Group<'A>

extern function count(g: Group<'A>): bit<64>
extern function group2set(g: Group<'A>): Set<'A>
extern function group2vec(g: Group<'A>): Vec<'A>
extern function group2map(g: Group<('K,'V)>): Map<'K,'V>
extern function group_unzip(g: Group<('X,'Y)>): (Vec<'X>, Vec<'Y>)

extern function group_set_unions(g: Group<Set<'A>>): Set<'A>

/* Optimized version of group_set_unions that, when the group consits of
 * a single set, simply returns the reference to this set. */
extern function group_setref_unions(g: Group<Ref<Set<'A>>>): Ref<Set<'A>>

/* Returns the first element of the group.
 * It always exists, as aggregation cannot return an empty group. */
extern function group_first(g: Group<'A>): 'A

/* Smallest and largest group elements. */
extern function group_min(g: Group<'A>): 'A
extern function group_max(g: Group<'A>): 'A

/*
 * Vec
 */
extern type Vec<'A>

extern function vec_empty(): Vec<'A>
extern function vec_len(v: Vec<'X>): bit<64>
extern function vec_singleton(x: 'X): Vec<'X>
extern function vec_push(v: mut Vec<'X>, x: 'X): ()
extern function vec_push_imm(v: Vec<'X>, x: 'X): Vec<'X>
extern function vec_contains(v: Vec<'X>, x: 'X): bool
extern function vec_is_empty(v: Vec<'X>): bool
extern function vec_nth(v: Vec<'X>, n: bit<64>): Option<'X>
extern function vec2set(s: Vec<'A>): Set<'A>

/*
 * Map
 */

extern type Map<'K,'V>

extern function map_empty(): Map<'K, 'V>
extern function map_singleton(k: 'K, v: 'V): Map<'K, 'V>
extern function map_insert(m: mut Map<'K,'V>, k: 'K, v: 'V): ()
extern function map_remove(m: mut Map<'K,'V>, k: 'K): ()
extern function map_insert_imm(m: Map<'K,'V>, k: 'K, v: 'V): Map<'K,'V>
extern function map_get(m: Map<'K,'V>, k:'K): Option<'V>
extern function map_contains_key(m: Map<'K,'V>, k: 'K): bool
extern function map_is_empty(m: Map<'K,'V>): bool
extern function map_union(m1: Map<'K, 'V>, m2: Map<'K,'V>): Map<'K, 'V>

/*
 * Set
 */

extern type Set<'A>

extern function set_size(s: Set<'X>): bit<64>
extern function set_singleton(x: 'X): Set<'X>
extern function set_empty(): Set<'X>
extern function set_insert(s: mut Set<'X>, v: 'X): ()
extern function set_insert_imm(s: Set<'X>, v: 'X): Set<'X>
extern function set_contains(s: Set<'X>, v: 'X): bool
extern function set_is_empty(s: Set<'X>): bool
extern function set_nth(s: Set<'X>, n: bit<64>): Option<'X>
extern function set2vec(s: Set<'A>): Vec<'A>
extern function set_union(s1: Set<'X>, s2: Set<'X>): Set<'X>
extern function set_unions(sets: Vec<Set<'X>>): Set<'X>

/*
 * Endianness
 */
extern function ntohl(x: bit<32>): bit<32>
extern function ntohs(x: bit<16>): bit<16>

extern function htonl(x: bit<32>): bit<32>
extern function htons(x: bit<16>): bit<16>
