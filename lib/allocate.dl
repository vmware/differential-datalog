/* Allocate a unique identifier in the range `min_val..max_val` for each element in `toallocate`.
 * `allocated` stores already allocated ids that must not be re-used.
 *
 * Returns new allocations.  May only assign a subset of values if the address space has been
 * exhausted.
 *
 * `N` must be a numeric type, i.e., its Rust representation must have `Num`, `Add`, `Ord`, and
 * `Copy` traits.  However, as DDlog does not have traits, it will happily compile programs with
 * any `N` type, leaving it to the Rust compiler to detect the unsatisfied trait.
 */
extern function allocate(
    allocated: Set<'N>,
    toallocate: Vec<'B>,
    min_val: 'N,
    max_val: 'N): Vec<('B, 'N)>

/* Allocate a unique identifier in the range `min_val..max_val` for each element in `toallocate`;
 * use optional hint as starting point to search for available identifier.
 * `allocated` stores already allocated ids that must not be re-used.
 *
 * Returns new allocations.  May only assign a subset of values if the address space has been
 * exhausted.
 *
 * `N` must be a numeric type, i.e., its Rust representation must have `Num`, `Add`, `Ord`, and
 * `Copy` traits.  However, as DDlog does not have traits, it will happily compile programs with
 * any `N` type, leaving it to the Rust compiler to detect the unsatisfied trait.
 */
extern function allocate_with_hint(
    allocated: Set<'N>,
    toallocate: Vec<('B, Option<'N>)>,
    min_val: 'N,
    max_val: 'N): Vec<('B, 'N)>

/* Allocate a unique identifier in the range `min_val..max_val` for each element in `toallocate`.
 * `allocated` stores already allocated ids that must not be re-used.
 *
 * Returns new allocations.  After exhausting the address space, assigns `None` to all remaining
 * items.
 *
 * `N` must be a numeric type, i.e., its Rust representation must have `Num`, `Add`, `Ord`, and
 * `Copy` traits.  However, as DDlog does not have traits, it will happily compile programs with
 * any `N` type, leaving it to the Rust compiler to detect the unsatisfied trait.
 */
extern function allocate_opt(
    allocated: Set<'N>,
    toallocate: Vec<'B>,
    min_val: 'N,
    max_val: 'N): Vec<('B, Option<'N>)>

/* Allocate a unique identifier in the range `min_val..max_val` for each element in `toallocate`,
 * while preserving existing allocations in `allocated`.
 *
 * For each value in `toallocate`, either returns existing allocation in `allocated` or allocates
 * an unused value in the range.
 *
 * `N` must be a numeric type, i.e., its Rust representation must have `Num`, `Add`, `Ord`, and
 * `Copy` traits.  However, as DDlog does not have traits, it will happily compile programs with
 * any `N` type, leaving it to the Rust compiler to detect the unsatisfied trait.
 */
extern function adjust_allocation(
    allocated: Map<'A, 'N>,
    toallocate: Vec<'A>,
    min_val: 'N,
    max_val: 'N): Vec<('A, 'N)>
