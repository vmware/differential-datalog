/* JSON parsing/serialization library.
 *
 * Functions in this library are bindings for functions in
 * the Rust `serde_json` crate.
 */

/* Deserialize an instance of type 'T from a string of JSON text.
 *
 * This conversion can fail if the structure of the input does not match the
 * structure expected by 'T, for example if 'T is a struct type but the input
 * contains something other than a JSON map.
 */
extern function from_json_string(json: string): Result<'T, string>

/* Serialize the given data structure as a String of JSON.
 *
 * Serialization can fail if 'T contains a map with non-string keys.
 */
extern function to_json_string(x: 'T): Result<string, string>

/* Represents any valid JSON value.
 */
#[rust="serde(from = \"serde_json::value::Value\", into = \"serde_json::value::Value\")"]
typedef JsonValue = // Represents a JSON null value.
                    JsonNull
                  | // Represents a JSON boolean.
                    JsonBool{b: bool}
                  | // Represents a JSON number, whether integer or floating point.
                    JsonNumber{n: JsonNum}
                  | // Represents a JSON string.
                    JsonString{s: string}
                  | // Represents a JSON array.
                    JsonArray{a: Vec<JsonValue>}
                  | // Represents a JSON object.
                    JsonObject{o: Map<string, JsonValue>}

#[rust="serde(from = \"serde_json::Number\", into = \"serde_json::Number\")"]
typedef JsonNum = // Integer number.  The value must be in the range between the
                  // smallest `s64` number and the largest `u64` number,
                  // inclusive.  Values outside of this range will be truncated
                  // during serialization.
                  JsonInt{i: s128}
                | // Always finite.
                  // TODO.
                  JsonFloat
