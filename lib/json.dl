/* JSON parsing/serialization library.
 *
 * Functions in this library are bindings for functions in
 * the Rust `serde_json` crate.
 */

/* Deserialize an instance of type 'T from a string of JSON text.
 *
 * This conversion can fail if the structure of the input does not match the
 * structure expected by 'T, for example if 'T is a struct type but the input
 * contains something other than a JSON map.
 */
extern function from_json_string(json: string): Result<'T, string>

/* Serialize the given data structure as a String of JSON.
 *
 * Serialization can fail if 'T contains a map with non-string keys.
 */
extern function to_json_string(x: 'T): Result<string, string>

/* Represents any valid JSON value.
 */
#[rust="serde(from = \"serde_json::value::Value\", into = \"serde_json::value::Value\")"]
typedef JsonValue = // Represents a JSON null value.
                    JsonNull
                  | // Represents a JSON boolean.
                    JsonBool{b: bool}
                  | // Represents a JSON number, whether integer or floating point.
                    JsonNumber{n: JsonNum}
                  | // Represents a JSON string.
                    JsonString{s: string}
                  | // Represents a JSON array.
                    JsonArray{a: Vec<JsonValue>}
                  | // Represents a JSON object.
                    JsonObject{o: Map<string, JsonValue>}

/* Get JsonValue value as `bool`.  Returns `None` if value is not `JsonBool`.
 */
function jval_as_bool(v: JsonValue): Option<bool> =
{
    match (v) {
        JsonBool{b} -> Some{b},
        _ -> None
    }
}

/* Get JsonValue value as `bool`.  Returns `def` if value is not `JsonBool`.
 */
function jval_as_bool_or(v: JsonValue, def: bool): bool =
{
    match (v) {
        JsonBool{b} -> b,
        _ -> def
    }
}

/* Get JsonValue value as `JsonNum`.  Returns `None` if value is not `JsonNumber`.
 */
function jval_as_number(v: JsonValue): Option<JsonNum> =
{
    match (v) {
        JsonNumber{n} -> Some{n},
        _ -> None
    }
}

/* Get JsonValue value as `JsonNum`.  Returns `def` if value is not `JsonNumber`.
 */
function jval_as_number_or(v: JsonValue, def: JsonNum): JsonNum =
{
    match (v) {
        JsonNumber{n} -> n,
        _ -> def
    }
}

/* Get JsonValue value as string.  Returns `None` if value is not `JsonString`.
 */
function jval_as_string(v: JsonValue): Option<string> =
{
    match (v) {
        JsonString{s} -> Some{s},
        _ -> None
    }
}

/* Get JsonValue value as string.  Returns `def` if value is not `JsonString`.
 */
function jval_as_string_or(v: JsonValue, def: string): string =
{
    match (v) {
        JsonString{s} -> s,
        _ -> def
    }
}

/* Get JsonValue value as array.  Returns `None` if value is not `JsonArray`.
 */
function jval_as_array(v: JsonValue): Option<Vec<JsonValue>> =
{
    match (v) {
        JsonArray{a} -> Some{a},
        _ -> None
    }
}

/* Get JsonValue value as array.  Returns `def` if value is not `JsonArray`.
 */
function jval_as_array_or(v: JsonValue, def: Vec<JsonValue>): Vec<JsonValue> =
{
    match (v) {
        JsonArray{a} -> a,
        _ -> def
    }
}

/* Get JsonValue value as object.  Returns `None` if value is not `JsonObject`.
 */
function jval_as_object(v: JsonValue): Option<Map<string, JsonValue>> =
{
    match (v) {
        JsonObject{o} -> Some{o},
        _ -> None
    }
}

/* Get JsonValue value as object.  Returns `def` if value is not `JsonObject`.
 */
function jval_as_object_or(v: JsonValue, def: Map<string, JsonValue>): Map<string, JsonValue> =
{
    match (v) {
        JsonObject{o} -> o,
        _ -> def
    }
}

/* Get attribute by name.  Returns `None` if value is not `JsonObject` or
 * does not have the specified attribute.
 */
function jval_get(v: JsonValue, attr: string): Option<JsonValue> =
{
    match (v) {
        JsonObject{o} -> map_get(o, attr),
        _ -> None
    }
}

/* Get attribute by name.  Returns `def` if value is not `JsonObject` or
 * does not have the specified attribute.
 */
function jval_get_or(v: JsonValue, attr: string, def: JsonValue): JsonValue =
{
    match (v) {
        JsonObject{o} -> option_unwrap_or(map_get(o, attr), def),
        _ -> def
    }
}

typedef JsonNum = // Integer number.  The value must be in the range between the
                  // smallest `s64` number and the largest `u64` number,
                  // inclusive.  Values outside of this range will be truncated
                  // during serialization.
                  JsonInt{i: s128}
                | // NaN and infinity are not valid JSON values.
                  // When serializing to JSON, such values will be replaced with 0.
                  JsonFloat{d: double}
