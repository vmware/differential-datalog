/* Immutable hash sets.
 * This module contains bindings for the `HashSet` type
 * from the `im` crate. */

#[iterate_by_ref=iter:'A]
extern type HashSet<'A>

extern function hashset_singleton(x: 'X): HashSet<'X>
extern function hashset_empty(): HashSet<'X>

function size(s: HashSet<'X>): usize {
    hashset_size(s)
}

function insert(s: mut HashSet<'X>, v: 'X) {
    hashset_insert(s, v)
}

function insert_imm(s: HashSet<'X>, v: 'X): HashSet<'X> {
    hashset_insert_imm(s, v)
}

function remove(s: mut HashSet<'X>, v: 'X) {
    hashset_remove(s, v)
}

function remove_imm(s: HashSet<'X>, v: 'X): HashSet<'X> {
    hashset_remove_imm(s, v)
}

function contains(s: HashSet<'X>, v: 'X): bool {
    hashset_contains(s, v)
}

function is_empty(s: HashSet<'X>): bool {
    hashset_is_empty(s)
}

function nth(s: HashSet<'X>, n: usize): Option<'X> {
    hashset_nth(s, n)
}

function to_vec(s: HashSet<'A>): Vec<'A> {
    hashset_to_vec(s)
}

function to_hashset(v: Vec<'A>): HashSet<'A> {
    var res = hashset_empty();
    for (x in v) {
        res.insert(x);
    };
    res
}

function to_hashset(g: Group<'K, 'A>): HashSet<'A> {
    var res = hashset_empty();
    for ((x, _) in g) {
        res.insert(x);
    };
    res
}

function to_hashset(o: Option<'X>): HashSet<'X> {
    match (o) {
        Some{x} -> hashset_singleton(x),
        None -> hashset_empty()
    }
}

function union(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X> {
    hashset_union(s1, s2)
}

function union(sets: Vec<HashSet<'X>>): HashSet<'X> {
    hashset_unions(sets)
}

function union(sets: Group<'K, HashSet<'X>>): HashSet<'X> {
    group_hashset_unions(sets)
}

function intersection(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X> {
    hashset_intersection(s1, s2)
}

function difference(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X> {
    hashset_difference(s1, s2)
}

/* Applies closure `f` to each element of the set. */
function map(s: HashSet<'A>, f: function('A): 'B): HashSet<'B> {
    var res = hashset_empty();
    for (x in s) {
        res.insert(f(x))
    };
    res
}

/* Returns the element that gives the minimum value from the specified function.
 * If several elements are equally minimum, the first element is returned.
 * If the set is empty, `None` is returned. */
function arg_min(s: HashSet<'A>, f: function('A): 'B): Option<'A> {
    hashset_arg_min(s, f)
}

/* Returns the element that gives the maximum value from the specified function.
 * If several elements are equally maximum, the first element is returned.
 * If the set is empty, `None` is returned. */
function arg_max(s: HashSet<'A>, f: function('A): 'B): Option<'A> {
    hashset_arg_max(s, f)
}

/* Returns the first element of the set that satisfies predicate `f` or
 * `None` if none of the elements satisfy the predicate. */
function find(s: HashSet<'A>, f: function('A): bool): Option<'A> {
    for (x in s) {
        if (f(x)) {
            return Some{x}
        }
    };
    None
}

/* Returns a set containing only those elements in `s` that satisfy predicate
 * `f`. */
function filter(s: HashSet<'A>, f: function('A): bool): HashSet<'A> {
    var res = hashset_empty();
    for (x in s) {
        if (f(x)) {
            res.insert(x)
        }
    };
    res
}

/* Both filters and maps the set.
 *
 * Calls the closure on each element of the set.  If the closure returns
 * `Some{element}`, then that element is returned. */
function filter_map(s: HashSet<'A>, f: function('A): Option<'B>): HashSet<'B> {
    var res = hashset_empty();
    for (x in s) {
        match (f(x)) {
            None -> (),
            Some{y} -> res.insert(y)
        }
    };
    res
}

/* Returnds `true` iff all elements of the set satisfy predicate `f`. */
function all(s: HashSet<'A>, f: function('A): bool): bool {
    for (x in s) {
        if (not f(x)) {
            return false
        }
    };
    true
}

/* Returnds `true` iff at least one element of the set satisfies predicate `f`. */
function any(s: HashSet<'A>, f: function('A): bool): bool {
    for (x in s) {
        if (f(x)) {
            return true
        }
    };
    false
}

/* Iterates over the set is ascending order, aggregating its contents using `f`.
 *
 * `f` - takes the previous value of the accumulator and the next element in the
 * set and returns the new value of the accumulator.
 *
 * `initializer` - initial value of the accumulator. */
function fold(s: HashSet<'A>, f: function('B, 'A): 'B, initializer: 'B): 'B {
    var res = initializer;
    for (x in s) {
        res = f(res, x)
    };
    res
}

extern function hashset_arg_min(s: HashSet<'A>, f: function('A): 'B): Option<'A>
extern function hashset_arg_max(s: HashSet<'A>, f: function('A): 'B): Option<'A>
extern function hashset_size(s: HashSet<'X>): usize
extern function hashset_insert(s: mut HashSet<'X>, v: 'X)
extern function hashset_remove(s: mut HashSet<'X>, v: 'X)
extern function hashset_insert_imm(s: HashSet<'X>, v: 'X): HashSet<'X>
extern function hashset_remove_imm(s: HashSet<'X>, v: 'X): HashSet<'X>
extern function hashset_contains(s: HashSet<'X>, v: 'X): bool
extern function hashset_is_empty(s: HashSet<'X>): bool
extern function hashset_nth(s: HashSet<'X>, n: usize): Option<'X>
extern function hashset_to_vec(s: HashSet<'A>): Vec<'A>
extern function hashset_union(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X>
extern function hashset_unions(sets: Vec<HashSet<'X>>): HashSet<'X>
extern function group_hashset_unions(sets: Group<'K, HashSet<'X>>): HashSet<'X>
extern function hashset_intersection(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X>
extern function hashset_difference(s1: HashSet<'X>, s2: HashSet<'X>): HashSet<'X>
