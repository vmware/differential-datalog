/*
 * Functions for working with groups (see basic group operations defined in
 * `ddlog_std.dl`).
 */

/* We implement `map`, `flatmap`, `sort_by`, etc., as group-to-vector
 * rather than group-to-group transformations, since the output of
 * these methods can potentially be empty, thus violating the invariant
 * that a group always has at least one element. */

/* Applies closure `f` to each element of the group. */
function map(g: Group<'K, 'V1>, f: function('V1): 'V2): Vec<'V2> {
    var res = vec_with_capacity(g.count());
    for (x in g) {
        res.push(f(x))
    };
    res
}

/* Applies closure `f` to each element of the group and concatenates the
 * resulting vectors, returning a flat vector. */
function flatmap(g: Group<'K, 'V1>, f: function('V1): Vec<'V2>): Vec<'V2> {
    var res = vec_empty();
    for (x in g) {
        res.append(f(x))
    };
    res
}

/* Returns the element that gives the minimum value from the specified function.
 * If several elements are equally minimum, the first element is returned. */
function arg_min(g: Group<'K, 'V>, f: function('V): 'A): 'V {
    var min_arg = g.first();
    var min_val = f(g.first());
    for (x in g) {
        var v = f(x);
        if (v < min_val) {
            min_val = v;
            min_arg = x;
        }
    };
    min_arg
}

/* Returns the element that gives the maximum value from the specified function.
 * If several elements are equally maximum, the first element is returned. */
function arg_max(g: Group<'K, 'V>, f: function('V): 'A): 'V {
    var max_arg = g.first();
    var max_val = f(g.first());
    for (x in g) {
        var v = f(x);
        if (v > max_val) {
            max_val = v;
            max_arg = x;
        }
    };
    max_arg
}

/* Returns the first element of the group that satisfies predicate `f` or
 * `None` if none of the elements satisfy the predicate. */
function find(g: Group<'K, 'V>, f: function('V): bool): Option<'V> {
    for (x in g) {
        if (f(x)) {
            return Some{x}
        }
    };
    None
}

/* Returns a vector containing only those elements in `g` that satisfy predicate `f`,
 * preserving the order of the elements in the original group. */
function filter(g: Group<'K, 'V>, f: function('V): bool): Vec<'V> {
    var res = vec_empty();
    for (x in g) {
        if (f(x)) {
            res.push(x)
        }
    };
    res
}

/* Both filters and maps the group.
 *
 * Calls the closure on each element of the group.  If the closure returns
 * `Some{element}`, then that element is returned. */
function filter_map(g: Group<'K, 'V1>, f: function('V1): Option<'V2>): Vec<'V2> {
    var res = vec_empty();
    for (x in g) {
        match (f(x)) {
            None -> (),
            Some{y} -> res.push(y)
        }
    };
    res
}

/* Returns `true` iff all elements of the group satisfy predicate `f`. */
function all(g: Group<'K, 'V>, f: function('V): bool): bool {
    for (x in g) {
        if (not f(x)) {
            return false
        }
    };
    true
}

/* Returns `true` iff at least one element of the group satisfies predicate `f`. */
function any(g: Group<'K, 'V>, f: function('V): bool): bool {
    for (x in g) {
        if (f(x)) {
            return true
        }
    };
    false
}

/* Counts the number of elements in `g` that satisfy predicate `f`. */
function count(g: Group<'K, 'V>, f: function('V): bool): usize {
    var cnt = 0;
    for (x in g) {
        if (f(x)) {
            cnt = cnt + 1
        }
    };
    cnt
}

/* Iterates over the group, aggregating its contents using `f`.
 *
 * `f` - takes the previous value of the accumulator and the next element in the
 * group and returns the new value of the accumulator.
 *
 * `initializer` - initial value of the accumulator. */
function fold(g: Group<'K,'V>, f: function('B, 'V): 'B, initializer: 'B): 'B {
    var res = initializer;
    for (x in g) {
        res = f(res, x)
    };
    res
}
