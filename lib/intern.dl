/* Object interning library.
 * Generates a unique ID for an object, which can be converted back to the original value.
 *
 * This library is more lightweight than the standard `internment.dl` library in
 * that interned object handles are only 32-bit wide (vs 64 bit with
 * `internment.dl`).  In addition, this library does not implement reference
 * counting, so interned object manipulation is more efficient.  On the flip side,
 * it never deallocates interned objects, so unless you expect the set of
 * interned objects to remain constant, you should use `internment.dl` instead.
 */

/* Interned object of type `'A`.
 * While this type is defined for any `'A`, interning is only supported for strings.
 * There is simply no way to obtain an interned object of a different type.
 */
#[size=4]
#[shared_ref]
extern type IObj<'A>

/* Interned string
 */
typedef IString = IObj<string>

/* Intern a string
 */
extern function string_intern(s: string): IString

/* Extract the value of an interned string
 */
extern function istring_str(s: IString): string

/* Returns unique integer identifier of an interned string.
 * Identifiers are assigned in the order strings are fed to the interner.
 */
extern function istring_ord(s: IString): u32
