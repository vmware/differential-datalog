typedef integer      = bit<64>
typedef uuid         = bit<128>

typedef uuid_or_string_t = Either<uuid, string>

function extract_uuid (id: uuid_or_string_t): uuid = {
    match (id) {
        Left{uuid} -> uuid,
        _ -> 0
    }
}

extern function uuid2str(id: uuid): string

// map `uuid2str` function over a set
extern function set_map_uuid2str(ids: Set<uuid>): Set<string>

// map `extract_uuid` over a set. Returns a set of uuids and a `0` value
// if at least one `Right{str}` value occurs in the input set
extern function set_extract_uuids(ids: Set<uuid_or_string_t>): Set<uuid>

// apply `extract_uuid` to each value in a map.
extern function map_extract_val_uuids(ids: Map<'K, uuid_or_string_t>): Map<'K, uuid>

// Like group2vec, but additionally filters out a sentinel value `Right{""}`.
// A sentinel value is added to an empty set before `FlatMap` to ensure that `FlatMap`
// generates at least one entry.  It must be filtered out in a subsequent `Aggregate`.
extern function group2vec_remove_sentinel(g: Group<uuid_or_string_t>): Vec<uuid_or_string_t>

// Like group2set, but additionally filters out a sentinel value `Right{""}`.
// A sentinel value is added to an empty set before `FlatMap` to ensure that `FlatMap`
// generates at least one entry.  It must be filtered out in a subsequent `Aggregate`.
extern function group2set_remove_sentinel(g: Group<uuid_or_string_t>): Set<uuid_or_string_t>

// Like group2map, but additionally filters out a sentinel value `Right{""}`.
// A sentinel value is added to an empty map before `FlatMap` to ensure that `FlatMap`
// generates at least one entry.  It must be filtered out in a subsequent `Aggregate`.
extern function group2map_remove_sentinel(g: Group<('K, uuid_or_string_t)>): Map<'K, uuid_or_string_t>

