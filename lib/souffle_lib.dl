// Library of Souffle functions

import intern
import regex
import souffle_types

function castTo32(i: bit<64>): Tnumber = i[31:0] as Tnumber
function castTo64(i: Tnumber): bit<64> = 32'd0 ++ (i as bit<32>)
function cat(s: IString, t: IString): IString = (string_intern(istring_str(s) ++ istring_str(t)))
function strlen(s: IString): Tnumber = castTo32(string_len(istring_str(s)))
function ord(s: IString): Tnumber = istring_ord(s) as Tnumber
function substr(s: IString, i: Tnumber, l: Tnumber): IString = string_intern(string_substr(istring_str(s), castTo64(i), castTo64(i + l)))
// The order of arguments in Souffle is reverted
function contains(s: IString, i: IString): bool = string_contains(istring_str(i), istring_str(s))
// Souffle match must match the whole string
function re_match(pattern: IString, s: IString): bool = regex_match("^" ++ istring_str(pattern) ++ "$", istring_str(s))
function to_number(s: IString): Tnumber = {
    match (parse_dec_i64(istring_str(s))) {
        None -> 0,
        Some{x} -> x as Tnumber
    }
}
function to_string(n: Tnumber): IString = string_intern(__builtin_2string(n))
function random(): Tnumber = 0
function land(l: Tnumber, r: Tnumber): Tnumber = if (l != 0 and r != 0) 1 else 0
function lor(l: Tnumber, r: Tnumber): Tnumber = if (l == 0 and r == 0) 0 else 1
function lnot(l: Tnumber): Tnumber = if (l != 0) 0 else 1
function group_count32(g: Group<'A>): Tnumber = castTo32(group_count(g))
