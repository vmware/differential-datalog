# This is the simple Travis configuration, which is intended for use
# on applications which do not require cross-platform and
# multiple-GHC-version support. For more information and other
# options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: required
dist: trusty
jdk: oraclejdk8
osx_image: xcode9.3

# Do not choose a language; we provide our own build tools.
language: rust

# Caching so the next build will be fast too.
cache:
    directories:
        - $HOME/.ghc
        - $HOME/.cabal
        - $HOME/.stack
        - $HOME/.cargo
        - .stack-work

env:
   - TOOL=stack TEST_SUITE='-p tutorial' BUILD_BINARY=1
   - TOOL=run_souffle_tests
   - TOOL=stack TEST_SUITE='-p redist' JAVA=1
   - TOOL=stack TEST_SUITE='-p span_uuid'
   - TOOL=stack TEST_SUITE='-p souffle0'
   - TOOL=stack TEST_SUITE='-p simple'
   - TOOL=stack TEST_SUITE='-p path'
   - TOOL=stack TEST_SUITE='-p ovn'
   - TOOL=stack TEST_SUITE='-p modules'

#addons: {apt: {packages: [ghc-8.2.2], sources: [hvr-ghc]}}

os:
  - osx
  - linux

matrix:
  fast_finish: true

# Ensure necessary system libraries are present
addons:
  apt:
    packages:
      - libgmp-dev
      - subversion

before_install:
- pip install --user parglare
# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=$HOME/.local/bin:$PATH
- ./.travis/install-stack.sh
- ./.travis/install-flatbuf.sh
- export CLASSPATH=$CLASSPATH:$HOME/flatbuffers/java
- if [ x$BUILD_BINARY = x1 ]; then cargo install cargo-vendor || true; fi
# Travis does not set JAVA_HOME on MacOS
- if [ `uname -s` = Darwin ]; then export JAVA_HOME=`/usr/libexec/java_home`; fi
- if [ `uname -s` = Darwin -a x${TOOL} = xrun_souffle_tests ]; then brew install subversion; fi

install:
# Build dependencies
- stack --no-terminal --install-ghc test --only-dependencies

script:
# Build the package, its tests, and its docs and run the tests
#- DDLOG_TEST_PROGRESS=1 stack --no-terminal test --haddock --no-haddock-deps
#- DDLOG_TEST_PROGRESS=1 stack --no-terminal test --ta "$TEST_SUITE"  --haddock --no-haddock-deps
- if [ x${TOOL} = xstack ]; then DDLOG_TEST_PROGRESS=1 stack --no-terminal test --ta "$TEST_SUITE"; fi
- if [ x${TOOL} = xrun_souffle_tests ]; then cd test && travis_wait 30 ./run-souffle-tests.py -s 0 -r 17; fi
- if [ x${JAVA} = x1 ]; then stack install && cd java/test_flatbuf && ./run.sh; fi

before_deploy:
    # add date and OS name to the tag
    - export DIST_NAME=ddlog-$TRAVIS_TAG-$(date +'%Y%m%d%H%M%S')-$TRAVIS_OS_NAME
    #- git tag $TRAVIS_TAG
    # copy distribution files to a separate directory
    - stack install --no-terminal
    - export DIST_DIR=ddlog
    - mkdir -p $DIST_DIR/bin
    - export BIN="$(stack path --local-install-root)/bin/ddlog"
    - export OVSDB_BIN="$(stack path --local-install-root)/bin/ovsdb2ddlog"
    - cp "$BIN" "$DIST_DIR/bin/"
    - cp "$OVSDB_BIN" "$DIST_DIR/bin/"
    - cp -r lib "$DIST_DIR/"
    # Include Rust dependencies for offline build
    - cd rust/template
    - cat Cargo.toml `find ../../lib/ -name "*.toml"` > Cargo.full.toml
    - cargo vendor -s Cargo.full.toml --relative-path > config
    - cp -r vendor "../../$DIST_DIR/"
    - mkdir "../../$DIST_DIR/.cargo" 
    - cp config "../../$DIST_DIR/.cargo/"
    - cp Cargo.lock "../../$DIST_DIR/"
    - cd ../../
    # First copy Java sources only, then build and copy the .jar
    - cp -r java "$DIST_DIR/"
    - cd java
    - make
    - cd ..
    - cp java/ddlogapi.jar "$DIST_DIR/java/"
    - cp java/ddlogapi_DDlogAPI.h "$DIST_DIR/java/"
    - cp -r doc "$DIST_DIR/"
    - tar -czf "$DIST_NAME.tar.gz" "$DIST_DIR"

deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  file: "$DIST_NAME.tar.gz"
  skip_cleanup: true
  draft: true
  on:
    tags: true
    condition: $BUILD_BINARY = 1
