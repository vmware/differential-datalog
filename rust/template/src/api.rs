use std::ffi;
use std::fs;
use std::io;
use std::iter;
use std::mem;
use std::os::raw;

#[cfg(unix)]
use std::os::unix::io::{FromRawFd, IntoRawFd, RawFd};
#[cfg(windows)]
use std::os::windows::io::{FromRawHandle, IntoRawHandle, RawHandle};

use std::ptr;
use std::slice;
use std::sync::{Arc, Mutex};

use differential_datalog::ddval::*;
use differential_datalog::program::*;
use differential_datalog::record;
use differential_datalog::record::IntoRecord;
use differential_datalog::record_val_upds;
use differential_datalog::Callback;
use differential_datalog::DDlog;
use differential_datalog::DeltaMap;
use differential_datalog::RecordReplay;
use std::collections::btree_set::BTreeSet;

use super::update_handler::*;
use super::*;

/* FlatBuffers bindings generated by `ddlog` */
#[cfg(feature = "flatbuf")]
use value::flatbuf;

#[cfg(feature = "flatbuf")]
use types::flatbuf::FromFlatBuffer;

// TODO: Move HDDlog into the differential_datalog crate.
#[derive(Debug)]
pub struct HDDlog {
    pub prog: Mutex<RunningProgram>,
    pub update_handler: Box<dyn IMTUpdateHandler>,
    pub db: Option<Arc<Mutex<DeltaMap<DDValue>>>>,
    pub deltadb: Arc<Mutex<Option<DeltaMap<DDValue>>>>,
    pub print_err: Option<extern "C" fn(msg: *const raw::c_char)>,
    /* When set, all commands sent to the program are recorded in
     * the specified `.dat` file so that they can be replayed later. */
    pub replay_file: Option<Mutex<fs::File>>,
}

/* Public API */
impl HDDlog {
    pub fn print_err(f: Option<extern "C" fn(msg: *const raw::c_char)>, msg: &str) {
        match f {
            None => eprintln!("{}", msg),
            Some(f) => f(ffi::CString::new(msg).unwrap().into_raw()),
        }
    }

    pub fn eprintln(&self, msg: &str) {
        Self::print_err(self.print_err, msg)
    }

    pub fn get_table_id(tname: &str) -> Result<Relations, String> {
        Relations::try_from(tname).map_err(|()| format!("unknown relation {}", tname))
    }

    pub fn get_table_name(tid: RelId) -> Result<&'static str, String> {
        relid2name(tid).ok_or_else(|| format!("unknown relation {}", tid))
    }

    pub fn get_table_cname(tid: RelId) -> Result<&'static ffi::CStr, String> {
        relid2cname(tid).ok_or_else(|| format!("unknown relation {}", tid))
    }

    pub fn get_index_id(iname: &str) -> Result<Indexes, String> {
        Indexes::try_from(iname).map_err(|()| format!("unknown index {}", iname))
    }

    pub fn get_index_name(iid: IdxId) -> Result<&'static str, String> {
        indexid2name(iid).ok_or_else(|| format!("unknown index {}", iid))
    }

    pub fn get_index_cname(iid: IdxId) -> Result<&'static ffi::CStr, String> {
        indexid2cname(iid).ok_or_else(|| format!("unknown index {}", iid))
    }

    pub fn record_commands(&mut self, file: &mut Option<Mutex<fs::File>>) {
        mem::swap(&mut self.replay_file, file);
    }

    pub fn dump_input_snapshot<W>(&self, w: &mut W) -> io::Result<()>
    where
        W: io::Write,
    {
        for (rel, relname) in INPUT_RELIDMAP.iter() {
            let prog = self.prog.lock().unwrap();
            match prog.get_input_relation_data(*rel as RelId) {
                Ok(valset) => {
                    for v in valset.iter() {
                        w.record_insert(relname, v)?;
                        writeln!(w, ",")?;
                    }
                }
                _ => match prog.get_input_relation_index(*rel as RelId) {
                    Ok(ivalset) => {
                        for v in ivalset.values() {
                            w.record_insert(relname, v)?;
                            writeln!(w, ",")?;
                        }
                    }
                    _ => {
                        panic!("Unknown input relation {:?} in dump_input_snapshot", rel);
                    }
                },
            }
        }
        Ok(())
    }

    pub fn clear_relation(&self, table: usize) -> Result<(), String> {
        self.record_clear_relation(table);
        self.prog.lock().unwrap().clear_relation(table)
    }

    pub fn dump_table<F>(&self, table: usize, cb: Option<F>) -> Result<(), &'static str>
    where
        F: Fn(&record::Record) -> bool,
    {
        self.record_dump_table(table);
        if let Some(ref db) = self.db {
            HDDlog::db_dump_table(&mut db.lock().unwrap(), table, cb);
            Ok(())
        } else {
            Err("cannot dump table: ddlog_run() was invoked with do_store flag set to false")
        }
    }

    /*
     * Controls recording of differential operator runtimes.  When enabled,
     * DDlog records each activation of every operator and prints the
     * per-operator CPU usage summary in the profile.  When disabled, the
     * recording stops, but the previously accumulated profile is preserved.
     *
     * Recording CPU events can be expensive in large dataflows and is
     * therefore disabled by default.
     */
    pub fn enable_cpu_profiling(&self, enable: bool) {
        self.record_enable_cpu_profiling(enable);
        self.prog.lock().unwrap().enable_cpu_profiling(enable);
    }

    /*
     * returns DDlog program runtime profile
     */
    pub fn profile(&self) -> String {
        self.record_profile();
        let rprog = self.prog.lock().unwrap();
        let profile: String = rprog.profile.lock().unwrap().to_string();
        profile
    }
}

impl DDlog for HDDlog {
    type Convert = DDlogConverter;

    fn run<F>(workers: usize, do_store: bool, cb: F) -> Result<Self, String>
    where
        Self: Sized,
        F: Callback,
    {
        Self::do_run(workers, do_store, CallbackUpdateHandler::new(cb), None)
    }

    fn transaction_start(&self) -> Result<(), String> {
        self.record_transaction_start();
        self.prog.lock().unwrap().transaction_start()
    }

    fn transaction_commit_dump_changes(&self) -> Result<DeltaMap<DDValue>, String> {
        self.record_transaction_commit(true);
        *self.deltadb.lock().unwrap() = Some(DeltaMap::new());

        self.update_handler.before_commit();
        match (self.prog.lock().unwrap().transaction_commit()) {
            Ok(()) => {
                self.update_handler.after_commit(true);
                let mut delta = self.deltadb.lock().unwrap();
                Ok(delta.take().unwrap())
            }
            Err(e) => {
                self.update_handler.after_commit(false);
                Err(e)
            }
        }
    }

    fn transaction_commit(&self) -> Result<(), String> {
        self.record_transaction_commit(false);
        self.update_handler.before_commit();

        match (self.prog.lock().unwrap().transaction_commit()) {
            Ok(()) => {
                self.update_handler.after_commit(true);
                Ok(())
            }
            Err(e) => {
                self.update_handler.after_commit(false);
                Err(e)
            }
        }
    }

    fn transaction_rollback(&self) -> Result<(), String> {
        self.record_transaction_rollback();
        self.prog.lock().unwrap().transaction_rollback()
    }

    /* Two implementations of `apply_updates`: one that takes `Record`s and one that takes `DDValue`s.
     */
    fn apply_updates<V, I>(&self, upds: I) -> Result<(), String>
    where
        V: Deref<Target = record::UpdCmd>,
        I: iter::Iterator<Item = V>,
    {
        let mut conversion_err = false;
        let mut msg: Option<String> = None;

        /* Iterate through all updates, but only feed them to `apply_valupdates` until we reach
         * the first invalid command.
         * XXX: We must iterate till the end of `upds`, as `ddlog_apply_updates` relies on this to
         * deallocate all commands.
         */
        let res = self.apply_valupdates(upds.flat_map(|u| {
            if conversion_err {
                None
            } else {
                match updcmd2upd(u.deref()) {
                    Ok(u) => Some(u),
                    Err(e) => {
                        conversion_err = true;
                        msg = Some(format!("invalid command {:?}: {}", *u, e));
                        None
                    }
                }
            }
        }));
        match msg {
            Some(e) => Err(e),
            None => res,
        }
    }

    #[cfg(feature = "flatbuf")]
    fn apply_updates_from_flatbuf(&self, buf: &[u8]) -> Result<(), String> {
        let cmditer = flatbuf::updates_from_flatbuf(buf)?;
        let upds: Result<Vec<Update<DDValue>>, String> = cmditer
            .map(|cmd| flatbuf::DDValueUpdate::from_flatbuf(cmd).map(|x| x.0))
            .collect();
        self.apply_valupdates(upds?.into_iter())
    }

    fn apply_valupdates<I>(&self, upds: I) -> Result<(), String>
    where
        I: Iterator<Item = Update<DDValue>>,
    {
        if let Some(ref f) = self.replay_file {
            let mut file = f.lock().unwrap();
            let upds = record_val_upds::<Self::Convert, _, _, _>(&mut *file, upds, |_| ());
            self.prog.lock().unwrap().apply_updates(upds)
        } else {
            self.prog.lock().unwrap().apply_updates(upds)
        }
    }

    fn dump_index(&self, index: IdxId) -> Result<BTreeSet<DDValue>, String> {
        self.record_dump_index(index);
        let idx = Indexes::try_from(index).map_err(|()| format!("unknown index {}", index))?;
        let arrid = indexes2arrid(idx);
        self.prog.lock().unwrap().dump_arrangement(arrid)
    }

    fn query_index(&self, index: IdxId, key: DDValue) -> Result<BTreeSet<DDValue>, String> {
        self.record_query_index(index, &key);
        let idx = Indexes::try_from(index).map_err(|()| format!("unknown index {}", index))?;
        let arrid = indexes2arrid(idx);
        self.prog.lock().unwrap().query_arrangement(arrid, key)
    }

    #[cfg(feature = "flatbuf")]
    fn query_index_from_flatbuf(&self, buf: &[u8]) -> Result<BTreeSet<DDValue>, String> {
        let (idxid, key) = flatbuf::query_from_flatbuf(buf)?;
        self.query_index(idxid, key)
    }

    fn stop(&mut self) -> Result<(), String> {
        self.prog.lock().unwrap().stop()
    }
}

/* Internals */
impl HDDlog {
    fn do_run<UH>(
        workers: usize,
        do_store: bool,
        cb: UH,
        print_err: Option<extern "C" fn(msg: *const raw::c_char)>,
    ) -> Result<Self, String>
    where
        UH: UpdateHandler + Send + 'static,
    {
        let workers = if workers == 0 { 1 } else { workers };

        let db: Arc<Mutex<DeltaMap<DDValue>>> = Arc::new(Mutex::new(DeltaMap::new()));
        let db2 = db.clone();

        let deltadb: Arc<Mutex<Option<DeltaMap<_>>>> = Arc::new(Mutex::new(None));
        let deltadb2 = deltadb.clone();

        let handler: Box<dyn IMTUpdateHandler> = {
            let handler_generator = move || {
                /* Always use delta handler, which costs nothing unless it is
                 * actually used*/
                let delta_handler = DeltaUpdateHandler::new(deltadb2);

                let store_handler = if do_store {
                    Some(ValMapUpdateHandler::new(db2))
                } else {
                    None
                };

                let cb_handler = Box::new(cb) as Box<dyn UpdateHandler + Send>;
                let mut handlers: Vec<Box<dyn UpdateHandler>> = Vec::new();
                handlers.push(Box::new(delta_handler));
                if let Some(h) = store_handler {
                    handlers.push(Box::new(h))
                };
                handlers.push(cb_handler);
                Box::new(ChainedUpdateHandler::new(handlers)) as Box<dyn UpdateHandler>
            };
            Box::new(ThreadUpdateHandler::new(handler_generator))
        };

        let program = prog(handler.mt_update_cb());

        /* Notify handler about initial transaction */
        handler.before_commit();
        let prog = program.run(workers as usize)?;
        handler.after_commit(true);

        Ok(HDDlog {
            prog: Mutex::new(prog),
            update_handler: handler,
            db: Some(db),
            deltadb,
            print_err,
            replay_file: None,
        })
    }

    fn db_dump_table<F>(db: &mut DeltaMap<DDValue>, table: libc::size_t, cb: Option<F>)
    where
        F: Fn(&record::Record) -> bool,
    {
        if let Some(f) = cb {
            for (val, w) in db.get_rel(table) {
                assert!(*w == 1);
                if !f(&val.clone().into_record()) {
                    break;
                }
            }
        };
    }

    fn record_transaction_start(&self) {
        if let Some(ref f) = self.replay_file {
            let _ = f.lock().unwrap().record_start().map_err(|_| {
                self.eprintln("failed to record invocation in replay file");
            });
        }
    }

    fn record_transaction_commit(&self, record_changes: bool) {
        if let Some(ref f) = self.replay_file {
            let _ = f
                .lock()
                .unwrap()
                .record_commit(record_changes)
                .map_err(|_| {
                    self.eprintln("failed to record invocation in replay file");
                });
        }
    }

    fn record_transaction_rollback(&self) {
        if let Some(ref f) = self.replay_file {
            let _ = f.lock().unwrap().record_rollback().map_err(|_| {
                self.eprintln("failed to record invocation in replay file");
            });
        }
    }

    fn record_clear_relation(&self, rid: RelId) {
        if let Some(ref f) = self.replay_file {
            let _ = f
                .lock()
                .unwrap()
                .record_clear::<DDlogConverter>(rid)
                .map_err(|e| {
                    self.eprintln("failed to record invocation in replay file");
                });
        }
    }

    fn record_dump_table(&self, rid: RelId) {
        if let Some(ref f) = self.replay_file {
            let _ = f
                .lock()
                .unwrap()
                .record_dump::<DDlogConverter>(rid)
                .map_err(|e| {
                    self.eprintln("ddlog_dump_table(): failed to record invocation in replay file");
                });
        }
    }

    fn record_dump_index(&self, iid: IdxId) {
        if let Some(ref f) = self.replay_file {
            let _ = f
                .lock()
                .unwrap()
                .record_dump_index::<DDlogConverter>(iid)
                .map_err(|e| {
                    self.eprintln("ddlog_dump_index(): failed to record invocation in replay file");
                });
        }
    }

    fn record_query_index(&self, iid: IdxId, key: &DDValue) {
        if let Some(ref f) = self.replay_file {
            let _ = f
                .lock()
                .unwrap()
                .record_query_index::<DDlogConverter>(iid, key)
                .map_err(|e| {
                    self.eprintln("ddlog_dump_index(): failed to record invocation in replay file");
                });
        }
    }

    fn record_enable_cpu_profiling(&self, enable: bool) {
        if let Some(ref f) = self.replay_file {
            let _ = f.lock().unwrap().record_cpu_profiling(enable).map_err(|_| {
                self.eprintln(
                    "ddlog_cpu_profiling_enable(): failed to record invocation in replay file",
                )
            });
        }
    }

    fn record_profile(&self) {
        if let Some(ref f) = self.replay_file {
            let _ = f.lock().unwrap().record_profile().map_err(|_| {
                self.eprintln("record_profile: failed to record invocation in replay file");
            });
        }
    }
}

pub fn updcmd2upd(c: &record::UpdCmd) -> Result<Update<DDValue>, String> {
    match c {
        record::UpdCmd::Insert(rident, rec) => {
            let relid =
                Relations::try_from(rident).map_err(|_| format!("Unknown relation {}", rident))?;
            let val = relval_from_record(relid, rec)?;
            Ok(Update::Insert {
                relid: relid as RelId,
                v: val,
            })
        }
        record::UpdCmd::InsertOrUpdate(rident, rec) => {
            let relid =
                Relations::try_from(rident).map_err(|_| format!("Unknown relation {}", rident))?;
            let val = relval_from_record(relid, rec)?;
            Ok(Update::InsertOrUpdate {
                relid: relid as RelId,
                v: val,
            })
        }
        record::UpdCmd::Delete(rident, rec) => {
            let relid =
                Relations::try_from(rident).map_err(|()| format!("Unknown relation {}", rident))?;
            let val = relval_from_record(relid, rec)?;
            Ok(Update::DeleteValue {
                relid: relid as RelId,
                v: val,
            })
        }
        record::UpdCmd::DeleteKey(rident, rec) => {
            let relid =
                Relations::try_from(rident).map_err(|()| format!("Unknown relation {}", rident))?;
            let key = relkey_from_record(relid, rec)?;
            Ok(Update::DeleteKey {
                relid: relid as RelId,
                k: key,
            })
        }
        record::UpdCmd::Modify(rident, key, rec) => {
            let relid =
                Relations::try_from(rident).map_err(|()| format!("Unknown relation {}", rident))?;
            let key = relkey_from_record(relid, key)?;
            Ok(Update::Modify {
                relid: relid as RelId,
                k: key,
                m: Arc::new(rec.clone()),
            })
        }
    }
}

/***************************************************
 * C bindings
 ***************************************************/

#[no_mangle]
pub unsafe extern "C" fn ddlog_get_table_id(tname: *const raw::c_char) -> libc::size_t {
    if tname.is_null() {
        return libc::size_t::max_value();
    };
    let table_str = ffi::CStr::from_ptr(tname).to_str().unwrap();
    match HDDlog::get_table_id(table_str) {
        Ok(relid) => relid as libc::size_t,
        Err(_) => libc::size_t::max_value(),
    }
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_get_table_name(tid: libc::size_t) -> *const raw::c_char {
    match HDDlog::get_table_cname(tid) {
        Ok(name) => name.as_ptr(),
        Err(_) => ptr::null(),
    }
}

#[no_mangle]
pub extern "C" fn ddlog_run(
    workers: raw::c_uint,
    do_store: bool,
    cb: Option<
        extern "C" fn(
            arg: libc::uintptr_t,
            table: libc::size_t,
            rec: *const record::Record,
            w: libc::ssize_t,
        ),
    >,
    cb_arg: libc::uintptr_t,
    print_err: Option<extern "C" fn(msg: *const raw::c_char)>,
) -> *const HDDlog {
    let result = if let Some(f) = cb {
        HDDlog::do_run(
            workers as usize,
            do_store,
            ExternCUpdateHandler::new(f, cb_arg),
            print_err,
        )
    } else {
        HDDlog::do_run(
            workers as usize,
            do_store,
            NullUpdateHandler::new(),
            print_err,
        )
    };

    match result {
        Ok(hddlog) => Arc::into_raw(Arc::new(hddlog)),
        Err(err) => {
            HDDlog::print_err(print_err, &format!("ddlog_run() failed: {}", err));
            ptr::null()
        }
    }
}

#[no_mangle]
#[cfg(unix)]
pub unsafe extern "C" fn ddlog_record_commands(prog: *const HDDlog, fd: RawFd) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let mut prog = Arc::from_raw(prog);

    let file = if fd == -1 {
        None
    } else {
        Some(fs::File::from_raw_fd(fd))
    };

    let res = match Arc::get_mut(&mut prog) {
        Some(prog) => {
            let mut old_file = file.map(Mutex::new);
            prog.record_commands(&mut old_file);
            /* Convert the old file into FD to prevent it from closing.
             * It is the caller's responsibility to close the file when
             * they are done with it. */
            old_file.map(|m| m.into_inner().unwrap().into_raw_fd());
            0
        }
        None => -1,
    };
    Arc::into_raw(prog);
    res
}

#[no_mangle]
#[cfg(windows)]
pub unsafe extern "C" fn ddlog_record_commands(prog: *const HDDlog, fd: raw::c_int) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let mut prog = Arc::from_raw(prog);

    let file = if fd == -1 {
        None
    } else {
        // Convert file descriptor to file handle on Windows.
        let handle = libc::get_osfhandle(fd);
        Some(fs::File::from_raw_handle(handle as RawHandle))
    };

    let res = match Arc::get_mut(&mut prog) {
        Some(prog) => {
            let mut old_file = file.map(Mutex::new);
            prog.record_commands(&mut old_file);
            /* Convert the old file into FD to prevent it from closing.
             * It is the caller's responsibility to close the file when
             * they are done with it. */
            old_file.map(|m| m.into_inner().unwrap().into_raw_handle());
            0
        }
        None => -1,
    };
    Arc::into_raw(prog);
    res
}

#[no_mangle]
#[cfg(unix)]
pub unsafe extern "C" fn ddlog_dump_input_snapshot(prog: *const HDDlog, fd: RawFd) -> raw::c_int {
    if prog.is_null() || fd < 0 {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    let mut file = fs::File::from_raw_fd(fd);
    let res = prog
        .dump_input_snapshot(&mut file)
        .map(|_| 0)
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_dump_input_snapshot: error: {}", e));
            -1
        });
    file.into_raw_fd();
    Arc::into_raw(prog);
    res
}

#[no_mangle]
#[cfg(windows)]
pub unsafe extern "C" fn ddlog_dump_input_snapshot(
    prog: *const HDDlog,
    fd: raw::c_int,
) -> raw::c_int {
    if prog.is_null() || fd < 0 {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    // Convert file descriptor to file handle on Windows.
    let handle = libc::get_osfhandle(fd);
    let mut file = fs::File::from_raw_handle(handle as RawHandle);
    let res = prog
        .dump_input_snapshot(&mut file)
        .map(|_| 0)
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_dump_input_snapshot: error: {}", e));
            -1
        });
    file.into_raw_handle();
    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_stop(prog: *const HDDlog) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    /* Prevents closing of the old descriptor. */
    ddlog_record_commands(prog, -1);

    let prog = Arc::from_raw(prog);
    match Arc::try_unwrap(prog) {
        Ok(HDDlog {
            prog, print_err, ..
        }) => prog
            .into_inner()
            .map(|mut p| {
                p.stop().map(|_| 0).unwrap_or_else(|e| {
                    HDDlog::print_err(print_err, &format!("ddlog_stop(): error: {}", e));
                    -1
                })
            })
            .unwrap_or_else(|e| {
                HDDlog::print_err(
                    print_err,
                    &format!("ddlog_stop(): error acquiring lock: {}", e),
                );
                -1
            }),
        Err(pref) => {
            pref.eprintln("ddlog_stop(): cannot extract value from Arc");
            -1
        }
    }
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_start(prog: *const HDDlog) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog.transaction_start().map(|_| 0).unwrap_or_else(|e| {
        prog.eprintln(&format!("ddlog_transaction_start(): error: {}", e));
        -1
    });

    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_commit_dump_changes(
    prog: *const HDDlog,
    cb: Option<
        extern "C" fn(
            arg: libc::uintptr_t,
            table: libc::size_t,
            rec: *const record::Record,
            polarity: bool,
        ),
    >,
    cb_arg: libc::uintptr_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let f = cb.map(|f| {
        move |tab, rec: &record::Record, pol| f(cb_arg, tab, rec as *const record::Record, pol)
    });

    let res = prog
        .transaction_commit_dump_changes()
        .map(|changes| {
            if let Some(f) = f {
                for (table_id, table_data) in changes.as_ref().iter() {
                    for (val, weight) in table_data.iter() {
                        assert!(*weight == 1 || *weight == -1);
                        f(
                            *table_id as libc::size_t,
                            &val.clone().into_record(),
                            *weight == 1,
                        );
                    }
                }
            };
            0
        })
        .unwrap_or_else(|e| {
            prog.eprintln(&format!(
                "ddlog_transaction_commit_dump_changes: error: {}",
                e
            ));
            -1
        });

    Arc::into_raw(prog);
    res
}

#[repr(C)]
pub struct ddlog_record_update {
    table: libc::size_t,
    rec: *mut record::Record,
    polarity: bool,
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_commit_dump_changes_as_array(
    prog: *const HDDlog,
    changes: *mut *const ddlog_record_update,
    num_changes: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    let res = do_transaction_commit_dump_changes_as_array(&*prog, changes, num_changes)
        .map(|_| 0)
        .unwrap_or_else(|e| {
            prog.eprintln(&format!(
                "ddlog_transaction_commit_dump_changes_as_array: error: {}",
                e
            ));
            -1
        });

    Arc::into_raw(prog);
    res
}

unsafe fn do_transaction_commit_dump_changes_as_array(
    prog: &HDDlog,
    changes: *mut *const ddlog_record_update,
    num_changes: *mut libc::size_t,
) -> Result<(), String> {
    let updates = prog.transaction_commit_dump_changes()?;
    let mut size = 0;
    for (_, delta) in updates.as_ref().iter() {
        size += delta.len();
    }

    *num_changes = size;
    // Make sure that vector's capacity will be equal to its length.
    let mut change_vec = Vec::with_capacity(size);
    for (rel, delta) in updates.into_iter() {
        for (val, w) in delta.into_iter() {
            change_vec.push(ddlog_record_update {
                table: rel,
                rec: Box::into_raw(Box::new(val.into_record())),
                polarity: w > 0,
            });
        }
    }
    *changes = change_vec.as_ptr();
    std::mem::forget(change_vec);
    Ok(())
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_free_record_updates(
    changes: *mut ddlog_record_update,
    num_changes: libc::size_t,
) {
    // Assume that vector's capacity is equal to its length.
    let changes_vec: Vec<ddlog_record_update> =
        Vec::from_raw_parts(changes, num_changes as usize, num_changes as usize);
    for upd in changes_vec.into_iter() {
        let upd: Box<record::Record> = Box::from_raw(upd.rec);
    }
}

#[cfg(feature = "flatbuf")]
#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_commit_dump_changes_to_flatbuf(
    prog: *const HDDlog,
    buf: *mut *const u8,
    buf_size: *mut libc::size_t,
    buf_capacity: *mut libc::size_t,
    buf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null() || buf_size.is_null() || buf_capacity.is_null() || buf_offset.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog
        .transaction_commit_dump_changes()
        .map(|changes| {
            let (fbvec, fboffset) = flatbuf::updates_to_flatbuf(&changes);
            *buf = fbvec.as_ptr();
            *buf_size = fbvec.len() as libc::size_t;
            *buf_capacity = fbvec.capacity() as libc::size_t;
            *buf_offset = fboffset as libc::size_t;
            mem::forget(fbvec);
            0
        })
        .unwrap_or_else(|e| {
            prog.eprintln(&format!(
                "ddlog_transaction_commit_dump_changes_to_flatbuf: error: {}",
                e
            ));
            -1
        });

    Arc::into_raw(prog);
    res
}

#[cfg(not(feature = "flatbuf"))]
#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_commit_dump_changes_to_flatbuf(
    prog: *const HDDlog,
    _buf: *mut *const u8,
    _buf_size: *mut libc::size_t,
    _buf_capacity: *mut libc::size_t,
    _buf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    prog.eprintln("ddlog_transaction_commit_dump_changes_to_flatbuf(): error: DDlog was compiled without FlatBuffers support");
    Arc::into_raw(prog);
    -1
}

#[cfg(feature = "flatbuf")]
#[no_mangle]
pub unsafe extern "C" fn ddlog_query_index_from_flatbuf(
    prog: *const HDDlog,
    buf: *const u8,
    n: libc::size_t,
    resbuf: *mut *const u8,
    resbuf_size: *mut libc::size_t,
    resbuf_capacity: *mut libc::size_t,
    resbuf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null()
        || buf.is_null()
        || resbuf.is_null()
        || resbuf_size.is_null()
        || resbuf_capacity.is_null()
        || resbuf_offset.is_null()
    {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let ret = flatbuf::query_from_flatbuf(slice::from_raw_parts(buf, n))
        .and_then(|(idxid, key)| {
            prog.query_index(idxid, key).map(|res| {
                let (fbvec, fboffset) = flatbuf::idx_values_to_flatbuf(idxid, res.iter());
                *resbuf = fbvec.as_ptr();
                *resbuf_size = fbvec.len() as libc::size_t;
                *resbuf_capacity = fbvec.capacity() as libc::size_t;
                *resbuf_offset = fboffset as libc::size_t;
                mem::forget(fbvec);
                0
            })
        })
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_query_index_from_flatbuf(): error: {}", e));
            -1
        });
    Arc::into_raw(prog);
    ret
}

#[cfg(not(feature = "flatbuf"))]
#[no_mangle]
pub unsafe extern "C" fn ddlog_query_index_from_flatbuf(
    prog: *const HDDlog,
    _buf: *const u8,
    _n: libc::size_t,
    _resbuf: *mut *const u8,
    _resbuf_size: *mut libc::size_t,
    _resbuf_capacity: *mut libc::size_t,
    _resbuf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    prog.eprintln(
        "ddlog_query_index_from_flatbuf(): error: DDlog was compiled without FlatBuffers support",
    );
    Arc::into_raw(prog);
    -1
}

#[cfg(feature = "flatbuf")]
#[no_mangle]
pub unsafe extern "C" fn ddlog_dump_index_to_flatbuf(
    prog: *const HDDlog,
    idxid: libc::size_t,
    resbuf: *mut *const u8,
    resbuf_size: *mut libc::size_t,
    resbuf_capacity: *mut libc::size_t,
    resbuf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null()
        || resbuf.is_null()
        || resbuf_size.is_null()
        || resbuf_capacity.is_null()
        || resbuf_offset.is_null()
    {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let ret = prog
        .dump_index(idxid as IdxId)
        .map(|res| {
            let (fbvec, fboffset) = flatbuf::idx_values_to_flatbuf(idxid, res.iter());
            *resbuf = fbvec.as_ptr();
            *resbuf_size = fbvec.len() as libc::size_t;
            *resbuf_capacity = fbvec.capacity() as libc::size_t;
            *resbuf_offset = fboffset as libc::size_t;
            mem::forget(fbvec);
            0
        })
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_dump_index_to_flatbuf(): error: {}", e));
            -1
        });
    Arc::into_raw(prog);
    ret
}

#[cfg(not(feature = "flatbuf"))]
#[no_mangle]
pub unsafe extern "C" fn ddlog_dump_index_to_flatbuf(
    prog: *const HDDlog,
    _idxid: libc::size_t,
    _resbuf: *mut *const u8,
    _resbuf_size: *mut libc::size_t,
    _resbuf_capacity: *mut libc::size_t,
    _resbuf_offset: *mut libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    prog.eprintln(
        "ddlog_dump_index_to_flatbuf(): error: DDlog was compiled without FlatBuffers support",
    );
    Arc::into_raw(prog);
    -1
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_flatbuf_free(
    buf: *mut u8,
    buf_size: libc::size_t,
    buf_capacity: libc::size_t,
) {
    Vec::from_raw_parts(buf, buf_size as usize, buf_capacity as usize);
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_commit(prog: *const HDDlog) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog.transaction_commit().map(|_| 0).unwrap_or_else(|e| {
        prog.eprintln(&format!("ddlog_transaction_commit(): error: {}", e));
        -1
    });

    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_transaction_rollback(prog: *const HDDlog) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog.transaction_rollback().map(|_| 0).unwrap_or_else(|e| {
        prog.eprintln(&format!("ddlog_transaction_rollback(): error: {}", e));
        -1
    });
    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_apply_updates(
    prog: *const HDDlog,
    upds: *const *mut record::UpdCmd,
    n: libc::size_t,
) -> raw::c_int {
    if prog.is_null() || upds.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog
        .apply_updates((0..n).map(|i| Box::from_raw(*upds.add(i))))
        .map(|_| 0)
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_apply_updates(): error: {}", e));
            -1
        });
    Arc::into_raw(prog);
    res
}

#[cfg(feature = "flatbuf")]
#[no_mangle]
pub unsafe extern "C" fn ddlog_apply_updates_from_flatbuf(
    prog: *const HDDlog,
    buf: *const u8,
    n: libc::size_t,
) -> raw::c_int {
    if prog.is_null() || buf.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog
        .apply_updates_from_flatbuf(slice::from_raw_parts(buf, n))
        .map(|_| 0)
        .unwrap_or_else(|e| {
            prog.eprintln(&format!("ddlog_apply_updates_from_flatbuf(): error: {}", e));
            -1
        });
    Arc::into_raw(prog);
    res
}

#[cfg(not(feature = "flatbuf"))]
#[no_mangle]
pub unsafe extern "C" fn ddlog_apply_updates_from_flatbuf(
    prog: *const HDDlog,
    _buf: *const u8,
    _n: libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);
    prog.eprintln(&"ddlog_apply_updates_from_flatbuf(): error: DDlog was compiled without FlatBuffers support");
    Arc::into_raw(prog);
    -1
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_clear_relation(
    prog: *const HDDlog,
    table: libc::size_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let res = prog.clear_relation(table).map(|_| 0).unwrap_or_else(|e| {
        prog.eprintln(&format!("ddlog_clear_relation(): error: {}", e));
        -1
    });
    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_dump_table(
    prog: *const HDDlog,
    table: libc::size_t,
    cb: Option<extern "C" fn(arg: libc::uintptr_t, rec: *const record::Record) -> bool>,
    cb_arg: libc::uintptr_t,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    let f = cb.map(|f| move |rec: &record::Record| f(cb_arg, rec));

    let res = prog.dump_table(table, f).map(|_| 0).unwrap_or_else(|e| {
        prog.eprintln(&format!("ddlog_dump_table(): error: {}", e));
        -1
    });

    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_enable_cpu_profiling(
    prog: *const HDDlog,
    enable: bool,
) -> raw::c_int {
    if prog.is_null() {
        return -1;
    };
    let prog = Arc::from_raw(prog);

    prog.enable_cpu_profiling(enable);

    Arc::into_raw(prog);
    0
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_profile(prog: *const HDDlog) -> *const raw::c_char {
    if prog.is_null() {
        return ptr::null();
    };
    let prog = Arc::from_raw(prog);

    let res = {
        let profile = prog.profile();
        ffi::CString::new(profile)
            .map(ffi::CString::into_raw)
            .unwrap_or_else(|e| {
                prog.eprintln(&format!("Failed to convert profile string to C: {}", e));
                ptr::null_mut()
            })
    };
    Arc::into_raw(prog);
    res
}

#[no_mangle]
pub unsafe extern "C" fn ddlog_string_free(s: *mut raw::c_char) {
    if s.is_null() {
        return;
    };
    ffi::CString::from_raw(s);
}
