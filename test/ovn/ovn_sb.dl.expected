import types

input relation SB_Global(
    _uuid: uuid,
    nb_cfg: integer,
    ssl: option_t<uuid>
)
input relation SB_Global_external_ids(
    sb_global: uuid,
    key: string,
    value: string
)
input relation SB_Global_connections(
    sb_global: uuid,
    key: uuid
)
input relation Chassis(
    _uuid: uuid,
    name: string,
    hostname: string,
    nb_cfg: integer
)
input relation Chassis_encaps(
    chassis: uuid,
    key: uuid
)
input relation Chassis_vtep_logical_switches(
    chassis: uuid,
    key: string
)
input relation Chassis_external_ids(
    chassis: uuid,
    key: string,
    value: string
)
input relation Encap(
    _uuid: uuid,
    _type: string,
    ip: string,
    chassis_name: string
)
input relation Encap_options(
    encap: uuid,
    key: string,
    value: string
)
relation Address_Set(
    _uuid: uuid,
    name: string
)
relation Address_Set_addresses(
    address_set: uuid,
    key: string
)
input relation Port_Group(
    _uuid: uuid,
    name: string
)
input relation Port_Group_ports(
    port_group: uuid,
    key: string
)
relation Logical_Flow(
    _uuid: uuid,
    logical_datapath: uuid,
    pipeline: string,
    table_id: integer,
    priority: integer,
    _match: string,
    actions: string
)
relation Logical_Flow_external_ids(
    logical_flow: uuid,
    key: string,
    value: string
)
input relation Multicast_Group(
    _uuid: uuid,
    datapath: uuid,
    name: string,
    tunnel_key: integer
)
input relation Multicast_Group_ports(
    multicast_group: uuid,
    key: uuid
)
input relation Meter(
    _uuid: uuid,
    name: string,
    unit: string
)
input relation Meter_bands(
    meter: uuid,
    key: uuid
)
input relation Meter_Band(
    _uuid: uuid,
    action: string,
    rate: integer,
    burst_size: integer
)
input relation Datapath_Binding(
    _uuid: uuid,
    tunnel_key: integer
)
input relation Datapath_Binding_external_ids(
    datapath_binding: uuid,
    key: string,
    value: string
)
input relation Port_Binding(
    _uuid: uuid,
    logical_port: string,
    _type: string,
    datapath: uuid,
    tunnel_key: integer,
    parent_port: option_t<string>,
    tag: option_t<integer>,
    chassis: option_t<uuid>
)
input relation Port_Binding_gateway_chassis(
    port_binding: uuid,
    key: uuid
)
input relation Port_Binding_options(
    port_binding: uuid,
    key: string,
    value: string
)
input relation Port_Binding_mac(
    port_binding: uuid,
    key: string
)
input relation Port_Binding_nat_addresses(
    port_binding: uuid,
    key: string
)
input relation Port_Binding_external_ids(
    port_binding: uuid,
    key: string,
    value: string
)
input relation MAC_Binding(
    _uuid: uuid,
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid
)
input relation DHCP_Options(
    _uuid: uuid,
    name: string,
    code: integer,
    _type: string
)
input relation DHCPv6_Options(
    _uuid: uuid,
    name: string,
    code: integer,
    _type: string
)
input relation Connection(
    _uuid: uuid,
    target: string,
    max_backoff: option_t<integer>,
    inactivity_probe: option_t<integer>,
    read_only: bool,
    role: string,
    is_connected: bool
)
input relation Connection_other_config(
    connection: uuid,
    key: string,
    value: string
)
input relation Connection_external_ids(
    connection: uuid,
    key: string,
    value: string
)
input relation Connection_status(
    connection: uuid,
    key: string,
    value: string
)
input relation SSL(
    _uuid: uuid,
    private_key: string,
    certificate: string,
    ca_cert: string,
    bootstrap_ca_cert: bool,
    ssl_protocols: string,
    ssl_ciphers: string
)
input relation SSL_external_ids(
    ssl: uuid,
    key: string,
    value: string
)
input relation DNS(
    _uuid: uuid
)
input relation DNS_records(
    dns: uuid,
    key: string,
    value: string
)
input relation DNS_datapaths(
    dns: uuid,
    key: uuid
)
input relation DNS_external_ids(
    dns: uuid,
    key: string,
    value: string
)
input relation RBAC_Role(
    _uuid: uuid,
    name: string
)
input relation RBAC_Role_permissions(
    rbac_role: uuid,
    key: string,
    value: uuid
)
input relation RBAC_Permission(
    _uuid: uuid,
    table: string,
    insert_delete: bool
)
input relation RBAC_Permission_authorization(
    rbac_permission: uuid,
    key: string
)
input relation RBAC_Permission_update(
    rbac_permission: uuid,
    key: string
)
input relation Gateway_Chassis(
    _uuid: uuid,
    name: string,
    chassis: option_t<uuid>,
    priority: integer
)
input relation Gateway_Chassis_external_ids(
    gateway_chassis: uuid,
    key: string,
    value: string
)
input relation Gateway_Chassis_options(
    gateway_chassis: uuid,
    key: string,
    value: string
)