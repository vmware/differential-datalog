import types

input relation NB_Global(
    _uuid: uuid,
    nb_cfg: integer,
    sb_cfg: integer,
    hv_cfg: integer,
    ssl: option_t<uuid>
)
input relation NB_Global_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation NB_Global_connections(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch(
    _uuid: uuid,
    name: string
)
input relation Logical_Switch_ports(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch_acls(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch_qos_rules(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch_load_balancer(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch_dns_records(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Switch_other_config(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Switch_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Switch_Port(
    _uuid: uuid,
    name: string,
    __type: string,
    parent_name: option_t<string>,
    tag_request: option_t<integer>,
    tag: option_t<integer>,
    dynamic_addresses: option_t<string>,
    up: option_t<bool>,
    enabled: option_t<bool>,
    dhcpv4_options: option_t<uuid>,
    dhcpv6_options: option_t<uuid>
)
input relation Logical_Switch_Port_options(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Switch_Port_addresses(
    _uuid: uuid,
    key: string
)
input relation Logical_Switch_Port_port_security(
    _uuid: uuid,
    key: string
)
input relation Logical_Switch_Port_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Address_Set(
    _uuid: uuid,
    name: string
)
input relation Address_Set_addresses(
    _uuid: uuid,
    key: string
)
input relation Address_Set_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Port_Group(
    _uuid: uuid,
    name: string
)
input relation Port_Group_ports(
    _uuid: uuid,
    key: uuid
)
input relation Port_Group_acls(
    _uuid: uuid,
    key: uuid
)
input relation Port_Group_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Load_Balancer(
    _uuid: uuid,
    name: string,
    protocol: option_t<string>
)
input relation Load_Balancer_vips(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Load_Balancer_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation ACL(
    _uuid: uuid,
    name: option_t<string>,
    priority: integer,
    direction: string,
    __match: string,
    action: string,
    log: bool,
    severity: option_t<string>,
    meter: option_t<string>
)
input relation ACL_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation QoS(
    _uuid: uuid,
    priority: integer,
    direction: string,
    __match: string
)
input relation QoS_action(
    _uuid: uuid,
    key: string,
    value: integer
)
input relation QoS_bandwidth(
    _uuid: uuid,
    key: string,
    value: integer
)
input relation QoS_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Meter(
    _uuid: uuid,
    name: string,
    unit: string
)
input relation Meter_bands(
    _uuid: uuid,
    key: uuid
)
input relation Meter_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Meter_Band(
    _uuid: uuid,
    action: string,
    rate: integer,
    burst_size: integer
)
input relation Meter_Band_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router(
    _uuid: uuid,
    name: string,
    enabled: option_t<bool>
)
input relation Logical_Router_ports(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Router_static_routes(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Router_nat(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Router_load_balancer(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Router_options(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router_Port(
    _uuid: uuid,
    name: string,
    mac: string,
    peer: option_t<string>,
    enabled: option_t<bool>
)
input relation Logical_Router_Port_gateway_chassis(
    _uuid: uuid,
    key: uuid
)
input relation Logical_Router_Port_options(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router_Port_networks(
    _uuid: uuid,
    key: string
)
input relation Logical_Router_Port_ipv6_ra_configs(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router_Port_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Logical_Router_Static_Route(
    _uuid: uuid,
    ip_prefix: string,
    policy: option_t<string>,
    nexthop: string,
    output_port: option_t<string>
)
input relation Logical_Router_Static_Route_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation NAT(
    _uuid: uuid,
    external_ip: string,
    external_mac: option_t<string>,
    logical_ip: string,
    logical_port: option_t<string>,
    __type: string
)
input relation NAT_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation DHCP_Options(
    _uuid: uuid,
    cidr: string
)
input relation DHCP_Options_options(
    _uuid: uuid,
    key: string,
    value: string
)
input relation DHCP_Options_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Connection(
    _uuid: uuid,
    target: string,
    max_backoff: option_t<integer>,
    inactivity_probe: option_t<integer>,
    is_connected: bool
)
input relation Connection_other_config(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Connection_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Connection_status(
    _uuid: uuid,
    key: string,
    value: string
)
input relation DNS(
    _uuid: uuid
)
input relation DNS_records(
    _uuid: uuid,
    key: string,
    value: string
)
input relation DNS_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation SSL(
    _uuid: uuid,
    private_key: string,
    certificate: string,
    ca_cert: string,
    bootstrap_ca_cert: bool,
    ssl_protocols: string,
    ssl_ciphers: string
)
input relation SSL_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Gateway_Chassis(
    _uuid: uuid,
    name: string,
    chassis_name: string,
    priority: integer
)
input relation Gateway_Chassis_external_ids(
    _uuid: uuid,
    key: string,
    value: string
)
input relation Gateway_Chassis_options(
    _uuid: uuid,
    key: string,
    value: string
)