import types


/* Input relations */

input relation Chassis (
    _uuid: uuid,
    name: string,
    hostname: string,
    encaps: Set<uuid>,
    vtep_logical_switches: Set<string>,
    nb_cfg: integer,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
input relation Encap (
    _uuid: uuid,
    __type: string,
    options: Map<string,string>,
    ip: string,
    chassis_name: string
)
primary key (x) x._uuid
input relation Connection (
    _uuid: uuid,
    target: string,
    max_backoff: Set<integer>,
    inactivity_probe: Set<integer>,
    read_only: bool,
    role: string,
    other_config: Map<string,string>,
    external_ids: Map<string,string>,
    is_connected: bool,
    status: Map<string,string>
)
primary key (x) x._uuid
input relation SSL (
    _uuid: uuid,
    private_key: string,
    certificate: string,
    ca_cert: string,
    bootstrap_ca_cert: bool,
    ssl_protocols: string,
    ssl_ciphers: string,
    external_ids: Map<string,string>
)
primary key (x) x._uuid

/* Output relations */

relation SB_Global (
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
relation Address_Set (
    name: string,
    addresses: Set<string>
)
relation Port_Group (
    name: string,
    ports: Set<string>
)
relation Logical_Flow (
    logical_datapath: string,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
relation Multicast_Group (
    datapath: string,
    name: string,
    tunnel_key: integer,
    ports: Set<string>
)
relation Meter (
    name: string,
    unit: string,
    bands: Set<string>
)
relation Meter_Band (
    uuid_name: string,
    action: string,
    rate: integer,
    burst_size: integer
)
relation Datapath_Binding (
    uuid_name: string,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
relation Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<string>,
    options: Map<string,string>,
    datapath: string,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
relation MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: string
)
relation DHCP_Options (
    name: string,
    code: integer,
    __type: string
)
relation DHCPv6_Options (
    name: string,
    code: integer,
    __type: string
)
relation DNS (
    records: Map<string,string>,
    datapaths: Set<string>,
    external_ids: Map<string,string>
)
relation RBAC_Role (
    name: string,
    permissions: Map<string,string>
)
relation RBAC_Permission (
    uuid_name: string,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
relation Gateway_Chassis (
    uuid_name: string,
    name: string,
    chassis: Set<uuid>,
    priority: integer,
    external_ids: Map<string,string>,
    options: Map<string,string>
)

/* Delta tables definitions */

output relation DeltaPlus_SB_Global (
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
DeltaPlus_SB_Global(nb_cfg, external_ids, connections, ssl) :-
    SB_Global(nb_cfg, external_ids, connections, ssl),
    not Realized_SB_Global(_, nb_cfg, external_ids, connections, ssl).
output relation DeltaMinus_SB_Global (
    _uuid: uuid
)
DeltaMinus_SB_Global(_uuid) :-
    Realized_SB_Global(_uuid, nb_cfg, external_ids, connections, ssl),
    not SB_Global(nb_cfg, external_ids, connections, ssl).
input relation Realized_SB_Global (
    _uuid: uuid,
    nb_cfg: integer,
    external_ids: Map<string,string>,
    connections: Set<uuid>,
    ssl: Set<uuid>
)
primary key (x) x._uuid
output relation DeltaPlus_Address_Set (
    name: string,
    addresses: Set<string>
)
DeltaPlus_Address_Set(name, addresses) :-
    Address_Set(name, addresses),
    not Realized_Address_Set(_, name, _).
output relation DeltaMinus_Address_Set (
    _uuid: uuid
)
DeltaMinus_Address_Set(_uuid) :-
    Realized_Address_Set(_uuid, name, _),
    not Address_Set(name, _).
output relation Update_Address_Set (
    _uuid: uuid,
    addresses: Set<string>
)
Update_Address_Set(_uuid, __new_addresses) :-
    Address_Set(name, __new_addresses),
    Realized_Address_Set(_uuid, name, __old_addresses),
    (__old_addresses) != (__new_addresses).
input relation Realized_Address_Set (
    _uuid: uuid,
    name: string,
    addresses: Set<string>
)
primary key (x) x._uuid
output relation DeltaPlus_Port_Group (
    name: string,
    ports: Set<string>
)
DeltaPlus_Port_Group(name, ports) :-
    Port_Group(name, ports),
    not Realized_Port_Group(_, name, _).
output relation DeltaMinus_Port_Group (
    _uuid: uuid
)
DeltaMinus_Port_Group(_uuid) :-
    Realized_Port_Group(_uuid, name, _),
    not Port_Group(name, _).
output relation Update_Port_Group (
    _uuid: uuid,
    ports: Set<string>
)
Update_Port_Group(_uuid, __new_ports) :-
    Port_Group(name, __new_ports),
    Realized_Port_Group(_uuid, name, __old_ports),
    (__old_ports) != (__new_ports).
input relation Realized_Port_Group (
    _uuid: uuid,
    name: string,
    ports: Set<string>
)
primary key (x) x._uuid
relation Swizzled_Logical_Flow (
    logical_datapath: uuid_or_string_t,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
Swizzled_Logical_Flow(__id_logical_datapath, pipeline, table_id, priority, __match, actions, external_ids) :-
    Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids),
    UUIDMap_Datapath_Binding(logical_datapath, __id_logical_datapath).
output relation DeltaPlus_Logical_Flow (
    logical_datapath: uuid_or_string_t,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
DeltaPlus_Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids) :-
    Swizzled_Logical_Flow(logical_datapath, pipeline, table_id, priority, __match, actions, external_ids),
    not Realized_Logical_Flow(_, extract_uuid(logical_datapath), pipeline, table_id, priority, __match, actions, external_ids).
output relation DeltaMinus_Logical_Flow (
    _uuid: uuid
)
DeltaMinus_Logical_Flow(_uuid) :-
    Realized_Logical_Flow(_uuid, logical_datapath, pipeline, table_id, priority, __match, actions, external_ids),
    not Swizzled_Logical_Flow(Left{logical_datapath}, pipeline, table_id, priority, __match, actions, external_ids).
input relation Realized_Logical_Flow (
    _uuid: uuid,
    logical_datapath: uuid,
    pipeline: string,
    table_id: integer,
    priority: integer,
    __match: string,
    actions: string,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation Swizzled_Multicast_Group (
    datapath: uuid_or_string_t,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid_or_string_t>
)
Swizzled_Multicast_Group(__id_datapath, name, tunnel_key, __id_ports) :-
    Multicast_Group(datapath, name, tunnel_key, ports),
    UUIDMap_Datapath_Binding(datapath, __id_datapath),
    var __one = FlatMap(ports),
    UUIDMap_Port_Binding(__one, __one_swizzled),
    Aggregate((__id_datapath, name, tunnel_key), __id_ports = group2set(__one_swizzled)).
output relation DeltaPlus_Multicast_Group (
    datapath: uuid_or_string_t,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid_or_string_t>
)
DeltaPlus_Multicast_Group(datapath, name, tunnel_key, ports) :-
    Swizzled_Multicast_Group(datapath, name, tunnel_key, ports),
    not Realized_Multicast_Group(_, extract_uuid(datapath), name, tunnel_key, _).
output relation DeltaMinus_Multicast_Group (
    _uuid: uuid
)
DeltaMinus_Multicast_Group(_uuid) :-
    Realized_Multicast_Group(_uuid, datapath, name, tunnel_key, _),
    not Swizzled_Multicast_Group(Left{datapath}, name, tunnel_key, _).
output relation Update_Multicast_Group (
    _uuid: uuid,
    ports: Set<uuid_or_string_t>
)
Update_Multicast_Group(_uuid, __new_ports) :-
    Swizzled_Multicast_Group(Left{datapath}, name, tunnel_key, __new_ports),
    Realized_Multicast_Group(_uuid, datapath, name, tunnel_key, __old_ports),
    (__old_ports) != (set_extract_uuids(__new_ports)).
input relation Realized_Multicast_Group (
    _uuid: uuid,
    datapath: uuid,
    name: string,
    tunnel_key: integer,
    ports: Set<uuid>
)
primary key (x) x._uuid
relation Swizzled_Meter (
    name: string,
    unit: string,
    bands: Set<uuid_or_string_t>
)
Swizzled_Meter(name, unit, __id_bands) :-
    Meter(name, unit, bands),
    var __one = FlatMap(bands),
    UUIDMap_Meter_Band(__one, __one_swizzled),
    Aggregate((name, unit), __id_bands = group2set(__one_swizzled)).
output relation DeltaPlus_Meter (
    name: string,
    unit: string,
    bands: Set<uuid_or_string_t>
)
DeltaPlus_Meter(name, unit, bands) :-
    Swizzled_Meter(name, unit, bands),
    not Realized_Meter(_, name, _, _).
output relation DeltaMinus_Meter (
    _uuid: uuid
)
DeltaMinus_Meter(_uuid) :-
    Realized_Meter(_uuid, name, _, _),
    not Swizzled_Meter(name, _, _).
output relation Update_Meter (
    _uuid: uuid,
    unit: string,
    bands: Set<uuid_or_string_t>
)
Update_Meter(_uuid, __new_unit, __new_bands) :-
    Swizzled_Meter(name, __new_unit, __new_bands),
    Realized_Meter(_uuid, name, __old_unit, __old_bands),
    (__old_unit, __old_bands) != (__new_unit, set_extract_uuids(__new_bands)).
input relation Realized_Meter (
    _uuid: uuid,
    name: string,
    unit: string,
    bands: Set<uuid>
)
primary key (x) x._uuid
relation UUIDMap_Meter_Band (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Meter_Band(__name, Left{__uuid}) :-
    Meter_Band(__name, action, rate, burst_size),
    Realized_Meter_Band(__uuid, action, rate, burst_size).
UUIDMap_Meter_Band(__name, Right{__name}) :-
    Meter_Band(__name, action, rate, burst_size),
    Realized_Meter_Band(_, action, rate, burst_size).
output relation DeltaPlus_Meter_Band (
    uuid_name: string,
    action: string,
    rate: integer,
    burst_size: integer
)
DeltaPlus_Meter_Band(uuid_name, action, rate, burst_size) :-
    Meter_Band(uuid_name, action, rate, burst_size),
    not Realized_Meter_Band(_, action, rate, burst_size).
output relation DeltaMinus_Meter_Band (
    _uuid: uuid
)
DeltaMinus_Meter_Band(_uuid) :-
    Realized_Meter_Band(_uuid, action, rate, burst_size),
    not Meter_Band(_, action, rate, burst_size).
input relation Realized_Meter_Band (
    _uuid: uuid,
    action: string,
    rate: integer,
    burst_size: integer
)
primary key (x) x._uuid
relation UUIDMap_Datapath_Binding (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Datapath_Binding(__name, Left{__uuid}) :-
    Datapath_Binding(__name, _, external_ids),
    Realized_Datapath_Binding(__uuid, _, external_ids).
UUIDMap_Datapath_Binding(__name, Right{__name}) :-
    Datapath_Binding(__name, _, external_ids),
    Realized_Datapath_Binding(_, _, external_ids).
output relation DeltaPlus_Datapath_Binding (
    uuid_name: string,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
DeltaPlus_Datapath_Binding(uuid_name, tunnel_key, external_ids) :-
    Datapath_Binding(uuid_name, tunnel_key, external_ids),
    not Realized_Datapath_Binding(_, _, external_ids).
output relation DeltaMinus_Datapath_Binding (
    _uuid: uuid
)
DeltaMinus_Datapath_Binding(_uuid) :-
    Realized_Datapath_Binding(_uuid, _, external_ids),
    not Datapath_Binding(_, _, external_ids).
output relation Update_Datapath_Binding (
    _uuid: uuid,
    tunnel_key: integer
)
Update_Datapath_Binding(_uuid, __new_tunnel_key) :-
    Datapath_Binding(_, __new_tunnel_key, external_ids),
    Realized_Datapath_Binding(_uuid, __old_tunnel_key, external_ids),
    (__old_tunnel_key) != (__new_tunnel_key).
input relation Realized_Datapath_Binding (
    _uuid: uuid,
    tunnel_key: integer,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation UUIDMap_Port_Binding (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Port_Binding(__name, Left{__uuid}) :-
    Swizzled_Port_Binding(__name, logical_port, _, _, _, _, _, _, _, _, _, _, _),
    Realized_Port_Binding(__uuid, logical_port, _, _, _, _, _, _, _, _, _, _, _).
UUIDMap_Port_Binding(__name, Right{__name}) :-
    Swizzled_Port_Binding(__name, logical_port, _, _, _, _, _, _, _, _, _, _, _),
    Realized_Port_Binding(_, logical_port, _, _, _, _, _, _, _, _, _, _, _).
relation Swizzled_Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid_or_string_t>,
    options: Map<string,string>,
    datapath: uuid_or_string_t,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
Swizzled_Port_Binding(uuid_name, logical_port, __type, __id_gateway_chassis, options, __id_datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids) :-
    Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids),
    var __one = FlatMap(gateway_chassis),
    UUIDMap_Gateway_Chassis(__one, __one_swizzled),
    Aggregate((uuid_name, logical_port, __type, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids), __id_gateway_chassis = group2set(__one_swizzled)),
    UUIDMap_Datapath_Binding(datapath, __id_datapath).
output relation DeltaPlus_Port_Binding (
    uuid_name: string,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid_or_string_t>,
    options: Map<string,string>,
    datapath: uuid_or_string_t,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
DeltaPlus_Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids) :-
    Swizzled_Port_Binding(uuid_name, logical_port, __type, gateway_chassis, options, datapath, tunnel_key, parent_port, tag, chassis, mac, nat_addresses, external_ids),
    not Realized_Port_Binding(_, logical_port, _, _, _, _, _, _, _, _, _, _, _).
output relation DeltaMinus_Port_Binding (
    _uuid: uuid
)
DeltaMinus_Port_Binding(_uuid) :-
    Realized_Port_Binding(_uuid, logical_port, _, _, _, _, _, _, _, _, _, _, _),
    not Swizzled_Port_Binding(_, logical_port, _, _, _, _, _, _, _, _, _, _, _).
output relation Update_Port_Binding (
    _uuid: uuid,
    __type: string,
    gateway_chassis: Set<uuid_or_string_t>,
    options: Map<string,string>,
    datapath: uuid_or_string_t,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
Update_Port_Binding(_uuid, __new___type, __new_gateway_chassis, __new_options, __new_datapath, __new_tunnel_key, __new_parent_port, __new_tag, __new_chassis, __new_mac, __new_nat_addresses, __new_external_ids) :-
    Swizzled_Port_Binding(_, logical_port, __new___type, __new_gateway_chassis, __new_options, __new_datapath, __new_tunnel_key, __new_parent_port, __new_tag, __new_chassis, __new_mac, __new_nat_addresses, __new_external_ids),
    Realized_Port_Binding(_uuid, logical_port, __old___type, __old_gateway_chassis, __old_options, __old_datapath, __old_tunnel_key, __old_parent_port, __old_tag, __old_chassis, __old_mac, __old_nat_addresses, __old_external_ids),
    (__old___type, __old_gateway_chassis, __old_options, __old_datapath, __old_tunnel_key, __old_parent_port, __old_tag, __old_chassis, __old_mac, __old_nat_addresses, __old_external_ids) != (__new___type, set_extract_uuids(__new_gateway_chassis), __new_options, extract_uuid(__new_datapath), __new_tunnel_key, __new_parent_port, __new_tag, __new_chassis, __new_mac, __new_nat_addresses, __new_external_ids).
input relation Realized_Port_Binding (
    _uuid: uuid,
    logical_port: string,
    __type: string,
    gateway_chassis: Set<uuid>,
    options: Map<string,string>,
    datapath: uuid,
    tunnel_key: integer,
    parent_port: Set<string>,
    tag: Set<integer>,
    chassis: Set<uuid>,
    mac: Set<string>,
    nat_addresses: Set<string>,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation Swizzled_MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid_or_string_t
)
Swizzled_MAC_Binding(logical_port, ip, mac, __id_datapath) :-
    MAC_Binding(logical_port, ip, mac, datapath),
    UUIDMap_Datapath_Binding(datapath, __id_datapath).
output relation DeltaPlus_MAC_Binding (
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid_or_string_t
)
DeltaPlus_MAC_Binding(logical_port, ip, mac, datapath) :-
    Swizzled_MAC_Binding(logical_port, ip, mac, datapath),
    not Realized_MAC_Binding(_, logical_port, ip, mac, extract_uuid(datapath)).
output relation DeltaMinus_MAC_Binding (
    _uuid: uuid
)
DeltaMinus_MAC_Binding(_uuid) :-
    Realized_MAC_Binding(_uuid, logical_port, ip, mac, datapath),
    not Swizzled_MAC_Binding(logical_port, ip, mac, Left{datapath}).
input relation Realized_MAC_Binding (
    _uuid: uuid,
    logical_port: string,
    ip: string,
    mac: string,
    datapath: uuid
)
primary key (x) x._uuid
output relation DeltaPlus_DHCP_Options (
    name: string,
    code: integer,
    __type: string
)
DeltaPlus_DHCP_Options(name, code, __type) :-
    DHCP_Options(name, code, __type),
    not Realized_DHCP_Options(_, name, code, __type).
output relation DeltaMinus_DHCP_Options (
    _uuid: uuid
)
DeltaMinus_DHCP_Options(_uuid) :-
    Realized_DHCP_Options(_uuid, name, code, __type),
    not DHCP_Options(name, code, __type).
input relation Realized_DHCP_Options (
    _uuid: uuid,
    name: string,
    code: integer,
    __type: string
)
primary key (x) x._uuid
output relation DeltaPlus_DHCPv6_Options (
    name: string,
    code: integer,
    __type: string
)
DeltaPlus_DHCPv6_Options(name, code, __type) :-
    DHCPv6_Options(name, code, __type),
    not Realized_DHCPv6_Options(_, name, code, __type).
output relation DeltaMinus_DHCPv6_Options (
    _uuid: uuid
)
DeltaMinus_DHCPv6_Options(_uuid) :-
    Realized_DHCPv6_Options(_uuid, name, code, __type),
    not DHCPv6_Options(name, code, __type).
input relation Realized_DHCPv6_Options (
    _uuid: uuid,
    name: string,
    code: integer,
    __type: string
)
primary key (x) x._uuid
relation Swizzled_DNS (
    records: Map<string,string>,
    datapaths: Set<uuid_or_string_t>,
    external_ids: Map<string,string>
)
Swizzled_DNS(records, __id_datapaths, external_ids) :-
    DNS(records, datapaths, external_ids),
    var __one = FlatMap(datapaths),
    UUIDMap_Datapath_Binding(__one, __one_swizzled),
    Aggregate((records, external_ids), __id_datapaths = group2set(__one_swizzled)).
output relation DeltaPlus_DNS (
    records: Map<string,string>,
    datapaths: Set<uuid_or_string_t>,
    external_ids: Map<string,string>
)
DeltaPlus_DNS(records, datapaths, external_ids) :-
    Swizzled_DNS(records, datapaths, external_ids),
    not Realized_DNS(_, _, _, external_ids).
output relation DeltaMinus_DNS (
    _uuid: uuid
)
DeltaMinus_DNS(_uuid) :-
    Realized_DNS(_uuid, _, _, external_ids),
    not Swizzled_DNS(_, _, external_ids).
output relation Update_DNS (
    _uuid: uuid,
    records: Map<string,string>,
    datapaths: Set<uuid_or_string_t>
)
Update_DNS(_uuid, __new_records, __new_datapaths) :-
    Swizzled_DNS(__new_records, __new_datapaths, external_ids),
    Realized_DNS(_uuid, __old_records, __old_datapaths, external_ids),
    (__old_records, __old_datapaths) != (__new_records, set_extract_uuids(__new_datapaths)).
input relation Realized_DNS (
    _uuid: uuid,
    records: Map<string,string>,
    datapaths: Set<uuid>,
    external_ids: Map<string,string>
)
primary key (x) x._uuid
relation Swizzled_RBAC_Role (
    name: string,
    permissions: Map<string,uuid_or_string_t>
)
Swizzled_RBAC_Role(name, __id_permissions) :-
    RBAC_Role(name, permissions),
    var __one = FlatMap(permissions),
    (var __one_key, var __one_ref) = __one,
    UUIDMap_RBAC_Permission(__one_ref, __one_swizzled),
    Aggregate((name), __id_permissions = group2map((__one_key, __one_swizzled))).
output relation DeltaPlus_RBAC_Role (
    name: string,
    permissions: Map<string,uuid_or_string_t>
)
DeltaPlus_RBAC_Role(name, permissions) :-
    Swizzled_RBAC_Role(name, permissions),
    not Realized_RBAC_Role(_, name, _).
output relation DeltaMinus_RBAC_Role (
    _uuid: uuid
)
DeltaMinus_RBAC_Role(_uuid) :-
    Realized_RBAC_Role(_uuid, name, _),
    not Swizzled_RBAC_Role(name, _).
output relation Update_RBAC_Role (
    _uuid: uuid,
    permissions: Map<string,uuid_or_string_t>
)
Update_RBAC_Role(_uuid, __new_permissions) :-
    Swizzled_RBAC_Role(name, __new_permissions),
    Realized_RBAC_Role(_uuid, name, __old_permissions),
    (__old_permissions) != (map_extract_val_uuids(__new_permissions)).
input relation Realized_RBAC_Role (
    _uuid: uuid,
    name: string,
    permissions: Map<string,uuid>
)
primary key (x) x._uuid
relation UUIDMap_RBAC_Permission (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_RBAC_Permission(__name, Left{__uuid}) :-
    RBAC_Permission(__name, table, authorization, insert_delete, update),
    Realized_RBAC_Permission(__uuid, table, authorization, insert_delete, update).
UUIDMap_RBAC_Permission(__name, Right{__name}) :-
    RBAC_Permission(__name, table, authorization, insert_delete, update),
    Realized_RBAC_Permission(_, table, authorization, insert_delete, update).
output relation DeltaPlus_RBAC_Permission (
    uuid_name: string,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
DeltaPlus_RBAC_Permission(uuid_name, table, authorization, insert_delete, update) :-
    RBAC_Permission(uuid_name, table, authorization, insert_delete, update),
    not Realized_RBAC_Permission(_, table, authorization, insert_delete, update).
output relation DeltaMinus_RBAC_Permission (
    _uuid: uuid
)
DeltaMinus_RBAC_Permission(_uuid) :-
    Realized_RBAC_Permission(_uuid, table, authorization, insert_delete, update),
    not RBAC_Permission(_, table, authorization, insert_delete, update).
input relation Realized_RBAC_Permission (
    _uuid: uuid,
    table: string,
    authorization: Set<string>,
    insert_delete: bool,
    update: Set<string>
)
primary key (x) x._uuid
relation UUIDMap_Gateway_Chassis (
    uuid_name: string,
    id: uuid_or_string_t
)
UUIDMap_Gateway_Chassis(__name, Left{__uuid}) :-
    Gateway_Chassis(__name, name, chassis, priority, external_ids, options),
    Realized_Gateway_Chassis(__uuid, name, chassis, priority, external_ids, options).
UUIDMap_Gateway_Chassis(__name, Right{__name}) :-
    Gateway_Chassis(__name, name, chassis, priority, external_ids, options),
    Realized_Gateway_Chassis(_, name, chassis, priority, external_ids, options).
output relation DeltaPlus_Gateway_Chassis (
    uuid_name: string,
    name: string,
    chassis: Set<uuid>,
    priority: integer,
    external_ids: Map<string,string>,
    options: Map<string,string>
)
DeltaPlus_Gateway_Chassis(uuid_name, name, chassis, priority, external_ids, options) :-
    Gateway_Chassis(uuid_name, name, chassis, priority, external_ids, options),
    not Realized_Gateway_Chassis(_, name, chassis, priority, external_ids, options).
output relation DeltaMinus_Gateway_Chassis (
    _uuid: uuid
)
DeltaMinus_Gateway_Chassis(_uuid) :-
    Realized_Gateway_Chassis(_uuid, name, chassis, priority, external_ids, options),
    not Gateway_Chassis(_, name, chassis, priority, external_ids, options).
input relation Realized_Gateway_Chassis (
    _uuid: uuid,
    name: string,
    chassis: Set<uuid>,
    priority: integer,
    external_ids: Map<string,string>,
    options: Map<string,string>
)
primary key (x) x._uuid