typedef Alt = C0{x: bit<32>} | C1{x: bit<32>}
typedef C = C{f1: string, f2: string}
typedef nested_t = N{field: C}
typedef option_t<'A> = None{} | Some{value: 'A}
typedef set<'A>
typedef string_syn = string
function __builtin_2string (x: 'X): string
function a0 (): int =
    1
function a1 (): int =
    (1 + 2)
function a2 (): bit<32> =
    (32'd0 + 32'd1)
function a3 (): bit<32> =
    (0: bit<32>)
function a4 (): bit<32> =
    (0: bit<64>)[40:9]
function a5 (a: bit<32>, b: bit<32>): bit<32> =
    ((((((a & b) | (a | b)) | (~ a)) | (a << 32'd5)) | (a >> 32'd5)) | (a[15:0] ++ a[31:16]))
function a6 (a: bit<16>, b: bit<16>): bit<16> =
    (((((a + b) + (a - b)) + (a / b)) + (a * b)) + (a % b))
function a7 (a: bit<16>, b: bit<16>): bool =
    (((((((a < b) or (a > b)) or (a <= b)) or (a >= b)) or (a == b)) or (a != b)) or (a < b))
function a8 (): bit<32> =
    (((32'd125 | 32'd255) | 32'd511) | 32'd683)
function b0 (): bool =
    (true and false)
function b1 (a: bool): bool =
    ((((a and true) or (a or false)) or (a => false)) or (not a))
function c0 (a: bit<32>, b: bit<16>): bit<16> =
    (a;
     b)
function f (): int
function fnested (x: nested_t): string =
    (N{.field=C{.f1=var res, .f2=_}} = x;
     res)
function g (a: int): int
function h (a: (int, int)): (int, int)
function parameterized (x: 'A, y: 'A): 'A
function patterns (): () =
    ((var a: Alt) = C0{.x=1};
     (var b = match (a) {
                  C0{.x=_} -> true,
                  C1{.x=_} -> false
              };
      (var i: bit<32>) = match (a) {
                             C0{.x=var v} -> v,
                             C1{.x=var v} -> v
                         }))
function s0 (): string =
    "Some string"
function s1 (): string =
    "\t\r\n\"\\\a"
function shadow (): string =
    ((var b: option_t<string>) = None{};
     (var a = Some{.value="foo"};
      match (a) {
          Some{.value=var v} -> v,
          None{} -> ""
      }))
function use_parameterized (x: string, y: string_syn): string =
    parameterized(x, y)
function v (): string =
    ((var v1: string) = "hello";
     (var v2 = "there";
      v2))
function v2 (): bool =
    b1(true)
function vars (): () =
    ((var x: int);
     (x = 10;
      (var y = C{.f1="foo", .f2="bar"};
       ((var z: C) = C{.f1="bar", .f2="foo"};
        ((var a, var b) = ((x + 5), (x - 5));
         (C{.f1=var e, .f2=_} = y;
          C{.f1=var c, .f2=var d} = y))))))
function x (): Alt =
    C0{.x=32'd5}
