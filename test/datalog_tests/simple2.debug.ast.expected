typedef Ack = Ack{m: ddlog_std::u64, n: ddlog_std::u64, a: ddlog_std::u64}
typedef Alt = C0{x: bit<32>} |
              C1{x: bit<32>}
typedef Arrng1 = Arrng1{f1: ddlog_std::Ref<ddlog_std::Ref<ddlog_std::Ref<TArrng2>>>, f2: bigint}
typedef Arrng1Arrng2 = Arrng1Arrng2{x: bigint}
typedef Arrng1Arrng2_2 = Arrng1Arrng2_2{x: bigint}
typedef Arrng2 = Arrng2{f1: ddlog_std::Ref<TArrng2>, f2: bigint, f3: bool}
typedef BoolVecVec = BoolVecVec{v: ddlog_std::Vec<ddlog_std::Vec<bool>>}
typedef BoolVectors = BoolVectors{v: ddlog_std::Vec<bool>}
typedef Chunk = Chunk{json: string}
typedef ChunkParseError = ChunkParseError{err: string}
typedef CompressedChunk = CompressedChunk{json: string}
typedef Doubles = Doubles{xs: ddlog_std::Vec<double>}
typedef Fib = Fib{x: ddlog_std::u64, f: ddlog_std::u64}
typedef FilteredRelation = FilteredRelation{y: bit<32>}
typedef FuncTest = FuncTest{x: string}
typedef InputInspectNot1 = InputInspectNot1{x: bit<32>, y: bit<32>}
typedef InputInspectNot2 = InputInspectNot2{x: bit<32>}
typedef InputTuples = InputTuples{x: bit<32>, y: bit<32>}
typedef InspectSimpleSum = InspectSimpleSum{x: bit<32>, total: bit<32>}
typedef Ints = Ints{x: bigint}
typedef MapOfMaps = MapOfMaps{m: ddlog_std::Map<string,ddlog_std::Map<double,(ddlog_std::usize, bool)>>}
typedef MapOfVecs = MapOfVecs{m: ddlog_std::Map<(ddlog_std::u32, bigint),ddlog_std::Vec<double>>}
typedef ModifyMe = ModifyMe{x: string, y: ddlog_std::s128}
typedef Nested = Nested{descr: string, n: NestedStruct}
typedef NestedStruct = NestedStruct{x: ddlog_std::Option<ModifyMe>}
typedef Object = Object{field: ddlog_std::u128}
typedef Objects = Objects{chunk: Object}
typedef Opt<'X> = ddlog_std::Option<'X>
typedef OutputInspectNot = OutputInspectNot{x: bit<32>, y: bit<32>}
typedef ParsedChunk = ParsedChunk{data: ddlog_std::Result<Object,string>}
typedef RFloatToInt = RFloatToInt{_x: signed<32>}
typedef RFtoIDummy = RFtoIDummy{x: signed<32>}
typedef Rb = Rb{x: ddlog_std::u32}
typedef Rletter = Rletter{_l: string}
typedef Rque = Rque{x: ddlog_std::u32}
typedef Rseq = Rseq{_s: TSeq}
typedef Rseqs = Rseqs{_s: TSeq}
typedef SResult<'V> = ddlog_std::Result<'V,string>
typedef SomeInts = SomeInts{x: ddlog_std::Option<bigint>}
typedef StringMaps = StringMaps{m: ddlog_std::Map<string,(ddlog_std::usize, bool)>}
typedef Strings = Strings{descr: string, str: string}
typedef SumsOfDoubles = SumsOfDoubles{x: double, y: double, sum: double}
typedef TArrng1 = TArrng1{f1: bool, f2: bigint}
typedef TArrng1Arrng2 = TArrng1Arrng2{x: bigint}
typedef TArrng2 = TArrng2{f1: bool, f2: ddlog_std::Ref<ddlog_std::Ref<TArrng1>>}
typedef TI_R = TI_R{a: ddlog_std::Set<string>}
typedef TSeq = TSeq1{x: (string, ddlog_std::Ref<TSeq>)} |
               TSeqNone{}
typedef TestRelation = TestRelation{x: bit<32>, y: bit<32>}
typedef Try1 = Try1{description: string, result: Opt<(string, string)>}
typedef Try2 = Try2{description: string, result: SResult<(string, string)>}
typedef Try3 = Try3{description: string, result: Opt<(string, string)>}
typedef VecOfMaps = VecOfMaps{m: ddlog_std::Vec<ddlog_std::Map<(ddlog_std::u32, bigint),double>>}
typedef ddlog_std::DDEpoch = ddlog_std::u64
typedef ddlog_std::DDIteration = ddlog_std::u64
typedef ddlog_std::DDNestedTS = ddlog_std::DDNestedTS{epoch: ddlog_std::DDEpoch, iter: ddlog_std::DDIteration}
typedef ddlog_std::DDWeight = ddlog_std::s64
typedef ddlog_std::Either<'A,'B> = ddlog_std::Left{l: 'A} |
                                   ddlog_std::Right{r: 'B}
extern type ddlog_std::Group<'K,'V>
extern type ddlog_std::Map<'K,'V>
#[rust = "serde(from=\"::std::option::Option<A>\", into=\"::std::option::Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
#[custom_from_record = true]
typedef ddlog_std::Option<'A> = ddlog_std::None{} |
                                ddlog_std::Some{x: 'A}
#[size = 8]
#[shared_ref = true]
extern type ddlog_std::Ref<'A>
typedef ddlog_std::Result<'V,'E> = ddlog_std::Ok{res: 'V} |
                                   ddlog_std::Err{err: 'E}
extern type ddlog_std::Set<'A>
extern type ddlog_std::Vec<'A>
typedef ddlog_std::s128 = signed<128>
typedef ddlog_std::s16 = signed<16>
typedef ddlog_std::s32 = signed<32>
typedef ddlog_std::s64 = signed<64>
typedef ddlog_std::s8 = signed<8>
#[alias = true]
typedef ddlog_std::u128 = bit<128>
#[alias = true]
typedef ddlog_std::u16 = bit<16>
#[alias = true]
typedef ddlog_std::u32 = bit<32>
#[alias = true]
typedef ddlog_std::u64 = bit<64>
#[alias = true]
typedef ddlog_std::u8 = bit<8>
#[alias = true]
typedef ddlog_std::usize = bit<64>
typedef debug::DDlogOpId = (ddlog_std::u32, ddlog_std::u32, ddlog_std::u32)
#[size = 8]
#[shared_ref = true]
extern type internment::Intern<'A>
typedef internment::istring = internment::Intern<string>
typedef json::JsonNum = json::JsonInt{i: ddlog_std::s128} |
                        json::JsonFloat{d: double}
typedef json::JsonPtr = ddlog_std::Vec<json::JsonPtrItem>
typedef json::JsonPtrItem = json::JKeyPtr{key: internment::istring} |
                            json::JIdxPtr{idx: ddlog_std::usize}
#[rust = "serde(from = \"ValueWrapper\", into = \"ValueWrapper\")"]
typedef json::JsonValue = json::JsonNull{} |
                          json::JsonBool{b: bool} |
                          json::JsonNumber{n: json::JsonNum} |
                          json::JsonString{s: internment::istring} |
                          json::JsonArray{a: ddlog_std::Vec<json::JsonValue>} |
                          json::JsonObject{o: ddlog_std::Map<internment::istring,json::JsonValue>}
#[custom_serde = true]
typedef json::JsonWrapper<'T> = json::JsonWrapper{x: 'T}
typedef log::log_level_t = signed<32>
typedef log::module_t = signed<32>
function ack (m: ddlog_std::u64, n: ddlog_std::u64): ddlog_std::u64
{
    if (m == 64'd0) {
        (n + 64'd1)
    } else {
          if (n == 64'd0) {
              ack((m - 64'd1), 64'd1)
          } else {
                ack((m - 64'd1), ack(m, (n - 64'd1)))
            }
      }
}
function agg_avg_double_N (aggregate: ddlog_std::Option<(double, double)>, item: ddlog_std::Option<double>): ddlog_std::Option<(double, double)>
{
    match ((aggregate, item)) {
        ((ddlog_std::None{}: ddlog_std::Option<(double, double)>), (ddlog_std::None{}: ddlog_std::Option<double>)) -> (ddlog_std::None{}: ddlog_std::Option<(double, double)>),
        ((ddlog_std::None{}: ddlog_std::Option<(double, double)>), (ddlog_std::Some{.x=(var x: double)}: ddlog_std::Option<double>)) -> (ddlog_std::Some{.x=(x, 64'f1.0)}: ddlog_std::Option<(double, double)>),
        ((ddlog_std::Some{.x=(var x: (double, double))}: ddlog_std::Option<(double, double)>), (ddlog_std::None{}: ddlog_std::Option<double>)) -> (ddlog_std::Some{.x=x}: ddlog_std::Option<(double, double)>),
        ((ddlog_std::Some{.x=((var sum: double), (var ct: double))}: ddlog_std::Option<(double, double)>), (ddlog_std::Some{.x=(var y: double)}: ddlog_std::Option<double>)) -> (ddlog_std::Some{.x=((sum + y), (ct + 64'f1.0))}: ddlog_std::Option<(double, double)>)
    }
}
extern function ddlog_std::__builtin_2string (x: 'X): string
function ddlog_std::__debug_8_1_group_sum (g: ddlog_std::Group<bit<32>,('I, bit<32>)>): (ddlog_std::Vec<'I>, bit<32>)
{
    {((var inputs: ddlog_std::Vec<'I>), (var original_group: ddlog_std::Group<bit<32>,bit<32>>)) = debug::debug_split_group(g);
     (inputs, ddlog_std::group_sum(original_group))}
}
function ddlog_std::append (v: mut ddlog_std::Vec<'X>, other: ddlog_std::Vec<'X>): ()
{
    ddlog_std::vec_append(v, other)
}
extern function ddlog_std::bigint_pow32 (base: bigint, exp: bit<32>): bigint
function ddlog_std::contains (s1: string, s2: string): bool
{
    ddlog_std::string_contains(s1, s2)
}
function ddlog_std::contains (v: ddlog_std::Vec<'X>, x: 'X): bool
{
    ddlog_std::vec_contains(v, x)
}
function ddlog_std::contains (s: ddlog_std::Set<'X>, v: 'X): bool
{
    ddlog_std::set_contains(s, v)
}
function ddlog_std::contains_key (m: ddlog_std::Map<'K,'V>, k: 'K): bool
{
    ddlog_std::map_contains_key(m, k)
}
function ddlog_std::count (g: ddlog_std::Group<'K,'V>): ddlog_std::usize
{
    ddlog_std::group_count(g)
}
extern function ddlog_std::default (): 'T
#[return_by_ref = true]
extern function ddlog_std::deref (x: ddlog_std::Ref<'A>): 'A
function ddlog_std::difference (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_difference(s1, s2): ddlog_std::Set<'X>)
}
function ddlog_std::ends_with (s: string, suffix: string): bool
{
    ddlog_std::string_ends_with(s, suffix)
}
function ddlog_std::first (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_first(g): 'V)
}
function ddlog_std::get (m: ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
{
    (ddlog_std::map_get(m, k): ddlog_std::Option<'V>)
}
extern function ddlog_std::group_count (g: ddlog_std::Group<'K,'V>): ddlog_std::usize
extern function ddlog_std::group_first (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_key (g: ddlog_std::Group<'K,'V>): 'K
extern function ddlog_std::group_max (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_min (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_nth (g: ddlog_std::Group<'K,'V>, n: ddlog_std::usize): ddlog_std::Option<'V>
extern function ddlog_std::group_set_unions (g: ddlog_std::Group<'K,ddlog_std::Set<'A>>): ddlog_std::Set<'A>
extern function ddlog_std::group_setref_unions (g: ddlog_std::Group<'K,ddlog_std::Ref<ddlog_std::Set<'A>>>): ddlog_std::Ref<ddlog_std::Set<'A>>
extern function ddlog_std::group_sum (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_to_map (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,'V>
extern function ddlog_std::group_to_set (g: ddlog_std::Group<'K,'V>): ddlog_std::Set<'V>
extern function ddlog_std::group_to_setmap (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,ddlog_std::Set<'V>>
extern function ddlog_std::group_to_vec (g: ddlog_std::Group<'K,'V>): ddlog_std::Vec<'V>
function ddlog_std::group_unzip (g: ddlog_std::Group<'K,('X, 'Y)>): (ddlog_std::Vec<'X>, ddlog_std::Vec<'Y>)
{
    {(var xs: ddlog_std::Vec<'X>) = (ddlog_std::vec_empty(): ddlog_std::Vec<'X>);
     {(var ys: ddlog_std::Vec<'Y>) = (ddlog_std::vec_empty(): ddlog_std::Vec<'Y>);
      {for (v in g) {
           {((var x: 'X), (var y: 'Y)) = v;
            {ddlog_std::vec_push(xs, x);
             ddlog_std::vec_push(ys, y)}}
       };
       (xs, ys)}}}
}
extern function ddlog_std::hash128 (x: 'X): bit<128>
extern function ddlog_std::hash64 (x: 'X): bit<64>
extern function ddlog_std::hex (x: 'X): string
extern function ddlog_std::htonl (x: bit<32>): bit<32>
extern function ddlog_std::htons (x: bit<16>): bit<16>
function ddlog_std::insert (m: mut ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ()
{
    ddlog_std::map_insert(m, k, v)
}
function ddlog_std::insert (s: mut ddlog_std::Set<'X>, v: 'X): ()
{
    ddlog_std::set_insert(s, v)
}
function ddlog_std::insert_imm (m: ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ddlog_std::Map<'K,'V>
{
    (ddlog_std::map_insert_imm(m, k, v): ddlog_std::Map<'K,'V>)
}
function ddlog_std::insert_imm (s: ddlog_std::Set<'X>, v: 'X): ddlog_std::Set<'X>
{
    (ddlog_std::set_insert_imm(s, v): ddlog_std::Set<'X>)
}
function ddlog_std::intersection (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_intersection(s1, s2): ddlog_std::Set<'X>)
}
function ddlog_std::is_empty (v: ddlog_std::Vec<'X>): bool
{
    ddlog_std::vec_is_empty(v)
}
function ddlog_std::is_empty (m: ddlog_std::Map<'K,'V>): bool
{
    ddlog_std::map_is_empty(m)
}
function ddlog_std::is_empty (s: ddlog_std::Set<'X>): bool
{
    ddlog_std::set_is_empty(s)
}
function ddlog_std::is_err (res: ddlog_std::Result<'V,'E>): bool
{
    match (res) {
        (ddlog_std::Ok{.res=(_: 'V)}: ddlog_std::Result<'V,'E>) -> false,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> true
    }
}
function ddlog_std::is_none (x: ddlog_std::Option<'A>): bool
{
    match (x) {
        (ddlog_std::None{}: ddlog_std::Option<'A>) -> true,
        (_: ddlog_std::Option<'A>) -> false
    }
}
function ddlog_std::is_ok (res: ddlog_std::Result<'V,'E>): bool
{
    match (res) {
        (ddlog_std::Ok{.res=(_: 'V)}: ddlog_std::Result<'V,'E>) -> true,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> false
    }
}
function ddlog_std::is_some (x: ddlog_std::Option<'A>): bool
{
    match (x) {
        (ddlog_std::Some{.x=(_: 'A)}: ddlog_std::Option<'A>) -> true,
        (_: ddlog_std::Option<'A>) -> false
    }
}
function ddlog_std::join (strings: ddlog_std::Vec<string>, sep: string): string
{
    ddlog_std::string_join(strings, sep)
}
function ddlog_std::key (g: ddlog_std::Group<'K,'V>): 'K
{
    (ddlog_std::group_key(g): 'K)
}
function ddlog_std::keys (m: ddlog_std::Map<'K,'V>): ddlog_std::Vec<'K>
{
    (ddlog_std::map_keys(m): ddlog_std::Vec<'K>)
}
function ddlog_std::len (s: string): ddlog_std::usize
{
    ddlog_std::string_len(s)
}
function ddlog_std::len (v: ddlog_std::Vec<'X>): ddlog_std::usize
{
    ddlog_std::vec_len(v)
}
extern function ddlog_std::map_contains_key (m: ddlog_std::Map<'K,'V>, k: 'K): bool
extern function ddlog_std::map_empty (): ddlog_std::Map<'K,'V>
extern function ddlog_std::map_get (m: ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
extern function ddlog_std::map_insert (m: mut ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ()
extern function ddlog_std::map_insert_imm (m: ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ddlog_std::Map<'K,'V>
extern function ddlog_std::map_is_empty (m: ddlog_std::Map<'K,'V>): bool
extern function ddlog_std::map_keys (m: ddlog_std::Map<'K,'V>): ddlog_std::Vec<'K>
extern function ddlog_std::map_remove (m: mut ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
extern function ddlog_std::map_singleton (k: 'K, v: 'V): ddlog_std::Map<'K,'V>
extern function ddlog_std::map_size (m: ddlog_std::Map<'K,'V>): ddlog_std::usize
extern function ddlog_std::map_union (m1: ddlog_std::Map<'K,'V>, m2: ddlog_std::Map<'K,'V>): ddlog_std::Map<'K,'V>
function ddlog_std::max (x: 'A, y: 'A): 'A
{
    if (x > y) {
        x
    } else {
          y
      }
}
function ddlog_std::max (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_max(g): 'V)
}
function ddlog_std::min (x: 'A, y: 'A): 'A
{
    if (x < y) {
        x
    } else {
          y
      }
}
function ddlog_std::min (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_min(g): 'V)
}
function ddlog_std::nth (g: ddlog_std::Group<'K,'V>, n: ddlog_std::usize): ddlog_std::Option<'V>
{
    (ddlog_std::group_nth(g, n): ddlog_std::Option<'V>)
}
function ddlog_std::nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
{
    (ddlog_std::vec_nth(v, n): ddlog_std::Option<'X>)
}
function ddlog_std::nth (s: ddlog_std::Set<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
{
    (ddlog_std::set_nth(s, n): ddlog_std::Option<'X>)
}
extern function ddlog_std::ntohl (x: bit<32>): bit<32>
extern function ddlog_std::ntohs (x: bit<16>): bit<16>
extern function ddlog_std::option_unwrap_or_default (opt: ddlog_std::Option<'A>): 'A
extern function ddlog_std::parse_dec_i64 (s: string): ddlog_std::Option<signed<64>>
extern function ddlog_std::parse_dec_u64 (s: string): ddlog_std::Option<bit<64>>
function ddlog_std::pow32 (base: ddlog_std::u8, exp: bit<32>): ddlog_std::u8
{
    ddlog_std::u8_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u16, exp: bit<32>): ddlog_std::u16
{
    ddlog_std::u16_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u32, exp: bit<32>): ddlog_std::u32
{
    ddlog_std::u32_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u64, exp: bit<32>): ddlog_std::u64
{
    ddlog_std::u64_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u128, exp: bit<32>): ddlog_std::u128
{
    ddlog_std::u128_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s8, exp: bit<32>): ddlog_std::s8
{
    ddlog_std::s8_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s16, exp: bit<32>): ddlog_std::s16
{
    ddlog_std::s16_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s32, exp: bit<32>): ddlog_std::s32
{
    ddlog_std::s32_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s64, exp: bit<32>): ddlog_std::s64
{
    ddlog_std::s64_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s128, exp: bit<32>): ddlog_std::s128
{
    ddlog_std::s128_pow32(base, exp)
}
function ddlog_std::pow32 (base: bigint, exp: bit<32>): bigint
{
    ddlog_std::bigint_pow32(base, exp)
}
function ddlog_std::push (v: mut ddlog_std::Vec<'X>, x: 'X): ()
{
    ddlog_std::vec_push(v, x)
}
function ddlog_std::push_imm (v: ddlog_std::Vec<'X>, x: 'X): ddlog_std::Vec<'X>
{
    (ddlog_std::vec_push_imm(v, x): ddlog_std::Vec<'X>)
}
extern function ddlog_std::range (from: 'A, to: 'A, step: 'A): ddlog_std::Vec<'A>
extern function ddlog_std::ref_new (x: 'A): ddlog_std::Ref<'A>
function ddlog_std::remove (m: mut ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
{
    (ddlog_std::map_remove(m, k): ddlog_std::Option<'V>)
}
function ddlog_std::replace (s: string, from: string, to: string): string
{
    ddlog_std::string_replace(s, from, to)
}
function ddlog_std::resize (v: mut ddlog_std::Vec<'X>, new_len: ddlog_std::usize, value: 'X): ()
{
    ddlog_std::vec_resize(v, new_len, value)
}
extern function ddlog_std::result_unwrap_or_default (res: ddlog_std::Result<'V,'E>): 'V
function ddlog_std::reverse (s: string): string
{
    ddlog_std::string_reverse(s)
}
extern function ddlog_std::s128_pow32 (base: ddlog_std::s128, exp: bit<32>): ddlog_std::s128
extern function ddlog_std::s16_pow32 (base: ddlog_std::s16, exp: bit<32>): ddlog_std::s16
extern function ddlog_std::s32_pow32 (base: ddlog_std::s32, exp: bit<32>): ddlog_std::s32
extern function ddlog_std::s64_pow32 (base: ddlog_std::s64, exp: bit<32>): ddlog_std::s64
extern function ddlog_std::s8_pow32 (base: ddlog_std::s8, exp: bit<32>): ddlog_std::s8
extern function ddlog_std::set_contains (s: ddlog_std::Set<'X>, v: 'X): bool
extern function ddlog_std::set_difference (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_empty (): ddlog_std::Set<'X>
extern function ddlog_std::set_insert (s: mut ddlog_std::Set<'X>, v: 'X): ()
extern function ddlog_std::set_insert_imm (s: ddlog_std::Set<'X>, v: 'X): ddlog_std::Set<'X>
extern function ddlog_std::set_intersection (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_is_empty (s: ddlog_std::Set<'X>): bool
extern function ddlog_std::set_nth (s: ddlog_std::Set<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
extern function ddlog_std::set_singleton (x: 'X): ddlog_std::Set<'X>
extern function ddlog_std::set_size (s: ddlog_std::Set<'X>): ddlog_std::usize
extern function ddlog_std::set_to_vec (s: ddlog_std::Set<'A>): ddlog_std::Vec<'A>
extern function ddlog_std::set_union (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_unions (sets: ddlog_std::Vec<ddlog_std::Set<'X>>): ddlog_std::Set<'X>
function ddlog_std::setref_unions (g: ddlog_std::Group<'K,ddlog_std::Ref<ddlog_std::Set<'A>>>): ddlog_std::Ref<ddlog_std::Set<'A>>
{
    (ddlog_std::group_setref_unions(g): ddlog_std::Ref<ddlog_std::Set<'A>>)
}
function ddlog_std::size (m: ddlog_std::Map<'K,'V>): ddlog_std::usize
{
    ddlog_std::map_size(m)
}
function ddlog_std::size (s: ddlog_std::Set<'X>): ddlog_std::usize
{
    ddlog_std::set_size(s)
}
function ddlog_std::sort (v: mut ddlog_std::Vec<'X>): ()
{
    ddlog_std::vec_sort(v)
}
function ddlog_std::sort_imm (v: ddlog_std::Vec<'X>): ddlog_std::Vec<'X>
{
    (ddlog_std::vec_sort_imm(v): ddlog_std::Vec<'X>)
}
function ddlog_std::split (s: string, sep: string): ddlog_std::Vec<string>
{
    ddlog_std::string_split(s, sep)
}
function ddlog_std::starts_with (s: string, prefix: string): bool
{
    ddlog_std::string_starts_with(s, prefix)
}
extern function ddlog_std::str_to_lower (s: string): string
extern function ddlog_std::string_contains (s1: string, s2: string): bool
extern function ddlog_std::string_ends_with (s: string, suffix: string): bool
extern function ddlog_std::string_join (strings: ddlog_std::Vec<string>, sep: string): string
extern function ddlog_std::string_len (s: string): ddlog_std::usize
extern function ddlog_std::string_replace (s: string, from: string, to: string): string
extern function ddlog_std::string_reverse (s: string): string
extern function ddlog_std::string_split (s: string, sep: string): ddlog_std::Vec<string>
extern function ddlog_std::string_starts_with (s: string, prefix: string): bool
extern function ddlog_std::string_substr (s: string, start: ddlog_std::usize, end: ddlog_std::usize): string
extern function ddlog_std::string_to_bytes (s: string): ddlog_std::Vec<ddlog_std::u8>
extern function ddlog_std::string_to_lowercase (s: string): string
extern function ddlog_std::string_to_uppercase (s: string): string
extern function ddlog_std::string_trim (s: string): string
function ddlog_std::substr (s: string, start: ddlog_std::usize, end: ddlog_std::usize): string
{
    ddlog_std::string_substr(s, start, end)
}
function ddlog_std::swap_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: mut 'X): bool
{
    ddlog_std::vec_swap_nth(v, idx, value)
}
function ddlog_std::to_bytes (s: string): ddlog_std::Vec<ddlog_std::u8>
{
    ddlog_std::string_to_bytes(s)
}
function ddlog_std::to_lowercase (s: string): string
{
    ddlog_std::string_to_lowercase(s)
}
function ddlog_std::to_map (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,'V>
{
    (ddlog_std::group_to_map(g): ddlog_std::Map<'K2,'V>)
}
function ddlog_std::to_set (o: ddlog_std::Option<'X>): ddlog_std::Set<'X>
{
    match (o) {
        (ddlog_std::Some{.x=(var x: 'X)}: ddlog_std::Option<'X>) -> (ddlog_std::set_singleton(x): ddlog_std::Set<'X>),
        (ddlog_std::None{}: ddlog_std::Option<'X>) -> (ddlog_std::set_empty(): ddlog_std::Set<'X>)
    }
}
function ddlog_std::to_set (g: ddlog_std::Group<'K,'V>): ddlog_std::Set<'V>
{
    (ddlog_std::group_to_set(g): ddlog_std::Set<'V>)
}
function ddlog_std::to_set (s: ddlog_std::Vec<'A>): ddlog_std::Set<'A>
{
    (ddlog_std::vec_to_set(s): ddlog_std::Set<'A>)
}
function ddlog_std::to_setmap (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,ddlog_std::Set<'V>>
{
    (ddlog_std::group_to_setmap(g): ddlog_std::Map<'K2,ddlog_std::Set<'V>>)
}
function ddlog_std::to_string (ts: ddlog_std::DDNestedTS): string
{
    (((("(" ++ (ddlog_std::__builtin_2string(ts.epoch): string)) ++ ",") ++ (ddlog_std::__builtin_2string(ts.iter): string)) ++ ")")
}
function ddlog_std::to_string (x: bool): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: bigint): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: float): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: double): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::s8): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::s16): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::s32): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::s64): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::s128): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::u8): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::u16): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::u32): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::u64): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: ddlog_std::u128): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_string (x: string): string
{
    ddlog_std::__builtin_2string(x)
}
function ddlog_std::to_uppercase (s: string): string
{
    ddlog_std::string_to_uppercase(s)
}
function ddlog_std::to_vec (o: ddlog_std::Option<'X>): ddlog_std::Vec<'X>
{
    match (o) {
        (ddlog_std::Some{.x=(var x: 'X)}: ddlog_std::Option<'X>) -> (ddlog_std::vec_singleton(x): ddlog_std::Vec<'X>),
        (ddlog_std::None{}: ddlog_std::Option<'X>) -> (ddlog_std::vec_empty(): ddlog_std::Vec<'X>)
    }
}
function ddlog_std::to_vec (g: ddlog_std::Group<'K,'V>): ddlog_std::Vec<'V>
{
    (ddlog_std::group_to_vec(g): ddlog_std::Vec<'V>)
}
function ddlog_std::to_vec (s: ddlog_std::Set<'A>): ddlog_std::Vec<'A>
{
    (ddlog_std::set_to_vec(s): ddlog_std::Vec<'A>)
}
function ddlog_std::trim (s: string): string
{
    ddlog_std::string_trim(s)
}
extern function ddlog_std::u128_pow32 (base: ddlog_std::u128, exp: bit<32>): ddlog_std::u128
extern function ddlog_std::u16_pow32 (base: ddlog_std::u16, exp: bit<32>): ddlog_std::u16
extern function ddlog_std::u32_pow32 (base: ddlog_std::u32, exp: bit<32>): ddlog_std::u32
extern function ddlog_std::u64_pow32 (base: ddlog_std::u64, exp: bit<32>): ddlog_std::u64
extern function ddlog_std::u8_pow32 (base: ddlog_std::u8, exp: bit<32>): ddlog_std::u8
function ddlog_std::union (m1: ddlog_std::Map<'K,'V>, m2: ddlog_std::Map<'K,'V>): ddlog_std::Map<'K,'V>
{
    (ddlog_std::map_union(m1, m2): ddlog_std::Map<'K,'V>)
}
function ddlog_std::union (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_union(s1, s2): ddlog_std::Set<'X>)
}
function ddlog_std::unions (sets: ddlog_std::Vec<ddlog_std::Set<'X>>): ddlog_std::Set<'X>
{
    (ddlog_std::set_unions(sets): ddlog_std::Set<'X>)
}
function ddlog_std::unwrap_or (x: ddlog_std::Option<'A>, def: 'A): 'A
{
    match (x) {
        (ddlog_std::Some{.x=(var v: 'A)}: ddlog_std::Option<'A>) -> v,
        (ddlog_std::None{}: ddlog_std::Option<'A>) -> def
    }
}
function ddlog_std::unwrap_or (res: ddlog_std::Result<'V,'E>, def: 'V): 'V
{
    match (res) {
        (ddlog_std::Ok{.res=(var v: 'V)}: ddlog_std::Result<'V,'E>) -> v,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> def
    }
}
function ddlog_std::unwrap_or_default (opt: ddlog_std::Option<'A>): 'A
{
    (ddlog_std::option_unwrap_or_default(opt): 'A)
}
function ddlog_std::unwrap_or_default (res: ddlog_std::Result<'V,'E>): 'V
{
    (ddlog_std::result_unwrap_or_default(res): 'V)
}
function ddlog_std::update_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: 'X): bool
{
    ddlog_std::vec_update_nth(v, idx, value)
}
extern function ddlog_std::vec_append (v: mut ddlog_std::Vec<'X>, other: ddlog_std::Vec<'X>): ()
extern function ddlog_std::vec_contains (v: ddlog_std::Vec<'X>, x: 'X): bool
extern function ddlog_std::vec_empty (): ddlog_std::Vec<'A>
extern function ddlog_std::vec_is_empty (v: ddlog_std::Vec<'X>): bool
extern function ddlog_std::vec_len (v: ddlog_std::Vec<'X>): ddlog_std::usize
extern function ddlog_std::vec_nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
extern function ddlog_std::vec_push (v: mut ddlog_std::Vec<'X>, x: 'X): ()
extern function ddlog_std::vec_push_imm (v: ddlog_std::Vec<'X>, x: 'X): ddlog_std::Vec<'X>
extern function ddlog_std::vec_resize (v: mut ddlog_std::Vec<'X>, new_len: ddlog_std::usize, value: 'X): ()
extern function ddlog_std::vec_set_nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize, value: 'X): ()
extern function ddlog_std::vec_singleton (x: 'X): ddlog_std::Vec<'X>
extern function ddlog_std::vec_sort (v: mut ddlog_std::Vec<'X>): ()
extern function ddlog_std::vec_sort_imm (v: ddlog_std::Vec<'X>): ddlog_std::Vec<'X>
extern function ddlog_std::vec_swap_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: mut 'X): bool
extern function ddlog_std::vec_to_set (s: ddlog_std::Vec<'A>): ddlog_std::Set<'A>
extern function ddlog_std::vec_update_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: 'X): bool
extern function ddlog_std::vec_with_capacity (len: ddlog_std::usize): ddlog_std::Vec<'A>
extern function ddlog_std::vec_with_length (len: ddlog_std::usize, x: 'A): ddlog_std::Vec<'A>
extern function debug::debug_event (operator_id: debug::DDlogOpId, w: ddlog_std::DDWeight, ts: 'T1, operator_type: string, input1: 'A1, out: 'A2): ()
extern function debug::debug_event_join (operator_id: debug::DDlogOpId, w: ddlog_std::DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()
extern function debug::debug_split_group (g: ddlog_std::Group<'K,('I, 'V)>): (ddlog_std::Vec<'I>, ddlog_std::Group<'K,'V>)
function do_nothing (): ()
{
    ()
}
function fib (x: ddlog_std::u64): ddlog_std::u64
{
    if (x == 64'd0) {
        64'd0
    } else {
          if (x == 64'd1) {
              64'd1
          } else {
                (fib((x - 64'd1)) + fib((x - 64'd2)))
            }
      }
}
extern function fp::abs_d (f: double): double
extern function fp::abs_f (f: float): float
extern function fp::acos_d (f: double): double
extern function fp::acos_f (f: float): float
extern function fp::acosh_d (f: double): double
extern function fp::acosh_f (f: float): float
extern function fp::asin_d (f: double): double
extern function fp::asin_f (f: float): float
extern function fp::asinh_d (f: double): double
extern function fp::asinh_f (f: float): float
extern function fp::atan2_d (f: double, other: double): double
extern function fp::atan2_f (f: float, other: float): float
extern function fp::atan_d (f: double): double
extern function fp::atan_f (f: float): float
extern function fp::atanh_d (f: double): double
extern function fp::atanh_f (f: float): float
extern function fp::cbrt_d (f: double): double
extern function fp::cbrt_f (f: float): float
extern function fp::ceil_d (f: double): double
extern function fp::ceil_f (f: float): float
extern function fp::cos_d (f: double): double
extern function fp::cos_f (f: float): float
extern function fp::cosh_d (f: double): double
extern function fp::cosh_f (f: float): float
extern function fp::exp2_d (f: double): double
extern function fp::exp2_f (f: float): float
extern function fp::exp_d (f: double): double
extern function fp::exp_f (f: float): float
extern function fp::floor_d (f: double): double
extern function fp::floor_f (f: float): float
extern function fp::fract_d (f: double): double
extern function fp::fract_f (f: float): float
extern function fp::int_from_d (d: double): ddlog_std::Option<bigint>
extern function fp::int_from_f (f: float): ddlog_std::Option<bigint>
extern function fp::is_finite_d (f: double): bool
extern function fp::is_finite_f (f: float): bool
extern function fp::is_infinite_d (f: double): bool
extern function fp::is_infinite_f (f: float): bool
extern function fp::is_nan_d (f: double): bool
extern function fp::is_nan_f (f: float): bool
extern function fp::ln_d (f: double): double
extern function fp::ln_f (f: float): float
extern function fp::log10_d (f: double): double
extern function fp::log10_f (f: float): float
extern function fp::log2_d (f: double): double
extern function fp::log2_f (f: float): float
extern function fp::log_d (f: double, base: double): double
extern function fp::log_f (f: float, base: float): float
extern function fp::mul_add_d (a: double, b: double, c: double): double
extern function fp::mul_add_f (a: float, b: float, c: float): float
extern function fp::nan_d (): double
extern function fp::nan_f (): float
extern function fp::parse_d (s: string): ddlog_std::Result<double,string>
extern function fp::parse_f (s: string): ddlog_std::Result<float,string>
extern function fp::powf_d (f: double, exp: double): double
extern function fp::powf_f (f: float, exp: float): float
extern function fp::powi_d (f: double, exp: signed<32>): double
extern function fp::powi_f (f: float, exp: signed<32>): float
extern function fp::recip_d (f: double): double
extern function fp::recip_f (f: float): float
extern function fp::round_d (f: double): double
extern function fp::round_f (f: float): float
extern function fp::signum_d (f: double): double
extern function fp::signum_f (f: float): float
extern function fp::sin_d (f: double): double
extern function fp::sin_f (f: float): float
extern function fp::sinh_d (f: double): double
extern function fp::sinh_f (f: float): float
extern function fp::sqrt_d (f: double): double
extern function fp::sqrt_f (f: float): float
extern function fp::tan_d (f: double): double
extern function fp::tan_f (f: float): float
extern function fp::tanh_d (f: double): double
extern function fp::tanh_f (f: float): float
extern function fp::to_degrees_d (f: double): double
extern function fp::to_degrees_f (f: float): float
extern function fp::to_radians_d (f: double): double
extern function fp::to_radians_f (f: float): float
extern function fp::trunc_d (f: double): double
extern function fp::trunc_f (f: float): float
function ftoi_ (l: double): signed<32>
{
    match (fp::int_from_d(l)) {
        (ddlog_std::None{}: ddlog_std::Option<bigint>) -> 32'sd0,
        (ddlog_std::Some{.x=(var x: bigint)}: ddlog_std::Option<bigint>) -> (x as signed<32>)
    }
}
#[has_side_effects = true]
extern function inspect_log::log (filename: string, msg: string): ()
function internment::contains (s1: internment::istring, s2: string): bool
{
    internment::istring_contains(s1, s2)
}
function internment::ends_with (s: internment::istring, suffix: string): bool
{
    internment::istring_ends_with(s, suffix)
}
extern function internment::intern (s: 'A): internment::Intern<'A>
extern function internment::istring_contains (s1: internment::istring, s2: string): bool
extern function internment::istring_ends_with (s: internment::istring, suffix: string): bool
extern function internment::istring_join (strings: ddlog_std::Vec<internment::istring>, sep: string): string
extern function internment::istring_len (s: internment::istring): ddlog_std::usize
extern function internment::istring_replace (s: internment::istring, from: string, to: string): string
extern function internment::istring_reverse (s: internment::istring): string
extern function internment::istring_split (s: internment::istring, sep: string): ddlog_std::Vec<string>
extern function internment::istring_starts_with (s: internment::istring, prefix: string): bool
extern function internment::istring_substr (s: internment::istring, start: ddlog_std::usize, end: ddlog_std::usize): string
extern function internment::istring_to_bytes (s: internment::istring): ddlog_std::Vec<ddlog_std::u8>
extern function internment::istring_to_lowercase (s: internment::istring): string
extern function internment::istring_to_uppercase (s: internment::istring): string
extern function internment::istring_trim (s: internment::istring): string
#[return_by_ref = true]
extern function internment::ival (s: internment::Intern<'A>): 'A
function internment::join (strings: ddlog_std::Vec<internment::istring>, sep: string): string
{
    internment::istring_join(strings, sep)
}
function internment::len (s: internment::istring): ddlog_std::usize
{
    internment::istring_len(s)
}
function internment::replace (s: internment::istring, from: string, to: string): string
{
    internment::istring_replace(s, from, to)
}
function internment::reverse (s: internment::istring): string
{
    internment::istring_reverse(s)
}
function internment::split (s: internment::istring, sep: string): ddlog_std::Vec<string>
{
    internment::istring_split(s, sep)
}
function internment::starts_with (s: internment::istring, prefix: string): bool
{
    internment::istring_starts_with(s, prefix)
}
function internment::substr (s: internment::istring, start: ddlog_std::usize, end: ddlog_std::usize): string
{
    internment::istring_substr(s, start, end)
}
function internment::to_bytes (s: internment::istring): ddlog_std::Vec<ddlog_std::u8>
{
    internment::istring_to_bytes(s)
}
function internment::to_lowercase (s: internment::istring): string
{
    internment::istring_to_lowercase(s)
}
function internment::to_string (s: internment::istring): string
{
    (internment::ival(s): string)
}
function internment::to_uppercase (s: internment::istring): string
{
    internment::istring_to_uppercase(s)
}
function internment::trim (s: internment::istring): string
{
    internment::istring_trim(s)
}
extern function json::from_json_string (json: string): ddlog_std::Result<'T,string>
extern function json::from_json_value (json_val: json::JsonValue): ddlog_std::Result<'T,string>
function json::get_by_ptr (jval: json::JsonValue, ptr: json::JsonPtr): ddlog_std::Option<json::JsonValue>
{
    json::get_by_ptr_(jval, ptr, 64'd0)
}
function json::get_by_ptr_ (jval: json::JsonValue, ptr: json::JsonPtr, idx: ddlog_std::usize): ddlog_std::Option<json::JsonValue>
{
    match ((ddlog_std::nth(ptr, idx): ddlog_std::Option<json::JsonPtrItem>)) {
        (ddlog_std::None{}: ddlog_std::Option<json::JsonPtrItem>) -> (ddlog_std::Some{.x=jval}: ddlog_std::Option<json::JsonValue>),
        (ddlog_std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> json::get_by_ptr_(match (json::jval_get(jval, key)) {
                                                                                                                                                                            (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>) -> ((return (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                            (ddlog_std::Some{.x=(var __x: json::JsonValue)}: ddlog_std::Option<json::JsonValue>) -> __x
                                                                                                                                                                        }, ptr, (idx + 64'd1)),
        (ddlog_std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> match (jval) {
                                                                                                                                     (json::JsonArray{.a=(var vals: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> json::get_by_ptr_(match ((ddlog_std::nth(vals, n): ddlog_std::Option<json::JsonValue>)) {
                                                                                                                                                                                                                                                 (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>) -> ((return (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                                                                                                 (ddlog_std::Some{.x=(var __x: json::JsonValue)}: ddlog_std::Option<json::JsonValue>) -> __x
                                                                                                                                                                                                                                             }, ptr, (idx + 64'd1)),
                                                                                                                                     (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)
                                                                                                                                 }
    }
}
function json::jval_as_array (v: json::JsonValue): ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>
{
    match (v) {
        (json::JsonArray{.a=(var a: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> (ddlog_std::Some{.x=a}: ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>)
    }
}
function json::jval_as_array_or (v: json::JsonValue, def: ddlog_std::Vec<json::JsonValue>): ddlog_std::Vec<json::JsonValue>
{
    match (v) {
        (json::JsonArray{.a=(var a: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> a,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_bool (v: json::JsonValue): ddlog_std::Option<bool>
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> (ddlog_std::Some{.x=b}: ddlog_std::Option<bool>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<bool>)
    }
}
function json::jval_as_bool_or (v: json::JsonValue, def: bool): bool
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> b,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_number (v: json::JsonValue): ddlog_std::Option<json::JsonNum>
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> (ddlog_std::Some{.x=n}: ddlog_std::Option<json::JsonNum>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonNum>)
    }
}
function json::jval_as_number_or (v: json::JsonValue, def: json::JsonNum): json::JsonNum
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> n,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_object (v: json::JsonValue): ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::Some{.x=o}: ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>)
    }
}
function json::jval_as_object_or (v: json::JsonValue, def: ddlog_std::Map<internment::istring,json::JsonValue>): ddlog_std::Map<internment::istring,json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> o,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_string (v: json::JsonValue): ddlog_std::Option<internment::istring>
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> (ddlog_std::Some{.x=s}: ddlog_std::Option<internment::Intern<string>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<internment::Intern<string>>)
    }
}
function json::jval_as_string_or (v: json::JsonValue, def: internment::istring): internment::istring
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> s,
        (_: json::JsonValue) -> def
    }
}
function json::jval_get (v: json::JsonValue, attr: internment::istring): ddlog_std::Option<json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::map_get(o, attr): ddlog_std::Option<json::JsonValue>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)
    }
}
function json::jval_get_or (v: json::JsonValue, attr: internment::istring, def: json::JsonValue): json::JsonValue
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::unwrap_or((ddlog_std::map_get(o, attr): ddlog_std::Option<json::JsonValue>), def): json::JsonValue),
        (_: json::JsonValue) -> def
    }
}
function json::set_by_ptr (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue): ddlog_std::Result<(),string>
{
    json::set_by_ptr_(jval, ptr, v, 64'd0)
}
function json::set_by_ptr_ (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue, idx: ddlog_std::usize): ddlog_std::Result<(),string>
{
    match ((ddlog_std::nth(ptr, idx): ddlog_std::Option<json::JsonPtrItem>)) {
        (ddlog_std::None{}: ddlog_std::Option<json::JsonPtrItem>) -> {jval = v;
                                                                      (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)},
        (ddlog_std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> {if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                                                           jval = (json::JsonObject{.o=(ddlog_std::map_empty(): ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue)
                                                                                                                                                       } else {
                                                                                                                                                             ()
                                                                                                                                                         };
                                                                                                                                                       match (jval) {
                                                                                                                                                           (json::JsonObject{.o=(var m: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> {(var old: json::JsonValue) = (ddlog_std::unwrap_or((ddlog_std::remove(m, key): ddlog_std::Option<json::JsonValue>), (json::JsonNull{}: json::JsonValue)): json::JsonValue);
                                                                                                                                                                                                                                                                    {json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                                                                                     {ddlog_std::insert(m, key, old);
                                                                                                                                                                                                                                                                      (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)}}},
                                                                                                                                                           (_: json::JsonValue) -> (ddlog_std::Err{.err="Not a JSON map"}: ddlog_std::Result<(),string>)
                                                                                                                                                       }},
        (ddlog_std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> {if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                                      jval = (json::JsonArray{.a=(ddlog_std::vec_empty(): ddlog_std::Vec<json::JsonValue>)}: json::JsonValue)
                                                                                                                                  } else {
                                                                                                                                        ()
                                                                                                                                    };
                                                                                                                                  match (jval) {
                                                                                                                                      (json::JsonArray{.a=(var xs: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> {ddlog_std::resize(xs, (ddlog_std::max((n + 64'd1), ddlog_std::len(xs)): bit<64>), (json::JsonNull{}: json::JsonValue));
                                                                                                                                                                                                                           {(var old: json::JsonValue) = (json::JsonNull{}: json::JsonValue);
                                                                                                                                                                                                                            {ddlog_std::swap_nth(xs, n, old);
                                                                                                                                                                                                                             {json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                                              {ddlog_std::swap_nth(xs, n, old);
                                                                                                                                                                                                                               (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)}}}}},
                                                                                                                                      (_: json::JsonValue) -> (ddlog_std::Err{.err="Not a JSON array"}: ddlog_std::Result<(),string>)
                                                                                                                                  }}
    }
}
extern function json::to_json_string (x: 'T): ddlog_std::Result<string,string>
extern function json::to_json_value (x: 'T): ddlog_std::Result<json::JsonValue,string>
#[has_side_effects = true]
extern function log::log (module: log::module_t, level: log::log_level_t, msg: string): ()
function mutable_match (): ()
{
    {(var m: ModifyMe) = (ModifyMe{.x="foo", .y=128'sd123456789}: ModifyMe);
     match (m) {
         (ModifyMe{.x=(var x: string), .y=128'sd123456789}: ModifyMe) -> x = "bar",
         (_: ModifyMe) -> ()
     }}
}
function mutable_match_field (n: mut NestedStruct): ()
{
    match (n.x) {
        (ddlog_std::Some{.x=(ModifyMe{.x=(var x: string), .y=128'sd123456789}: ModifyMe)}: ddlog_std::Option<ModifyMe>) -> x = "bar",
        (ddlog_std::Some{.x=(var m: ModifyMe)}: ddlog_std::Option<ModifyMe>) -> m.x = "bar",
        (var x: ddlog_std::Option<ModifyMe>) -> x = (ddlog_std::Some{.x=(ModifyMe{.x="buzz", .y=128'sd0}: ModifyMe)}: ddlog_std::Option<ModifyMe>)
    }
}
function myfunc (x: string): string
{
    x
}
function shadow (v: string): ()
{
    {(var a: Alt) = (C0{.x=32'd1}: Alt);
     (var i: bit<32>) = match (a) {
                            (C0{.x=(var v: bit<32>)}: Alt) -> v,
                            (C1{.x=(var v: bit<32>)}: Alt) -> v
                        }}
}
function shadow2 (): ()
{
    {(var v: string) = "bar";
     (var v: string) = "foo"}
}
function ti_f (value: ddlog_std::Option<string>): ddlog_std::Option<(string, string)>
{
    {(var strs: ddlog_std::Vec<string>) = match (value) {
                                              (ddlog_std::Some{.x=(var s: string)}: ddlog_std::Option<string>) -> ddlog_std::string_split(s, ":"),
                                              (ddlog_std::None{}: ddlog_std::Option<string>) -> ((return (ddlog_std::None{}: ddlog_std::Option<(string, string)>)): ddlog_std::Vec<string>)
                                          };
     match (((ddlog_std::vec_nth(strs, 64'd0): ddlog_std::Option<string>), (ddlog_std::vec_nth(strs, 64'd1): ddlog_std::Option<string>))) {
         ((ddlog_std::Some{.x=(var port_name: string)}: ddlog_std::Option<string>), (ddlog_std::Some{.x=(var src_ip: string)}: ddlog_std::Option<string>)) -> (ddlog_std::Some{.x=(port_name, src_ip)}: ddlog_std::Option<(string, string)>),
         (_: (ddlog_std::Option<string>, ddlog_std::Option<string>)) -> (ddlog_std::None{}: ddlog_std::Option<(string, string)>)
     }}
}
function try1 (name: string): ddlog_std::Option<(string, string)>
{
    {(var components: ddlog_std::Vec<string>) = ddlog_std::split(name, " ");
     {(var first_name: string) = match ((ddlog_std::nth(components, 64'd0): ddlog_std::Option<string>)) {
                                     (ddlog_std::None{}: ddlog_std::Option<string>) -> ((return (ddlog_std::None{}: ddlog_std::Option<(string, string)>)): string),
                                     (ddlog_std::Some{.x=(var __x: string)}: ddlog_std::Option<string>) -> __x
                                 };
      {(var last_name: string) = match ((ddlog_std::nth(components, 64'd1): ddlog_std::Option<string>)) {
                                     (ddlog_std::None{}: ddlog_std::Option<string>) -> ((return (ddlog_std::None{}: ddlog_std::Option<(string, string)>)): string),
                                     (ddlog_std::Some{.x=(var __x: string)}: ddlog_std::Option<string>) -> __x
                                 };
       (ddlog_std::Some{.x=(first_name, last_name)}: ddlog_std::Option<(string, string)>)}}}
}
function try2 (name: string): ddlog_std::Result<(string, string),string>
{
    {(var components: ddlog_std::Vec<string>) = ddlog_std::split(name, " ");
     {(var first_name: string) = match (match ((ddlog_std::nth(components, 64'd0): ddlog_std::Option<string>)) {
                                            (ddlog_std::None{}: ddlog_std::Option<string>) -> (ddlog_std::Err{.err="No first name"}: ddlog_std::Result<string,string>),
                                            (ddlog_std::Some{.x=(var n: string)}: ddlog_std::Option<string>) -> (ddlog_std::Ok{.res=n}: ddlog_std::Result<string,string>)
                                        }) {
                                     (ddlog_std::Err{.err=(var __e: string)}: ddlog_std::Result<string,string>) -> ((return (ddlog_std::Err{.err=__e}: ddlog_std::Result<(string, string),string>)): string),
                                     (ddlog_std::Ok{.res=(var __x: string)}: ddlog_std::Result<string,string>) -> __x
                                 };
      {(var last_name: string) = match (match ((ddlog_std::nth(components, 64'd1): ddlog_std::Option<string>)) {
                                            (ddlog_std::None{}: ddlog_std::Option<string>) -> (ddlog_std::Err{.err="No last name"}: ddlog_std::Result<string,string>),
                                            (ddlog_std::Some{.x=(var n: string)}: ddlog_std::Option<string>) -> (ddlog_std::Ok{.res=n}: ddlog_std::Result<string,string>)
                                        }) {
                                     (ddlog_std::Err{.err=(var __e: string)}: ddlog_std::Result<string,string>) -> ((return (ddlog_std::Err{.err=__e}: ddlog_std::Result<(string, string),string>)): string),
                                     (ddlog_std::Ok{.res=(var __x: string)}: ddlog_std::Result<string,string>) -> __x
                                 };
       (ddlog_std::Ok{.res=(first_name, last_name)}: ddlog_std::Result<(string, string),string>)}}}
}
function try3 (name: string): Opt<(string, string)>
{
    {(var components: ddlog_std::Vec<string>) = ddlog_std::split(name, " ");
     {(var first_name: string) = match (match ((ddlog_std::nth(components, 64'd0): ddlog_std::Option<string>)) {
                                            (ddlog_std::None{}: ddlog_std::Option<string>) -> (ddlog_std::Err{.err="No first name"}: ddlog_std::Result<string,string>),
                                            (ddlog_std::Some{.x=(var n: string)}: ddlog_std::Option<string>) -> (ddlog_std::Ok{.res=n}: ddlog_std::Result<string,string>)
                                        }) {
                                     (ddlog_std::Err{.err=(_: string)}: ddlog_std::Result<string,string>) -> ((return (ddlog_std::None{}: Opt<(string, string)>)): string),
                                     (ddlog_std::Ok{.res=(var __x: string)}: ddlog_std::Result<string,string>) -> __x
                                 };
      {(var last_name: string) = match (match ((ddlog_std::nth(components, 64'd1): ddlog_std::Option<string>)) {
                                            (ddlog_std::None{}: ddlog_std::Option<string>) -> (ddlog_std::Err{.err="No last name"}: ddlog_std::Result<string,string>),
                                            (ddlog_std::Some{.x=(var n: string)}: ddlog_std::Option<string>) -> (ddlog_std::Ok{.res=n}: ddlog_std::Result<string,string>)
                                        }) {
                                     (ddlog_std::Err{.err=(_: string)}: ddlog_std::Result<string,string>) -> ((return (ddlog_std::None{}: Opt<(string, string)>)): string),
                                     (ddlog_std::Ok{.res=(var __x: string)}: ddlog_std::Result<string,string>) -> __x
                                 };
       (ddlog_std::Some{.x=(first_name, last_name)}: ddlog_std::Option<(string, string)>)}}}
}
function weird_zero (x: 'A): ddlog_std::usize
{
    {(var empty_vec: ddlog_std::Vec<'A>) = (ddlog_std::vec_empty(): ddlog_std::Vec<'A>);
     ddlog_std::vec_len(empty_vec)}
}
function write_to_struct_field (): ModifyMe
{
    {(var m: ModifyMe) = (ModifyMe{.x="foo", .y=128'sd123456789}: ModifyMe);
     {m.x = "bar";
      {m.y = (- m.y);
       m}}}
}
function write_to_tuple_field (): (string, ddlog_std::u64)
{
    {(var m: (string, bit<64>)) = ("foo", 64'd123456789);
     {m.0 = "bar";
      {m.1 = (- m.1);
       m}}}
}
function zero_test (): ddlog_std::usize
{
    weird_zero(32'd0)
}
output relation Ack [Ack]
input relation Arrng1 [Arrng1]
output relation Arrng1Arrng2 [Arrng1Arrng2]
output relation Arrng1Arrng2_2 [Arrng1Arrng2_2]
input relation Arrng2 [Arrng2]
output relation BoolVecVec [BoolVecVec]
output relation BoolVectors [BoolVectors]
input multiset Chunk [Chunk]
output multiset ChunkParseError [ChunkParseError]
output multiset CompressedChunk [CompressedChunk]
input relation Doubles [Doubles]
output relation Fib [Fib]
output relation FilteredRelation [FilteredRelation]
output relation FuncTest [ddlog_std::Ref<FuncTest>]
input relation InputInspectNot1 [InputInspectNot1]
input relation InputInspectNot2 [InputInspectNot2]
input relation InputTuples [InputTuples]
output relation InspectSimpleSum [InspectSimpleSum]
input relation Ints [Ints]
output relation MapOfMaps [MapOfMaps]
output relation MapOfVecs [MapOfVecs]
output relation Nested [Nested]
relation Objects [Objects]
output relation OutputInspectNot [OutputInspectNot]
relation ParsedChunk [ParsedChunk]
output relation RFloatToInt [RFloatToInt]
relation RFtoIDummy [RFtoIDummy]
relation Rb [Rb]
input relation Rletter [Rletter]
output relation Rque [Rque]
output relation Rseq [Rseq]
input relation Rseqs [Rseqs]
output relation SomeInts [SomeInts]
output relation StringMaps [StringMaps]
output relation Strings [Strings]
output relation SumsOfDoubles [SumsOfDoubles]
input relation TArrng1 [(ddlog_std::Ref<ddlog_std::Ref<ddlog_std::Ref<TArrng2>>>, bigint)]
output relation TArrng1Arrng2 [TArrng1Arrng2]
input relation TArrng2 [(ddlog_std::Ref<TArrng2>, bigint)]
relation TI_R [TI_R]
input relation TestRelation [TestRelation]
output relation Try1 [Try1]
output relation Try2 [Try2]
output relation Try3 [Try3]
output relation VecOfMaps [VecOfMaps]
Arrng1Arrng2[(Arrng1Arrng2{.x=x.f2.f2}: Arrng1Arrng2)] :- Arrng1[(__arrng10@ (Arrng1{.f1=(f1: ddlog_std::Ref<ddlog_std::Ref<ddlog_std::Ref<TArrng2>>>), .f2=(f2: bigint)}: Arrng1))], Arrng2[(__arrng21@ (Arrng2{.f1=(x: ddlog_std::Ref<TArrng2>), .f2=f1.f2.f2, .f3=(_: bool)}: Arrng2))], Inspect debug::debug_event_join((32'd0, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __arrng10, __arrng21, (Arrng1Arrng2{.x=x.f2.f2}: Arrng1Arrng2)).
Arrng1Arrng2_2[(Arrng1Arrng2_2{.x=x.f2.f2}: Arrng1Arrng2_2)] :- Arrng1[(__arrng10@ (Arrng1{.f1=(f1: ddlog_std::Ref<ddlog_std::Ref<ddlog_std::Ref<TArrng2>>>), .f2=(f2: bigint)}: Arrng1))], Arrng2[(__arrng21@ (Arrng2{.f1=(x: ddlog_std::Ref<TArrng2>), .f2=f1.f2.f2, .f3=f1.f2.f1}: Arrng2))], Inspect debug::debug_event_join((32'd1, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __arrng10, __arrng21, (Arrng1Arrng2_2{.x=x.f2.f2}: Arrng1Arrng2_2)).
TArrng1Arrng2[(TArrng1Arrng2{.x=x.f2.f2}: TArrng1Arrng2)] :- TArrng1[(__tarrng10@ (t: (ddlog_std::Ref<ddlog_std::Ref<ddlog_std::Ref<TArrng2>>>, bigint)))], TArrng2[(__tarrng21@ ((x: ddlog_std::Ref<TArrng2>), t.0.f2.f2))], Inspect debug::debug_event_join((32'd2, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tarrng10, __tarrng21, (TArrng1Arrng2{.x=x.f2.f2}: TArrng1Arrng2)).
RFtoIDummy[(RFtoIDummy{.x=32'sd0}: RFtoIDummy)].
RFloatToInt[(RFloatToInt{._x=_x}: RFloatToInt)] :- RFtoIDummy[(__rftoidummy0@ (RFtoIDummy{.x=32'sd0}: RFtoIDummy))], (var _x: signed<32>) = ftoi_((- (64'f333.36: double))), Inspect debug::debug_event((32'd4, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __rftoidummy0, (RFloatToInt{._x=_x}: RFloatToInt)).
SomeInts[(SomeInts{.x=y}: SomeInts)] :- Ints[(__ints0@ (Ints{.x=(x: bigint)}: Ints))], (var y: ddlog_std::Option<bigint>) = (ddlog_std::Some{.x=x}: ddlog_std::Option<bigint>), Inspect debug::debug_event((32'd5, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __ints0, y), SomeInts[(__someints2@ (SomeInts{.x=(y: ddlog_std::Option<bigint>)}: SomeInts))], Inspect debug::debug_event_join((32'd5, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, y, __someints2, (SomeInts{.x=y}: SomeInts)).
FuncTest[(ddlog_std::ref_new((FuncTest{.x="foo"}: FuncTest)): ddlog_std::Ref<FuncTest>)].
SumsOfDoubles[(SumsOfDoubles{.x=x, .y=y, .sum=z}: SumsOfDoubles)] :- Doubles[(__doubles0@ (Doubles{.xs=(xs: ddlog_std::Vec<double>)}: Doubles))], var x = FlatMap(xs), Inspect debug::debug_event((32'd7, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", __doubles0, x), Doubles[(__doubles2@ (Doubles{.xs=(ys: ddlog_std::Vec<double>)}: Doubles))], Inspect debug::debug_event_join((32'd7, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, x, __doubles2, (x, ys)), var y = FlatMap(ys), Inspect debug::debug_event((32'd7, 32'd3, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", (x, ys), (y, x)), (var z: double) = (x + y), Inspect debug::debug_event((32'd7, 32'd4, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (y, x), (y, x, z)), Inspect inspect_log::log("../simple2.log", (((((((((("" ++ (ddlog_std::__builtin_2string(ddlog_timestamp): string)) ++ ": ") ++ if (ddlog_weight > 64'sd0) {
insert"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               } else {
delete"
}) ++ ": (") ++ (ddlog_std::__builtin_2string(x): string)) ++ ", ") ++ (ddlog_std::__builtin_2string(y): string)) ++ ", ") ++ (ddlog_std::__builtin_2string(z): string)) ++ ")")), Inspect debug::debug_event((32'd7, 32'd5, 32'd0), ddlog_weight, ddlog_timestamp, "Inspect", (y, x, z), (SumsOfDoubles{.x=x, .y=y, .sum=z}: SumsOfDoubles)).
InspectSimpleSum[(InspectSimpleSum{.x=x, .total=total}: InspectSimpleSum)] :- InputTuples[(__inputtuples0@ (InputTuples{.x=(x: bit<32>), .y=(y: bit<32>)}: InputTuples))], var __inputs_total = Aggregate(x, ddlog_std::__debug_8_1_group_sum((__inputtuples0, y))), Inspect debug::debug_event((32'd8, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_total.0, (__inputs_total, x)), (var total: bit<32>) = __inputs_total.1, Inspect debug::debug_event((32'd8, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_total, x), (x, total)), Inspect {(var z: bit<64>) = (64'd1 + 64'd2);
{(var w: signed<64>) = ddlog_weight;
{(var t: bit<64>) = ddlog_timestamp;
inspect_log::log("../simple2.log", ((((((("" ++ (ddlog_std::__builtin_2string(t): string)) ++ ": ") ++ if (w > 64'sd0) {
insert"
} else {
delete"
}) ++ ": x=") ++ (ddlog_std::__builtin_2string(x): string)) ++ ", total=") ++ (ddlog_std::__builtin_2string(total): string)))}}}, Inspect debug::debug_event((32'd8, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Inspect", (x, total), (InspectSimpleSum{.x=x, .total=total}: InspectSimpleSum)).
FilteredRelation[(FilteredRelation{.y=y}: FilteredRelation)] :- TestRelation[(__testrelation0@ (TestRelation{.x=32'd6, .y=(y: bit<32>)}: TestRelation))], Inspect inspect_log::log("../simple2.log", ((((("" ++ (ddlog_std::__builtin_2string(ddlog_timestamp): string)) ++ ": ") ++ if (ddlog_weight > 64'sd0) {
                                                                                                                                                                                                                                                                                         "insert"
                                                                                                                                                                                                                                                                                     } else {
                                                                                                                                                                                                                                                                                           "delete"
                                                                                                                                                                                                                                                                                       }) ++ ": y=") ++ (ddlog_std::__builtin_2string(y): string))), Inspect debug::debug_event((32'd9, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Inspect", __testrelation0, (FilteredRelation{.y=y}: FilteredRelation)).
OutputInspectNot[(OutputInspectNot{.x=x, .y=y}: OutputInspectNot)] :- InputInspectNot1[(__inputinspectnot10@ (InputInspectNot1{.x=(x: bit<32>), .y=(y: bit<32>)}: InputInspectNot1))], not InputInspectNot2[(InputInspectNot2{.x=(x: bit<32>)}: InputInspectNot2)], Inspect debug::debug_event((32'd10, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Antijoin", __inputinspectnot10, (x, y)), Inspect inspect_log::log("../simple2.log", ((((((("" ++ (ddlog_std::__builtin_2string(ddlog_timestamp): string)) ++ ": ") ++ if (ddlog_weight > 64'sd0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 "insert"
} else {
delete"
}) ++ ": x=") ++ (ddlog_std::__builtin_2string(y): string)) ++ " y=") ++ (ddlog_std::__builtin_2string(y): string))), Inspect debug::debug_event((32'd10, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Inspect", (x, y), (OutputInspectNot{.x=x, .y=y}: OutputInspectNot)).
TI_R[(TI_R{.a=a}: TI_R)] :- TI_R[(__ti_r0@ (TI_R{.a=(a: ddlog_std::Set<string>)}: TI_R))], (ddlog_std::set_size(a) > 64'd1), Inspect debug::debug_event((32'd11, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __ti_r0, (TI_R{.a=a}: TI_R)).
Nested[(Nested{.descr="1", .n={(var n: NestedStruct) = (NestedStruct{.x=(ddlog_std::Some{.x=(ModifyMe{.x="foo", .y=128'sd123456789}: ModifyMe)}: ddlog_std::Option<ModifyMe>)}: NestedStruct);
                               {mutable_match_field(n);
                                n}}}: Nested)].
Nested[(Nested{.descr="2", .n={(var n: NestedStruct) = (NestedStruct{.x=(ddlog_std::Some{.x=(ModifyMe{.x="", .y=128'sd0}: ModifyMe)}: ddlog_std::Option<ModifyMe>)}: NestedStruct);
                               {mutable_match_field(n);
                                n}}}: Nested)].
Nested[(Nested{.descr="3", .n={(var n: NestedStruct) = (NestedStruct{.x=(ddlog_std::None{}: ddlog_std::Option<ModifyMe>)}: NestedStruct);
                               {mutable_match_field(n);
                                n}}}: Nested)].
ChunkParseError[(ChunkParseError{.err=err}: ChunkParseError)] :- ParsedChunk[(__parsedchunk0@ (ParsedChunk{.data=(ddlog_std::Err{.err=(err: string)}: ddlog_std::Result<Object,string>)}: ParsedChunk))], Inspect debug::debug_event((32'd15, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __parsedchunk0, (ChunkParseError{.err=err}: ChunkParseError)).
ParsedChunk[(ParsedChunk{.data=(json::from_json_string(json): ddlog_std::Result<Object,string>)}: ParsedChunk)] :- Chunk[(__chunk0@ (Chunk{.json=(json: string)}: Chunk))], Inspect debug::debug_event((32'd16, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __chunk0, (ParsedChunk{.data=(json::from_json_string(json): ddlog_std::Result<Object,string>)}: ParsedChunk)).
Objects[(Objects{.chunk=objs}: Objects)] :- ParsedChunk[(__parsedchunk0@ (ParsedChunk{.data=(ddlog_std::Ok{.res=(objs: Object)}: ddlog_std::Result<Object,string>)}: ParsedChunk))], Inspect debug::debug_event((32'd17, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __parsedchunk0, (Objects{.chunk=objs}: Objects)).
CompressedChunk[(CompressedChunk{.json=json}: CompressedChunk)] :- Objects[(__objects0@ (Objects{.chunk=(objs: Object)}: Objects))], (ddlog_std::Ok{.res=(var json: string)}: ddlog_std::Result<string,string>) = json::to_json_string(objs), Inspect debug::debug_event((32'd18, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __objects0, (CompressedChunk{.json=json}: CompressedChunk)).
Fib[(Fib{.x=64'd0, .f=fib(64'd0)}: Fib)].
Fib[(Fib{.x=64'd1, .f=fib(64'd1)}: Fib)].
Fib[(Fib{.x=64'd2, .f=fib(64'd2)}: Fib)].
Fib[(Fib{.x=64'd3, .f=fib(64'd3)}: Fib)].
Fib[(Fib{.x=64'd4, .f=fib(64'd4)}: Fib)].
Fib[(Fib{.x=64'd10, .f=fib(64'd10)}: Fib)].
Fib[(Fib{.x=64'd20, .f=fib(64'd20)}: Fib)].
Ack[(Ack{.m=64'd2, .n=64'd1, .a=ack(64'd2, 64'd1)}: Ack)].
Strings[(Strings{.descr="x={10:bit<12>}, y={10:float}, z={-4:signed<125>}", .str=((((("x=" ++ (ddlog_std::__builtin_2string((12'd10: bit<12>)): string)) ++ ", y=") ++ (ddlog_std::__builtin_2string((32'f10.0: float)): string)) ++ ", z=") ++ (ddlog_std::__builtin_2string((- (128'sd4: signed<128>))): string))}: Strings)].
Rseq[(Rseq{._s=(TSeq1{.x=(_l, (ddlog_std::ref_new(_s): ddlog_std::Ref<TSeq>))}: TSeq)}: Rseq)] :- Rletter[(__rletter0@ (Rletter{._l=(_l: string)}: Rletter))], Rseqs[(__rseqs1@ (Rseqs{._s=(_s: TSeq)}: Rseqs))], Inspect debug::debug_event_join((32'd28, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __rletter0, __rseqs1, (Rseq{._s=(TSeq1{.x=(_l, (ddlog_std::ref_new(_s): ddlog_std::Ref<TSeq>))}: TSeq)}: Rseq)).
Try1[(Try1{.description="Isaac Newton", .result=try1("Isaac Newton")}: Try1)].
Try1[(Try1{.description="", .result=try1("")}: Try1)].
Try1[(Try1{.description="Albert_Einstein", .result=try1("Albert_Einstein")}: Try1)].
Try2[(Try2{.description="Isaac Newton", .result=try2("Isaac Newton")}: Try2)].
Try2[(Try2{.description="", .result=try2("")}: Try2)].
Try2[(Try2{.description="Albert_Einstein", .result=try2("Albert_Einstein")}: Try2)].
Try3[(Try3{.description="Isaac Newton", .result=try3("Isaac Newton")}: Try3)].
Try3[(Try3{.description="", .result=try3("")}: Try3)].
Try3[(Try3{.description="Albert_Einstein", .result=try3("Albert_Einstein")}: Try3)].
BoolVectors[(BoolVectors{.v={(var __vec: ddlog_std::Vec<bool>) = (ddlog_std::vec_with_capacity(64'd3): ddlog_std::Vec<bool>);
                             {ddlog_std::push(__vec, true);
                              {ddlog_std::push(__vec, false);
                               {ddlog_std::push(__vec, true);
                                __vec}}}}}: BoolVectors)].
BoolVecVec[(BoolVecVec{.v={(var __vec: ddlog_std::Vec<ddlog_std::Vec<bool>>) = (ddlog_std::vec_with_capacity(64'd3): ddlog_std::Vec<ddlog_std::Vec<bool>>);
                           {ddlog_std::push(__vec, {(var __vec: ddlog_std::Vec<bool>) = (ddlog_std::vec_with_capacity(64'd3): ddlog_std::Vec<bool>);
                                                    {ddlog_std::push(__vec, true);
                                                     {ddlog_std::push(__vec, false);
                                                      {ddlog_std::push(__vec, true);
                                                       __vec}}}});
                            {ddlog_std::push(__vec, {(var __vec: ddlog_std::Vec<bool>) = (ddlog_std::vec_with_capacity(64'd1): ddlog_std::Vec<bool>);
                                                     {ddlog_std::push(__vec, true);
                                                      __vec}});
                             {ddlog_std::push(__vec, {(var __vec: ddlog_std::Vec<bool>) = (ddlog_std::vec_with_capacity(64'd1): ddlog_std::Vec<bool>);
                                                      {ddlog_std::push(__vec, false);
                                                       __vec}});
                              __vec}}}}}: BoolVecVec)].
StringMaps[(StringMaps{.m={(var __map: ddlog_std::Map<string,(ddlog_std::usize, bool)>) = (ddlog_std::map_empty(): ddlog_std::Map<string,(ddlog_std::usize, bool)>);
                           {ddlog_std::insert(__map, "foo", (64'd1, true));
                            {ddlog_std::insert(__map, "bar", (64'd2, false));
                             {ddlog_std::insert(__map, "foobar", (64'd3, false));
                              __map}}}}}: StringMaps)].
MapOfMaps[(MapOfMaps{.m={(var __map: ddlog_std::Map<string,ddlog_std::Map<double,(ddlog_std::usize, bool)>>) = (ddlog_std::map_empty(): ddlog_std::Map<string,ddlog_std::Map<double,(ddlog_std::usize, bool)>>);
                         {ddlog_std::insert(__map, "foo", {(var __map: ddlog_std::Map<double,(bit<64>, bool)>) = (ddlog_std::map_empty(): ddlog_std::Map<double,(bit<64>, bool)>);
                                                           {ddlog_std::insert(__map, 64'f1.0, (64'd1, true));
                                                            {ddlog_std::insert(__map, 64'f2.0, (64'd4, false));
                                                             __map}}});
                          {ddlog_std::insert(__map, "bar", {(var __map: ddlog_std::Map<double,(bit<64>, bool)>) = (ddlog_std::map_empty(): ddlog_std::Map<double,(bit<64>, bool)>);
                                                            {ddlog_std::insert(__map, (- 64'f10.0), (64'd10000, true));
                                                             {ddlog_std::insert(__map, 64'f200.0, (64'd2, false));
                                                              __map}}});
                           {ddlog_std::insert(__map, "foobar", (ddlog_std::map_empty(): ddlog_std::Map<double,(ddlog_std::usize, bool)>));
                            __map}}}}}: MapOfMaps)].
MapOfVecs[(MapOfVecs{.m={(var __map: ddlog_std::Map<(ddlog_std::u32, bigint),ddlog_std::Vec<double>>) = (ddlog_std::map_empty(): ddlog_std::Map<(ddlog_std::u32, bigint),ddlog_std::Vec<double>>);
                         {ddlog_std::insert(__map, (32'd100, 100), {(var __vec: ddlog_std::Vec<double>) = (ddlog_std::vec_with_capacity(64'd4): ddlog_std::Vec<double>);
                                                                    {ddlog_std::push(__vec, 64'f0.1);
                                                                     {ddlog_std::push(__vec, (- 64'f100.0));
                                                                      {ddlog_std::push(__vec, 64'f0.0);
                                                                       {ddlog_std::push(__vec, 64'f1000000.0);
                                                                        __vec}}}}});
                          {ddlog_std::insert(__map, (32'd100, (- 100)), (ddlog_std::vec_empty(): ddlog_std::Vec<double>));
                           {ddlog_std::insert(__map, (32'd0, (- 0)), {(var __vec: ddlog_std::Vec<double>) = (ddlog_std::vec_with_capacity(64'd4): ddlog_std::Vec<double>);
                                                                      {ddlog_std::push(__vec, 64'f0.1);
                                                                       {ddlog_std::push(__vec, (- 64'f100.0));
                                                                        {ddlog_std::push(__vec, 64'f0.0);
                                                                         {ddlog_std::push(__vec, 64'f1000000.0);
                                                                          __vec}}}}});
                            __map}}}}}: MapOfVecs)].
VecOfMaps[(VecOfMaps{.m={(var __vec: ddlog_std::Vec<ddlog_std::Map<(ddlog_std::u32, bigint),double>>) = (ddlog_std::vec_with_capacity(64'd3): ddlog_std::Vec<ddlog_std::Map<(ddlog_std::u32, bigint),double>>);
                         {ddlog_std::push(__vec, {(var __map: ddlog_std::Map<(bit<32>, bigint),double>) = (ddlog_std::map_empty(): ddlog_std::Map<(bit<32>, bigint),double>);
                                                  {ddlog_std::insert(__map, (32'd100, 100), 64'f0.1);
                                                   __map}});
                          {ddlog_std::push(__vec, {(var __map: ddlog_std::Map<(bit<32>, bigint),double>) = (ddlog_std::map_empty(): ddlog_std::Map<(bit<32>, bigint),double>);
                                                   {ddlog_std::insert(__map, (32'd100, 100), 64'f0.1);
                                                    {ddlog_std::insert(__map, (32'd1000, (- 100)), (- 64'f0.1));
                                                     __map}}});
                           {ddlog_std::push(__vec, {(var __map: ddlog_std::Map<(bit<32>, bigint),double>) = (ddlog_std::map_empty(): ddlog_std::Map<(bit<32>, bigint),double>);
                                                    {ddlog_std::insert(__map, (32'd100, 100), 64'f0.1);
                                                     {ddlog_std::insert(__map, (32'd1000, (- 100)), (- 64'f0.1));
                                                      {ddlog_std::insert(__map, (32'd1000, (- 10000000000000000000000000000000000000)), (- 64'f0.0));
                                                       __map}}}});
                            __vec}}}}}: VecOfMaps)].
Rb[(Rb{.x=32'd0}: Rb)].
Rb[(Rb{.x=(x + 32'd1)}: Rb)] :- Rb[(__rb0@ (Rb{.x=(x: bit<32>)}: Rb))], (x < 32'd65599), Inspect debug::debug_event((32'd45, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __rb0, (Rb{.x=(x + 32'd1)}: Rb)).
Rque[(Rque{.x=x}: Rque)] :- Rb[(__rb0@ (Rb{.x=(x: bit<32>)}: Rb))], (x > 32'd65530), Inspect debug::debug_event((32'd46, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __rb0, (Rque{.x=x}: Rque)).

