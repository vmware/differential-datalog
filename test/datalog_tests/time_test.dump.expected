time_test::TTest{.s = "10:11:12.000000000", .t = ddlog_std::Ok{.res = "10:11:12.000000000"}}
time_test::TTest{.s = "10:11:12.103104105", .t = ddlog_std::Ok{.res = "10:11:12.103104105"}}
time_test::TTest{.s = "Error in format string '%incorrectformat'", .t = ddlog_std::Ok{.res = "10:11:12.103104105"}}
time_test::TTest{.s = "Ok(midnight())", .t = ddlog_std::Ok{.res = "00:00:00.000000000"}}
time_test::TTest{.s = "SomeTime: 10:11:12.103104105", .t = ddlog_std::Ok{.res = "10:11:12.103104105"}}
time_test::TTest{.s = "string2time(to_string(result_unwrap_or_default(try_from_hms(8'd10, 8'd10, 8'd10))))", .t = ddlog_std::Ok{.res = "10:10:10.000000000"}}
time_test::TTest{.s = "string2time(to_string(result_unwrap_or_default(try_from_hms_micro(8'd10, 8'd10, 8'd10, 32'd10))))", .t = ddlog_std::Ok{.res = "10:10:10.000010000"}}
time_test::TTest{.s = "string2time(to_string(result_unwrap_or_default(try_from_hms_milli(8'd10, 8'd10, 8'd10, 16'd10))))", .t = ddlog_std::Ok{.res = "10:10:10.010000000"}}
time_test::TTest{.s = "string2time(to_string(result_unwrap_or_default(try_from_hms_nano(8'd10, 8'd10, 8'd10, 32'd10))))", .t = ddlog_std::Ok{.res = "10:10:10.000000010"}}
time_test::TTest{.s = "time_parse(\"10:10\", \"%T\")", .t = ddlog_std::Err{.err = "premature end of input"}}
time_test::TTest{.s = "time_parse(\"10:10:10\", \"%T\")", .t = ddlog_std::Ok{.res = "10:10:10.000000000"}}
time_test::TTest{.s = "time_parse(\"10:10:10.102030405\", \"%T.%f\")", .t = ddlog_std::Ok{.res = "10:10:10.102030405"}}
time_test::TTest{.s = "time_parse(time_format(10:11:12.103104105, %H::%M::%S).unwrap_or_default(), %H::%M::%S)", .t = ddlog_std::Ok{.res = "10:11:12.000000000"}}
time_test::TTest{.s = "try_from_hms(100, 0, 0).unwrap_or_default()", .t = ddlog_std::Ok{.res = "00:00:00.000000000"}}
time_test::TTest{.s = "try_from_hms(8'd0, 8'd60, 8'd0)", .t = ddlog_std::Err{.err = "illegal time value"}}
time_test::TTest{.s = "try_from_hms(8'd10, 8'd10, 8'd10)", .t = ddlog_std::Ok{.res = "10:10:10.000000000"}}
time_test::TTest{.s = "try_from_hms(8'd23, 8'd0, 8'd0)", .t = ddlog_std::Ok{.res = "23:00:00.000000000"}}
time_test::TTest{.s = "try_from_hms(8'd24, 8'd0, 8'd0)", .t = ddlog_std::Err{.err = "illegal time value"}}
time_test::TTest{.s = "try_from_hms_micro(8'd10, 8'd10, 8'd10, 32'd10)", .t = ddlog_std::Ok{.res = "10:10:10.000010000"}}
time_test::TTest{.s = "try_from_hms_milli(8'd10, 8'd10, 8'd10, 16'd10)", .t = ddlog_std::Ok{.res = "10:10:10.010000000"}}
time_test::TTest{.s = "try_from_hms_nano(8'd10, 8'd10, 8'd10, 32'd10)", .t = ddlog_std::Ok{.res = "10:10:10.000000010"}}
time_test::Extract{.s = "day(2020-04-14)", .v = 14}
time_test::Extract{.s = "hour(10:11:12.103104105)", .v = 10}
time_test::Extract{.s = "microsecond(10:11:12.103104105)", .v = 103104}
time_test::Extract{.s = "millisecond(10:11:12.103104105)", .v = 103}
time_test::Extract{.s = "minute(10:11:12.103104105)", .v = 11}
time_test::Extract{.s = "month(2020-04-14)", .v = 4}
time_test::Extract{.s = "nanosecond(10:11:12.103104105)", .v = 103104105}
time_test::Extract{.s = "ordinal(2020-04-14)", .v = 105}
time_test::Extract{.s = "second(10:11:12.103104105)", .v = 12}
time_test::Extract{.s = "week(2020-04-14)", .v = 16}
time_test::Extract{.s = "year(2020-04-14)", .v = 2020}
time_test::DTest{.s = "2010-10-15", .t = ddlog_std::Ok{.res = "2010-10-15"}}
time_test::DTest{.s = "2020-04-14", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "Error in format string '%incorrectformat'", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "Ok{from_julian_day(2000000)}", .t = ddlog_std::Ok{.res = "0763-09-18"}}
time_test::DTest{.s = "Ok{next_day(2020-04-14)}", .t = ddlog_std::Ok{.res = "2020-04-15"}}
time_test::DTest{.s = "Ok{previous_day(2020-04-14)}", .t = ddlog_std::Ok{.res = "2020-04-13"}}
time_test::DTest{.s = "date_parse(\"2020/04/14\", \"%Y/%m/%d\")", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "date_parse(date_format(2020-04-14, %Y-%m-%dT).result_or_error(), %Y-%m-%dT)", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "string2date(to_string(someDate()))", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "try_from_iso_ywd(32'sd2020, 8'd4, Monday)", .t = ddlog_std::Ok{.res = "2020-01-20"}}
time_test::DTest{.s = "try_from_yd(0, 0, 0).unwrap_or_default()", .t = ddlog_std::Ok{.res = "0000-01-01"}}
time_test::DTest{.s = "try_from_ymd(32'sd2020, 8'd0, 8'd14)", .t = ddlog_std::Err{.err = "Invalid date"}}
time_test::DTest{.s = "try_from_ymd(32'sd2020, 8'd04, 8'd14)", .t = ddlog_std::Ok{.res = "2020-04-14"}}
time_test::DTest{.s = "try_from_ymd(32'sd2020, 8'd13, 8'd14)", .t = ddlog_std::Err{.err = "Invalid date"}}
time_test::DTest{.s = "try_from_yo(32'sd2020, 16'd100)", .t = ddlog_std::Ok{.res = "2020-04-09"}}
time_test::DTest{.s = "try_from_yo(32'sd2020, 16'd367)", .t = ddlog_std::Err{.err = "Invalid date"}}
time_test::DTTest{.s = "\"\".string2datetime().unwrap_or_default()", .t = ddlog_std::Ok{.res = time::DateTime{.date = "0000-01-01", .time = "00:00:00.000000000"}}}
time_test::DTTest{.s = "2010-10-15T10:11:12", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2010-10-15", .time = "10:11:12.000000000"}}}
time_test::DTTest{.s = "2020-04-14T10:11:12", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:12.103104105"}}}
time_test::DTTest{.s = "Error in format string '%incorrectformat'", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:12.103104105"}}}
time_test::DTTest{.s = "Extract date 2020-04-14T10:11:12", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:12.103104105"}}}
time_test::DTTest{.s = "Extract shifted 2020-04-14T10:11:12", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:12.103104105"}}}
time_test::DTTest{.s = "datetime_from_unix_timestamp(10000000)", .t = ddlog_std::Ok{.res = time::DateTime{.date = "1970-04-26", .time = "17:46:40.000000000"}}}
time_test::DTTest{.s = "datetime_parse(\"2020-10-10T10:20:30\", \"%Y-%m-%dT%H:%M:%S\")", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-10-10", .time = "10:20:30.000000000"}}}
time_test::DTTest{.s = "datetime_parse(\"2020/10/10T10:20:30\", \"%Y-%m-%dT%H:%M:%S\")", .t = ddlog_std::Err{.err = "input contains invalid characters"}}
time_test::DTTest{.s = "datetime_parse(\"Wed Mar 05 07:45:30 MST 2025\", \"%a %b %d %H:%M:%S %Z %Y\")", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2025-03-05", .time = "07:45:30.000000000"}}}
time_test::DTTest{.s = "datetime_parse(datetime_format(2020-04-14T10:11:12, %Y-%m-%dT%H::%M).result_or_error(), %Y-%m-%dT%H::%M)", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:00.000000000"}}}
time_test::DTTest{.s = "get_datetime(tz_datetime_parse_from_rfc2822(\"Tue, 1 Jul 2003 10:52:37 GMT\"))", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2003-07-01", .time = "10:52:37.000000000"}}}
time_test::DTTest{.s = "string2datetime(\"2020-10-10T10:20:30\")", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-10-10", .time = "10:20:30.000000000"}}}
time_test::DTTest{.s = "string2datetime(to_string(2020-04-14T10:11:12))", .t = ddlog_std::Ok{.res = time::DateTime{.date = "2020-04-14", .time = "10:11:12.000000000"}}}
