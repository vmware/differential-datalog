// Tests for datalog functions and expressions

function f(): int
function g(a: int): int
function h(a: (int, int)): (int, int)

function a0(): int
    = 1

function a1(): int
    = 1 + 2

function a2(): bit<32>
    = 32'd0 + 32'd1

function a3(): bit<32>
    = 0: bit<32>

function a4(): bit<32>
    = (0: bit<64>)[40:9]

function a5(a: bit<32>, b: bit<32>): bit<32>
    = (a & b) | (a | b) | (~a) | (a << 32'd5) | (a >> 32'd5) | (a[15:0] ++ a[31:16])

function a6(a: bit<16>, b: bit<16>): bit<16>
    = (a + b) + (a - b) + (a / b) + (a * b) + (a % b)

function a7(a: bit<16>, b: bit<16>): bool
    = (a < b) or (a > b) or (a <= b) or (a >= b) or (a == b) or (a != b) or { a < b }

function a8(): bit<32>
    = 32'd125 | 32'hFF | 32'o777 | 32'b1010101011

function b0(): bool
    = true and false

function b1(a: bool): bool
    = (a and true) or (a or false) or (a => false) or (not a)

function v2(): bool
    = b1(true)

function c0(a: bit<32>, b: bit<16>): bit<16>
    = a; b

function s0(): string
    = "Some string"

function s1(): string
    = "\t\r\n\"\\\a"

function v(): string =
    var v1: string = "hello";
    var v2 = "there";
    v2

typedef Alt = C0{x: bit<32>}
            | C1{x: bit<32>}

function x(): Alt
    = C0{32'd5}

typedef C = C{f1: string, f2: string}

function vars(): () = {
    var x: int;
    x = 10;
    var y = C{.f1 = "foo", .f2 = "bar"};
    var z: C = C{.f1 = "bar", .f2 = "foo"};
    
    (var a, var b) = (x+5, x-5);

    C{.f1 = var e} = y;

    C{var c, var d} = y
}

function patterns(): () = {
    var a: Alt = C0{1};

    var b = match (a) {
        C0{} -> true,
        C1{} -> false
    };

    var i: bit<32> = match (a) {
        C0{.x = v} -> v,
        C1{v} -> v
    }
}

typedef option_t<'A> = None
                     | Some {value : 'A}


function shadow(): string = {
    var b: option_t<string> = None;
    var a = Some{"foo"};
    match (a) {
        Some{v} -> v,
        None    -> ""
    }
}

typedef nested_t = N{field: C}

function fnested(x: nested_t): string = {
    N{C{var res, _}} = x;
    res
}
