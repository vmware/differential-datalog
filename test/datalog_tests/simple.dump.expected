Metro test
Answer:
Answer{"Chatelet"}
Answer{"Louvres"}
Answer{"Odeon"}
Answer{"Palais Royal"}
Answer{"St.Germain"}
Answer{"St.Michel"}

Arithm:
Arithm{0}
Arithm{1}
Arithm{2}
Arithm{3}
Arithm{4}
Arithm{5}
Arithm{6}
Arithm{7}
Arithm{8}
Arithm{9}
Arithm{10}
Arithm{11}
Arithm{12}
Arithm{13}
Arithm{14}

Cast_bigint:
Cast_bigint{"(32'sd0 - 32'sd10) as bigint",-10,-10}
Cast_bigint{"128'd100 as bigint",100,100}
Cast_bigint{"16'd100  as bigint",100,100}
Cast_bigint{"24'd100  as bigint",100,100}
Cast_bigint{"256'd100 as bigint",100,100}
Cast_bigint{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint",29642774844752946028434172162224104410437116074403984394101141506025761187823610,29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{"32'd100  as bigint",100,100}
Cast_bigint{"512'd100 as bigint",100,100}
Cast_bigint{"8'd100   as bigint",100,100}

Cast_s32:
Cast_s32{"(100: bit<32>) as signed<32>",100,100}
Cast_s32{"128'sd100 as signed<32>",100,100}
Cast_s32{"128'shffffffffffffffffffff as signed<32>",-1,-1}
Cast_s32{"16'sd100  as signed<32>",100,100}
Cast_s32{"32'sd100  as signed<32>",100,100}
Cast_s32{"64'shffffffffffff as signed<32>",-1,-1}
Cast_s32{"8'sd100   as signed<32>",100,100}

Cast_u24:
Cast_u24{"(100: signed<32>) as bit<32> as bit<24>",100,100}
Cast_u24{"(32'sd0 - 32'sd10) as bit<32> as bit<24>",16777206,16777206}
Cast_u24{"128'd100 as bit<24>",100,100}
Cast_u24{"128'hffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"16'd100  as bit<24>",100,100}
Cast_u24{"24'd100  as bit<24>",100,100}
Cast_u24{"256'd100 as bit<24>",100,100}
Cast_u24{"256'hffffffffffffffffffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"32'd100  as bit<24>",100,100}
Cast_u24{"64'hffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"8'd100   as bit<24>",100,100}

Cast_u256:
Cast_u256{"(100: signed<32>) as bit<32> as bit<256>",100,100}
Cast_u256{"(32'sd0 - 32'sd10) as bit<32> as bit<256>",4294967286,4294967286}
Cast_u256{"128'd100 as bit<256>",100,100}
Cast_u256{"128'hffffffffffffffffffff as bit<256>",1208925819614629174706175,1208925819614629174706175}
Cast_u256{"16'd100  as bit<256>",100,100}
Cast_u256{"24'd100  as bit<256>",100,100}
Cast_u256{"256'd100 as bit<256>",100,100}
Cast_u256{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>",115792089237316195423570985008687907853269984665640564039457584007913129639930,115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{"32'd100  as bit<256>",100,100}
Cast_u256{"512'd100 as bit<256>",100,100}
Cast_u256{"8'd100   as bit<256>",100,100}

Cast_u32:
Cast_u32{"(100: signed<32>) as bit<32>",100,100}
Cast_u32{"(32'sd0 - 32'sd10) as bit<32>",4294967286,4294967286}
Cast_u32{"128'd100 as bit<32>",100,100}
Cast_u32{"128'hffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"16'd100  as bit<32>",100,100}
Cast_u32{"256'd100 as bit<32>",100,100}
Cast_u32{"256'hffffffffffffffffffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"32'd100  as bit<32>",100,100}
Cast_u32{"64'hffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"8'd100   as bit<32>",100,100}

R7:
R7{1,2}
R7{1,3}
R7Other{}

Reach:
Reach{"Chatelet","Chatelet"}
Reach{"Chatelet","Louvres"}
Reach{"Chatelet","Palais Royal"}
Reach{"Chatelet","St.Michel"}
Reach{"Concorde","Tuileries"}
Reach{"Louvres","Chatelet"}
Reach{"Louvres","Louvres"}
Reach{"Louvres","Palais Royal"}
Reach{"Odeon","Chatelet"}
Reach{"Odeon","Louvres"}
Reach{"Odeon","Odeon"}
Reach{"Odeon","Palais Royal"}
Reach{"Odeon","St.Germain"}
Reach{"Odeon","St.Michel"}
Reach{"Palais Royal","Louvres"}
Reach{"Palais-Royal","Concorde"}
Reach{"Palais-Royal","Palais-Royal"}
Reach{"Palais-Royal","Tuileries"}
Reach{"St.Germain","Chatelet"}
Reach{"St.Germain","Louvres"}
Reach{"St.Germain","Odeon"}
Reach{"St.Germain","Palais Royal"}
Reach{"St.Germain","St.Germain"}
Reach{"St.Germain","St.Michel"}
Reach{"St.Michel","Chatelet"}
Reach{"St.Michel","Louvres"}
Reach{"St.Michel","Odeon"}
Reach{"St.Michel","Palais Royal"}
Reach{"St.Michel","St.Michel"}
Reach{"Tuileries","Concorde"}
Reach{"Tuileries","Palais-Royal"}
Reach{"Tuileries","Tuileries"}

Sib:
Sib{"Alice","Ben"}
Sib{"Alice","Bob"}
Sib{"Ben","Alice"}
Sib{"Ben","Bob"}
Sib{"Bob","Alice"}
Sib{"Bob","Ben"}

Signed:
Signed{0}
Signed{1}
Signed{2}
Signed{3}
Signed{4}
Signed{5}
Signed{6}
Signed{7}
Signed{8}
Signed{9}
Signed{10}

UMinus_bigint:
UMinus_bigint{"- -100",100}
UMinus_bigint{"-100",-100}
UMinus_bigint{"-32768",-32768}

UMinus_s32:
UMinus_s32{"-(-32'sd100)",100}
UMinus_s32{"-32'sd100",-100}
UMinus_s32{"-32768",-32768}

Rules test
Answer:
Answer{"Chatelet"}
Answer{"Louvres"}
Answer{"Odeon"}
Answer{"Palais Royal"}
Answer{"St.Germain"}
Answer{"St.Michel"}

Arithm:
Arithm{0}
Arithm{1}
Arithm{2}
Arithm{3}
Arithm{4}
Arithm{5}
Arithm{6}
Arithm{7}
Arithm{8}
Arithm{9}
Arithm{10}
Arithm{11}
Arithm{12}
Arithm{13}
Arithm{14}

Cast_bigint:
Cast_bigint{"(32'sd0 - 32'sd10) as bigint",-10,-10}
Cast_bigint{"128'd100 as bigint",100,100}
Cast_bigint{"16'd100  as bigint",100,100}
Cast_bigint{"24'd100  as bigint",100,100}
Cast_bigint{"256'd100 as bigint",100,100}
Cast_bigint{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint",29642774844752946028434172162224104410437116074403984394101141506025761187823610,29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{"32'd100  as bigint",100,100}
Cast_bigint{"512'd100 as bigint",100,100}
Cast_bigint{"8'd100   as bigint",100,100}

Cast_s32:
Cast_s32{"(100: bit<32>) as signed<32>",100,100}
Cast_s32{"128'sd100 as signed<32>",100,100}
Cast_s32{"128'shffffffffffffffffffff as signed<32>",-1,-1}
Cast_s32{"16'sd100  as signed<32>",100,100}
Cast_s32{"32'sd100  as signed<32>",100,100}
Cast_s32{"64'shffffffffffff as signed<32>",-1,-1}
Cast_s32{"8'sd100   as signed<32>",100,100}

Cast_u24:
Cast_u24{"(100: signed<32>) as bit<32> as bit<24>",100,100}
Cast_u24{"(32'sd0 - 32'sd10) as bit<32> as bit<24>",16777206,16777206}
Cast_u24{"128'd100 as bit<24>",100,100}
Cast_u24{"128'hffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"16'd100  as bit<24>",100,100}
Cast_u24{"24'd100  as bit<24>",100,100}
Cast_u24{"256'd100 as bit<24>",100,100}
Cast_u24{"256'hffffffffffffffffffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"32'd100  as bit<24>",100,100}
Cast_u24{"64'hffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"8'd100   as bit<24>",100,100}

Cast_u256:
Cast_u256{"(100: signed<32>) as bit<32> as bit<256>",100,100}
Cast_u256{"(32'sd0 - 32'sd10) as bit<32> as bit<256>",4294967286,4294967286}
Cast_u256{"128'd100 as bit<256>",100,100}
Cast_u256{"128'hffffffffffffffffffff as bit<256>",1208925819614629174706175,1208925819614629174706175}
Cast_u256{"16'd100  as bit<256>",100,100}
Cast_u256{"24'd100  as bit<256>",100,100}
Cast_u256{"256'd100 as bit<256>",100,100}
Cast_u256{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>",115792089237316195423570985008687907853269984665640564039457584007913129639930,115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{"32'd100  as bit<256>",100,100}
Cast_u256{"512'd100 as bit<256>",100,100}
Cast_u256{"8'd100   as bit<256>",100,100}

Cast_u32:
Cast_u32{"(100: signed<32>) as bit<32>",100,100}
Cast_u32{"(32'sd0 - 32'sd10) as bit<32>",4294967286,4294967286}
Cast_u32{"128'd100 as bit<32>",100,100}
Cast_u32{"128'hffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"16'd100  as bit<32>",100,100}
Cast_u32{"256'd100 as bit<32>",100,100}
Cast_u32{"256'hffffffffffffffffffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"32'd100  as bit<32>",100,100}
Cast_u32{"64'hffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"8'd100   as bit<32>",100,100}

R4:
R3{0,true}
R3{1,true}
R3{2,true}
R3{3,true}
R3{4,true}
R3{5,true}
R3{6,true}

R5:
0
1
2
3
4
5
6

R6:
R6{0}
R6{1}
R6{2}
R6{3}
R6{4}
R6{5}
R6{6}

R7:
R7{1,2}
R7{1,3}
R7Other{}

Reach:
Reach{"Chatelet","Chatelet"}
Reach{"Chatelet","Louvres"}
Reach{"Chatelet","Palais Royal"}
Reach{"Chatelet","St.Michel"}
Reach{"Concorde","Tuileries"}
Reach{"Louvres","Chatelet"}
Reach{"Louvres","Louvres"}
Reach{"Louvres","Palais Royal"}
Reach{"Odeon","Chatelet"}
Reach{"Odeon","Louvres"}
Reach{"Odeon","Odeon"}
Reach{"Odeon","Palais Royal"}
Reach{"Odeon","St.Germain"}
Reach{"Odeon","St.Michel"}
Reach{"Palais Royal","Louvres"}
Reach{"Palais-Royal","Concorde"}
Reach{"Palais-Royal","Palais-Royal"}
Reach{"Palais-Royal","Tuileries"}
Reach{"St.Germain","Chatelet"}
Reach{"St.Germain","Louvres"}
Reach{"St.Germain","Odeon"}
Reach{"St.Germain","Palais Royal"}
Reach{"St.Germain","St.Germain"}
Reach{"St.Germain","St.Michel"}
Reach{"St.Michel","Chatelet"}
Reach{"St.Michel","Louvres"}
Reach{"St.Michel","Odeon"}
Reach{"St.Michel","Palais Royal"}
Reach{"St.Michel","St.Michel"}
Reach{"Tuileries","Concorde"}
Reach{"Tuileries","Palais-Royal"}
Reach{"Tuileries","Tuileries"}

Sib:
Sib{"Alice","Ben"}
Sib{"Alice","Bob"}
Sib{"Ben","Alice"}
Sib{"Ben","Bob"}
Sib{"Bob","Alice"}
Sib{"Bob","Ben"}

Signed:
Signed{0}
Signed{1}
Signed{2}
Signed{3}
Signed{4}
Signed{5}
Signed{6}
Signed{7}
Signed{8}
Signed{9}
Signed{10}

UMinus_bigint:
UMinus_bigint{"- -100",100}
UMinus_bigint{"-100",-100}
UMinus_bigint{"-32768",-32768}

UMinus_s32:
UMinus_s32{"-(-32'sd100)",100}
UMinus_s32{"-32'sd100",-100}
UMinus_s32{"-32768",-32768}

Table12{20695836920908937261915266253713563738,"foo",S{(true, true),5}}
Table12{81692126345696542188923640651411714412,"foo",S{(false, true),10000}}
Table12{137151609739491206170748566711757625861,"foo",S{(true, false),43981}}
Table12{173592105249357153805573863620167017533,"foo",S{(false, true),10000}}
Table12{173670172741911619502105830072953828992,"foo",S{(true, false),43981}}
Table12{211727904196777888792921590151204575764,"foo",S{(true, true),5}}
Table12{218334107078988268330177571792522447425,"foo",S{(true, true),5}}
Table12{258101594679877739861006822360175003366,"buzzzzzzzz",S{(true, true),5}}
Table12{312560568469280405643575197132576203606,"foo",S{(false, true),10000}}
Table12{324905179504175058909924909437678210347,"foo",S{(true, false),43981}}
Rel3:
Rel3{0,IP4{100},Option1{0,IP4{300},(true, "foo")}}
Aggregate1
Aggregate1{"a",3}
Aggregate1{"b",3}
AggregateCnt
AggregateCnt{6}
AggregateCnt2
AggregateCnt2{6}
AggregateCnt3
AggregateCnt3{4}
Aggregate2
Aggregate2{"a",std_Set { x: {"1", "2", "3"} }}
Aggregate2{"b",std_Set { x: {"1", "2", "3"} }}
Aggregate3
Aggregate3{"a",std_Vec { x: ["1", "2", "3"] }}
Aggregate3{"b",std_Vec { x: ["1", "2", "3"] }}
Aggregate4
Aggregate4{"a",std_Map { x: {"a": "3"} }}
Aggregate4{"b",std_Map { x: {"b": "3"} }}
AggregateByX
AggregateByX{"a",3}
AggregateByX{"b",3}
Disaggregate
Disaggregate{"a","1"}
Disaggregate{"a","2"}
Disaggregate{"a","3"}
Disaggregate{"b","1"}
Disaggregate{"b","2"}
Disaggregate{"b","3"}
Sum
Sum{"a",111}
Sum{"b",60}
WithKeyDbg
WithKeyDbg{0,"foo"}
WithKeyDbg{1,"bar"}
WithKeyDbg{2,"buzz"}
WithKeyDbg after deletion by value
WithKeyDbg{1,"bar"}
WithKeyDbg{2,"buzz"}
WithKeyDbg after deletion by key
WithKeyDbg{2,"buzz"}
WithKeyDbg: +3, -2
WithKeyDbg{1,"bar2"}
WithKeyDbg{4,"hello"}
Innocent
Innocent{"Bill Smith"}
Innocent{"John Doe"}
ValidDestination
ValidDestination{IPAddr{10,10,10,101}}
ValidDestination{IPAddr{10,10,10,102}}
ValidDestination{IPAddr{10,10,10,103}}
ValidDestination{IPAddr{10,10,10,104}}
ValidDestination{IPAddr{10,10,10,105}}
HostAddress{0,"10.10.10.101"}
HostAddress{0,"10.10.10.102"}
HostAddress{0,"10.10.10.103"}
HostAddress{0,"10.10.10.104"}
HostAddress{0,"10.10.10.105"}
HostAddress{1,"192.168.0.1"}
HostAddress{1,"192.168.0.2"}
HostAddress{1,"192.168.0.3"}
ExternalId{0,("a", "1")}
ExternalId{0,("b", "2")}
ExternalId{0,("c", "3")}
ExternalId{0,("c", "4")}
ExternalId{0,("d", "5")}
ExternalId{0,("e", "6")}
Allocation{"a","1",30}
Allocation{"a","2",31}
Allocation{"a","3",50}
Allocation{"a","4",51}
Allocation{"a","5",52}
Allocation{"b","1",10000}
Allocation{"b","3",16777215}
Allocation{"b","4",1}
Allocation{"b","5",2}
Allocation after clear
Referee
Referee{Referenced{true,std.Some{"hello"}}}
Filtered
Filtered{Referenced{true,std.Some{"hello"}}}
Referee2
Referee2{Referenced{true,std.Some{"hello"}}}
Filtered2
Filtered2{Referee2{Referenced{true,std.Some{"hello"}}}}
NewAllocation
NewAllocation{1,std_Vec { x: [] }}
NewAllocation{2,std_Vec { x: [("a", 0)] }}
NewAllocation{3,std_Vec { x: [("a", 0)] }}
NewAllocation{4,std_Vec { x: [("a", 0), ("b", 1)] }}
NewAllocation{5,std_Vec { x: [("a", 1000), ("b", 1001)] }}
NewAllocation{5,std_Vec { x: [("a", 4294967294), ("b", 4294967295)] }}
NewAllocation{6,std_Vec { x: [("a", 4294967292), ("b", 4294967293)] }}
NewAllocation{7,std_Vec { x: [("a", 0), ("b", 1)] }}
NewAllocation{8,std_Vec { x: [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)] }}
NewAllocation{9,std_Vec { x: [("x", 10001), ("b", 10002), ("c", 10003), ("d", 10004), ("e", 10005), ("z", 10006)] }}
NewAllocation{10,std_Vec { x: [("x", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("z", 6)] }}
NewAllocation{11,std_Vec { x: [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0)] }}
NewAllocation{12,std_Vec { x: [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)] }}
NewAllocation{13,std_Vec { x: [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)] }}
NewAllocation{14,std_Vec { x: [("x", 4294967286), ("b", 4294967288), ("c", 4294967290), ("d", 4294967291), ("e", 4294967292), ("z", 4294967293), ("p", 4294967294)] }}
NewAllocation{15,std_Vec { x: [("x", 4294967286), ("b", 4294967287), ("c", 4294967288), ("d", 4294967289), ("e", 4294967290), ("z", 4294967291), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)] }}
NewAllocation{16,std_Vec { x: [("x", 10), ("b", 12), ("c", 14), ("d", 15), ("e", 16), ("z", 17), ("p", 18), ("q", 19)] }}
NewAllocation{17,std_Vec { x: [] }}
NewAllocation{18,std_Vec { x: [] }}
NewAllocation{19,std_Vec { x: [] }}
NewAllocation{20,std_Vec { x: [] }}
NewAllocation{21,std_Vec { x: [] }}
NewAllocationOpt
NewAllocationOpt{1,std_Vec { x: [] }}
NewAllocationOpt{2,std_Vec { x: [("a", std.Some{0})] }}
NewAllocationOpt{3,std_Vec { x: [("a", std.Some{0}), ("b", std.None{})] }}
NewAllocationOpt{4,std_Vec { x: [("a", std.Some{0}), ("b", std.Some{1})] }}
NewAllocationOpt{5,std_Vec { x: [("a", std.Some{1000}), ("b", std.Some{1001})] }}
NewAllocationOpt{5,std_Vec { x: [("a", std.Some{4294967294}), ("b", std.Some{4294967295})] }}
NewAllocationOpt{6,std_Vec { x: [("a", std.Some{4294967292}), ("b", std.Some{4294967293})] }}
NewAllocationOpt{7,std_Vec { x: [("a", std.Some{0}), ("b", std.Some{1})] }}
NewAllocationOpt{8,std_Vec { x: [("a", std.Some{0}), ("b", std.Some{1}), ("c", std.Some{2}), ("d", std.Some{3}), ("e", std.Some{4}), ("f", std.Some{5})] }}
NewAllocationOpt{9,std_Vec { x: [("x", std.Some{10001}), ("b", std.Some{10002}), ("c", std.Some{10003}), ("d", std.Some{10004}), ("e", std.Some{10005}), ("z", std.Some{10006})] }}
NewAllocationOpt{10,std_Vec { x: [("x", std.Some{1}), ("b", std.Some{2}), ("c", std.Some{3}), ("d", std.Some{4}), ("e", std.Some{5}), ("z", std.Some{6})] }}
NewAllocationOpt{11,std_Vec { x: [("x", std.Some{6}), ("b", std.Some{7}), ("c", std.Some{8}), ("d", std.Some{9}), ("e", std.Some{10}), ("z", std.Some{0})] }}
NewAllocationOpt{12,std_Vec { x: [("x", std.Some{6}), ("b", std.Some{7}), ("c", std.Some{8}), ("d", std.Some{9}), ("e", std.Some{10}), ("z", std.Some{0}), ("p", std.Some{2}), ("q", std.Some{4})] }}
NewAllocationOpt{13,std_Vec { x: [("x", std.Some{6}), ("b", std.Some{7}), ("c", std.Some{8}), ("d", std.Some{9}), ("e", std.Some{10}), ("z", std.Some{0}), ("p", std.Some{2}), ("q", std.Some{4}), ("r", std.None{})] }}
NewAllocationOpt{14,std_Vec { x: [("x", std.Some{4294967286}), ("b", std.Some{4294967288}), ("c", std.Some{4294967290}), ("d", std.Some{4294967291}), ("e", std.Some{4294967292}), ("z", std.Some{4294967293}), ("p", std.Some{4294967294}), ("q", std.None{}), ("r", std.None{})] }}
NewAllocationOpt{15,std_Vec { x: [("x", std.Some{4294967286}), ("b", std.Some{4294967287}), ("c", std.Some{4294967288}), ("d", std.Some{4294967289}), ("e", std.Some{4294967290}), ("z", std.Some{4294967291}), ("p", std.Some{4294967292}), ("q", std.Some{4294967293}), ("r", std.Some{4294967294})] }}
NewAllocationOpt{16,std_Vec { x: [("x", std.Some{10}), ("b", std.Some{12}), ("c", std.Some{14}), ("d", std.Some{15}), ("e", std.Some{16}), ("z", std.Some{17}), ("p", std.Some{18}), ("q", std.Some{19}), ("r", std.None{})] }}
NewAllocationOpt{17,std_Vec { x: [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})] }}
NewAllocationOpt{18,std_Vec { x: [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})] }}
NewAllocationOpt{19,std_Vec { x: [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})] }}
NewAllocationOpt{20,std_Vec { x: [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})] }}
NewAllocationOpt{21,std_Vec { x: [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})] }}
Adjusted
Adjusted{1,std_Vec { x: [] }}
Adjusted{2,std_Vec { x: [("a", 0)] }}
Adjusted{3,std_Vec { x: [("a", 0)] }}
Adjusted{4,std_Vec { x: [("a", 0), ("b", 1)] }}
Adjusted{5,std_Vec { x: [("a", 1000), ("b", 1001)] }}
Adjusted{5,std_Vec { x: [("a", 4294967294), ("b", 4294967295)] }}
Adjusted{6,std_Vec { x: [("a", 4294967292), ("b", 4294967293)] }}
Adjusted{7,std_Vec { x: [("a", 0), ("b", 1)] }}
Adjusted{8,std_Vec { x: [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)] }}
Adjusted{9,std_Vec { x: [("x", 0), ("b", 10001), ("c", 10002), ("d", 10003), ("e", 10004), ("z", 10000)] }}
Adjusted{10,std_Vec { x: [("x", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("z", 10000)] }}
Adjusted{11,std_Vec { x: [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5)] }}
Adjusted{12,std_Vec { x: [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0)] }}
Adjusted{13,std_Vec { x: [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0), ("r", 2)] }}
Adjusted{14,std_Vec { x: [("x", 4294967287), ("b", 4294967286), ("c", 4294967288), ("d", 4294967290), ("e", 4294967291), ("z", 4294967295), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)] }}
Adjusted{15,std_Vec { x: [("x", 16777207), ("b", 4294967286), ("c", 4294967287), ("d", 4294967288), ("e", 4294967289), ("z", 16777215), ("p", 4294967290), ("q", 4294967291), ("r", 4294967292)] }}
Adjusted{16,std_Vec { x: [("x", 11), ("b", 10), ("c", 12), ("d", 14), ("e", 15), ("z", 20), ("p", 16), ("q", 17), ("r", 18)] }}
Adjusted{17,std_Vec { x: [("x", 10), ("z", 12)] }}
Adjusted{18,std_Vec { x: [("x", 4294967293), ("z", 4294967295)] }}
Adjusted{19,std_Vec { x: [("x", 0), ("z", 2)] }}
Adjusted{20,std_Vec { x: [("x", 0), ("z", 2)] }}
Adjusted{21,std_Vec { x: [("x", 0), ("z", 2)] }}
YX
YX{10,1}
YX{20,2}
YX{30,3}
YX{40,4}
SCCLabel
(2, 2)
(3, 2)
(4, 2)
(5, 5)
(6, 5)
(7, 5)
ConcatString
ConcatString{"Foo bar"}
ConcatString{"Foo world"}
ConcatString{"Hello, bar"}
ConcatString{"Hello, world"}
StringOrd
StringOrd{"Foo ",3}
StringOrd{"Foo bar",6}
StringOrd{"Foo world",7}
StringOrd{"Hello, ",2}
StringOrd{"Hello, bar",4}
StringOrd{"Hello, world",5}
CMethod
CMethod{"bar","foo"}
CMethod{"buzz","foo"}
CMethod{"hello","world"}
DMethod
DMethod{"bar","foo"}
DMethod{"buzz","foo"}
DMethod{"hello","world"}
Power3
Power3{0}
Power3{1}
Power3{8}
Power3{27}
Power3{64}
RegexMatch
RegexMatch{"(?i)a+(?-i)b+","AaAaAbbBBBb",true}
RegexMatch{"[0-9]{3}-[0-9]{3}-[0-9]{4}","111-222-333",false}
RegexMatch{"[0-9]{3}-[0-9]{3}-[0-9]{4}","111-222-3333",true}
RegexMatch{"[0-9]{3}-[0-9]{3}-[0-9]{4}","phone: 111-222-3333",true}
RegexMatch{"^[0-9]{4}-[0-9]{2}-[0-9]{2}$","2014-01-01",true}
RegexMatch{"^[0-9]{4}-[0-9]{2}-[0-9]{2}$","2014-0101",false}
RegexMatch{"a+b+","AaAaAbbBBBb",false}
RegexMatch{"a+b+","aaaaabbbbbb",true}
Arithm
Arithm{0}
Arithm{1}
Arithm{2}
Arithm{3}
Arithm{4}
Arithm{5}
Arithm{6}
Arithm{7}
Arithm{8}
Arithm{9}
Arithm{10}
Arithm{11}
Arithm{12}
Arithm{13}
Arithm{14}
Signed
Signed{0}
Signed{1}
Signed{2}
Signed{3}
Signed{4}
Signed{5}
Signed{6}
Signed{7}
Signed{8}
Signed{9}
Signed{10}
Cast_u32
Cast_u32{"(100: signed<32>) as bit<32>",100,100}
Cast_u32{"(32'sd0 - 32'sd10) as bit<32>",4294967286,4294967286}
Cast_u32{"128'd100 as bit<32>",100,100}
Cast_u32{"128'hffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"16'd100  as bit<32>",100,100}
Cast_u32{"256'd100 as bit<32>",100,100}
Cast_u32{"256'hffffffffffffffffffffffffffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"32'd100  as bit<32>",100,100}
Cast_u32{"64'hffffffffffff as bit<32>",4294967295,4294967295}
Cast_u32{"8'd100   as bit<32>",100,100}
Cast_s32
Cast_s32{"(100: bit<32>) as signed<32>",100,100}
Cast_s32{"128'sd100 as signed<32>",100,100}
Cast_s32{"128'shffffffffffffffffffff as signed<32>",-1,-1}
Cast_s32{"16'sd100  as signed<32>",100,100}
Cast_s32{"32'sd100  as signed<32>",100,100}
Cast_s32{"64'shffffffffffff as signed<32>",-1,-1}
Cast_s32{"8'sd100   as signed<32>",100,100}
Cast_u24
Cast_u24{"(100: signed<32>) as bit<32> as bit<24>",100,100}
Cast_u24{"(32'sd0 - 32'sd10) as bit<32> as bit<24>",16777206,16777206}
Cast_u24{"128'd100 as bit<24>",100,100}
Cast_u24{"128'hffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"16'd100  as bit<24>",100,100}
Cast_u24{"24'd100  as bit<24>",100,100}
Cast_u24{"256'd100 as bit<24>",100,100}
Cast_u24{"256'hffffffffffffffffffffffffffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"32'd100  as bit<24>",100,100}
Cast_u24{"64'hffffffffffff as bit<24>",16777215,16777215}
Cast_u24{"8'd100   as bit<24>",100,100}
Cast_u256
Cast_u256{"(100: signed<32>) as bit<32> as bit<256>",100,100}
Cast_u256{"(32'sd0 - 32'sd10) as bit<32> as bit<256>",4294967286,4294967286}
Cast_u256{"128'd100 as bit<256>",100,100}
Cast_u256{"128'hffffffffffffffffffff as bit<256>",1208925819614629174706175,1208925819614629174706175}
Cast_u256{"16'd100  as bit<256>",100,100}
Cast_u256{"24'd100  as bit<256>",100,100}
Cast_u256{"256'd100 as bit<256>",100,100}
Cast_u256{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>",115792089237316195423570985008687907853269984665640564039457584007913129639930,115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{"32'd100  as bit<256>",100,100}
Cast_u256{"512'd100 as bit<256>",100,100}
Cast_u256{"8'd100   as bit<256>",100,100}
Cast_bigint
Cast_bigint{"(32'sd0 - 32'sd10) as bigint",-10,-10}
Cast_bigint{"128'd100 as bigint",100,100}
Cast_bigint{"16'd100  as bigint",100,100}
Cast_bigint{"24'd100  as bigint",100,100}
Cast_bigint{"256'd100 as bigint",100,100}
Cast_bigint{"264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint",29642774844752946028434172162224104410437116074403984394101141506025761187823610,29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{"32'd100  as bigint",100,100}
Cast_bigint{"512'd100 as bigint",100,100}
Cast_bigint{"8'd100   as bigint",100,100}
UMinus_s32
UMinus_s32{"-(-32'sd100)",100}
UMinus_s32{"-32'sd100",-100}
UMinus_s32{"-32768",-32768}
UMinus_bigint
UMinus_bigint{"- -100",100}
UMinus_bigint{"-100",-100}
UMinus_bigint{"-32768",-32768}
