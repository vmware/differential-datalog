Metro test
Answer:
Answer{.x = "Chatelet"}: +1
Answer{.x = "Louvres"}: +1
Answer{.x = "Odeon"}: +1
Answer{.x = "Palais Royal"}: +1
Answer{.x = "St.Germain"}: +1
Answer{.x = "St.Michel"}: +1
Reach:
Reach{.s1 = "Chatelet", .s2 = "Chatelet"}: +1
Reach{.s1 = "Chatelet", .s2 = "Louvres"}: +1
Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}: +1
Reach{.s1 = "Chatelet", .s2 = "St.Michel"}: +1
Reach{.s1 = "Concorde", .s2 = "Tuileries"}: +1
Reach{.s1 = "Louvres", .s2 = "Chatelet"}: +1
Reach{.s1 = "Louvres", .s2 = "Louvres"}: +1
Reach{.s1 = "Louvres", .s2 = "Palais Royal"}: +1
Reach{.s1 = "Odeon", .s2 = "Chatelet"}: +1
Reach{.s1 = "Odeon", .s2 = "Louvres"}: +1
Reach{.s1 = "Odeon", .s2 = "Odeon"}: +1
Reach{.s1 = "Odeon", .s2 = "Palais Royal"}: +1
Reach{.s1 = "Odeon", .s2 = "St.Germain"}: +1
Reach{.s1 = "Odeon", .s2 = "St.Michel"}: +1
Reach{.s1 = "Palais Royal", .s2 = "Louvres"}: +1
Reach{.s1 = "Palais-Royal", .s2 = "Concorde"}: +1
Reach{.s1 = "Palais-Royal", .s2 = "Palais-Royal"}: +1
Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}: +1
Reach{.s1 = "St.Germain", .s2 = "Chatelet"}: +1
Reach{.s1 = "St.Germain", .s2 = "Louvres"}: +1
Reach{.s1 = "St.Germain", .s2 = "Odeon"}: +1
Reach{.s1 = "St.Germain", .s2 = "Palais Royal"}: +1
Reach{.s1 = "St.Germain", .s2 = "St.Germain"}: +1
Reach{.s1 = "St.Germain", .s2 = "St.Michel"}: +1
Reach{.s1 = "St.Michel", .s2 = "Chatelet"}: +1
Reach{.s1 = "St.Michel", .s2 = "Louvres"}: +1
Reach{.s1 = "St.Michel", .s2 = "Odeon"}: +1
Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}: +1
Reach{.s1 = "St.Michel", .s2 = "St.Michel"}: +1
Reach{.s1 = "Tuileries", .s2 = "Concorde"}: +1
Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}: +1
Reach{.s1 = "Tuileries", .s2 = "Tuileries"}: +1
Answer:
Answer{.x = "Chatelet"}
Answer{.x = "Louvres"}
Answer{.x = "Odeon"}
Answer{.x = "Palais Royal"}
Answer{.x = "St.Germain"}
Answer{.x = "St.Michel"}

Arithm:
Arithm{.n = 0}
Arithm{.n = 1}
Arithm{.n = 2}
Arithm{.n = 3}
Arithm{.n = 4}
Arithm{.n = 5}
Arithm{.n = 6}
Arithm{.n = 7}
Arithm{.n = 8}
Arithm{.n = 9}
Arithm{.n = 10}
Arithm{.n = 11}
Arithm{.n = 12}
Arithm{.n = 13}
Arithm{.n = 14}

BigintVectors:
BigintVectors{.expr = "double_evens(1,2,-1,4)", .vec = [4]}
BigintVectors{.expr = "double_evens(1,2,0,4)", .vec = [4]}
BigintVectors{.expr = "filter_C0(C0{1}, C1{2}, C1{0}, C1{3})", .vec = [2]}
BigintVectors{.expr = "filter_gt((10, 20, 30), 15)", .vec = [20, 30]}

Cast_bigint:
Cast_bigint{.description = "(32'sd0 - 32'sd10) as bigint", .expected = -10, .actual = -10}
Cast_bigint{.description = "128'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "16'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "24'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "256'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint", .expected = 29642774844752946028434172162224104410437116074403984394101141506025761187823610, .actual = 29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{.description = "32'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "512'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "8'd100   as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "int_from_d(64'f3.5)", .expected = 3, .actual = 3}
Cast_bigint{.description = "int_from_f(32'f3.5)", .expected = 3, .actual = 3}

Cast_double:
Cast_double{.description = "128'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "16'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "24'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "256'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as double", .expected = 29642774844752946000000000000000000000000000000000000000000000000000000000000000, .actual = 29642774844752946000000000000000000000000000000000000000000000000000000000000000}
Cast_double{.description = "32'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "32'f3.5  as double", .expected = 3.5, .actual = 3.5}
Cast_double{.description = "512'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "64'f3.5  as double", .expected = 3.5, .actual = 3.5}
Cast_double{.description = "8'd100   as double", .expected = 100, .actual = 100}

Cast_float:
Cast_float{.description = "-16'sd100  as float", .expected = -100, .actual = -100}
Cast_float{.description = "-32'sd100  as float", .expected = -100, .actual = -100}
Cast_float{.description = "128'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "16'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "16'sd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "24'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "256'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as float", .expected = NaN, .actual = NaN}
Cast_float{.description = "32'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "32'f3.5  as float", .expected = 3.5, .actual = 3.5}
Cast_float{.description = "32'sd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "512'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "64'f3.5  as float", .expected = 3.5, .actual = 3.5}
Cast_float{.description = "8'd100   as float", .expected = 100, .actual = 100}

Cast_s128:
Cast_s128{.description = "('hff000000000000000000000000000000ff: bigint as signed<8>)", .expected = 255, .actual = 255}
Cast_s128{.description = "('hffffffffffffffffffffffffffffffffff: bigint as signed<128>)", .expected = -1, .actual = -1}
Cast_s128{.description = "(-1: bigint as signed<128>)", .expected = -1, .actual = -1}

Cast_s32:
Cast_s32{.description = "('hff000000ff: bigint as signed<32>)", .expected = 255, .actual = 255}
Cast_s32{.description = "('hffffffffff: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(-1: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(100: bit<32>) as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'sd100 as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'shffffffffffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "16'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "32'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "64'shffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "8'sd100   as signed<32>", .expected = 100, .actual = 100}

Cast_s8:
Cast_s8{.description = "('hff0000000f: bigint as signed<8>)", .expected = 15, .actual = 15}
Cast_s8{.description = "('hffffffffff: bigint as signed<8>)", .expected = -1, .actual = -1}
Cast_s8{.description = "(-1: bigint as signed<8>)", .expected = -1, .actual = -1}

Cast_u24:
Cast_u24{.description = "(100: signed<32>) as bit<32> as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<24>", .expected = 16777206, .actual = 16777206}
Cast_u24{.description = "128'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "128'hffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "16'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "24'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "32'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "64'hffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "8'd100   as bit<24>", .expected = 100, .actual = 100}

Cast_u256:
Cast_u256{.description = "(100: signed<32>) as bit<32> as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<256>", .expected = 4294967286, .actual = 4294967286}
Cast_u256{.description = "128'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "128'hffffffffffffffffffff as bit<256>", .expected = 1208925819614629174706175, .actual = 1208925819614629174706175}
Cast_u256{.description = "16'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "24'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "256'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>", .expected = 115792089237316195423570985008687907853269984665640564039457584007913129639930, .actual = 115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{.description = "32'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "512'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "8'd100   as bit<256>", .expected = 100, .actual = 100}

Cast_u32:
Cast_u32{.description = "(100: signed<32>) as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "(32'sd0 - 32'sd10) as bit<32>", .actual = 4294967286, .expected = 4294967286}
Cast_u32{.description = "128'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "128'hffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "16'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "32'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "64'hffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "8'd100   as bit<32>", .actual = 100, .expected = 100}

Compare:
Compare{.label = "\"\" >= \"a\"", .value = false}
Compare{.label = "(1, 2) < (1, 4)", .value = true}
Compare{.label = "(1, 2) < (3, 4)", .value = true}
Compare{.label = "(1, 2) >= (3, 4)", .value = false}
Compare{.label = "5 <= 3", .value = false}
Compare{.label = "C0{32'd3} < C0{32'd4}", .value = true}
Compare{.label = "C0{32'd3} < C1{32'd4}", .value = true}
Compare{.label = "C0{32'd3} > C1{32'd4}", .value = false}
Compare{.label = "C{\"a\", \"b\"} < C{\"a\", \"e\"}", .value = true}
Compare{.label = "C{\"a\", \"b\"} > C{\"b\", \"e\"}", .value = false}
Compare{.label = "None < Some{1}", .value = true}
Compare{.label = "Some{0} < Some{1}", .value = true}
Compare{.label = "true >= false", .value = true}

ControlFlow:
ControlFlow{.expr = "all(true, true, false)", .value = "false"}
ControlFlow{.expr = "all(true, true, true)", .value = "true"}
ControlFlow{.expr = "any(false, false, false)", .value = "false"}
ControlFlow{.expr = "any(false, true, false)", .value = "true"}
ControlFlow{.expr = "weird_any(false, false, false)", .value = "false"}
ControlFlow{.expr = "weird_any(false, true, false)", .value = "true"}

Doubles:
Doubles{.s = "-5", .d = -5}
Doubles{.s = "0: double", .d = 0}
Doubles{.s = "10", .d = 8}
Doubles{.s = "5 + 3", .d = 8}
Doubles{.s = "5*3", .d = 15}
Doubles{.s = "5/3", .d = 1.6666666666666667}
Doubles{.s = "64'f5.0", .d = 5}
Doubles{.s = "64'f5e2", .d = 500}
Doubles{.s = "floor_d(64'f0.1)", .d = 0}

Floats:
Floats{.s = "0: float", .f = 0}
Floats{.s = "32'f5.0", .f = 5}
Floats{.s = "32'f5e2", .f = 500}
Floats{.s = "5 + 3", .f = 8}
Floats{.s = "5*3", .f = 15}
Floats{.s = "5/3", .f = 1.6666666}
Floats{.s = "floor_f(32'f0.1)", .f = 0}

J:
J{.b = true}

R7:
R7{.f1 = 1, .f2 = 2}
R7{.f1 = 1, .f2 = 3}
R7Other{}

Reach:
Reach{.s1 = "Chatelet", .s2 = "Chatelet"}
Reach{.s1 = "Chatelet", .s2 = "Louvres"}
Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}
Reach{.s1 = "Chatelet", .s2 = "St.Michel"}
Reach{.s1 = "Concorde", .s2 = "Tuileries"}
Reach{.s1 = "Louvres", .s2 = "Chatelet"}
Reach{.s1 = "Louvres", .s2 = "Louvres"}
Reach{.s1 = "Louvres", .s2 = "Palais Royal"}
Reach{.s1 = "Odeon", .s2 = "Chatelet"}
Reach{.s1 = "Odeon", .s2 = "Louvres"}
Reach{.s1 = "Odeon", .s2 = "Odeon"}
Reach{.s1 = "Odeon", .s2 = "Palais Royal"}
Reach{.s1 = "Odeon", .s2 = "St.Germain"}
Reach{.s1 = "Odeon", .s2 = "St.Michel"}
Reach{.s1 = "Palais Royal", .s2 = "Louvres"}
Reach{.s1 = "Palais-Royal", .s2 = "Concorde"}
Reach{.s1 = "Palais-Royal", .s2 = "Palais-Royal"}
Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
Reach{.s1 = "St.Germain", .s2 = "Chatelet"}
Reach{.s1 = "St.Germain", .s2 = "Louvres"}
Reach{.s1 = "St.Germain", .s2 = "Odeon"}
Reach{.s1 = "St.Germain", .s2 = "Palais Royal"}
Reach{.s1 = "St.Germain", .s2 = "St.Germain"}
Reach{.s1 = "St.Germain", .s2 = "St.Michel"}
Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
Reach{.s1 = "St.Michel", .s2 = "Louvres"}
Reach{.s1 = "St.Michel", .s2 = "Odeon"}
Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}
Reach{.s1 = "St.Michel", .s2 = "St.Michel"}
Reach{.s1 = "Tuileries", .s2 = "Concorde"}
Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}
Reach{.s1 = "Tuileries", .s2 = "Tuileries"}

Sib:
Sib{.s1 = "Alice", .s2 = "Ben"}
Sib{.s1 = "Alice", .s2 = "Bob"}
Sib{.s1 = "Ben", .s2 = "Alice"}
Sib{.s1 = "Ben", .s2 = "Bob"}
Sib{.s1 = "Bob", .s2 = "Alice"}
Sib{.s1 = "Bob", .s2 = "Ben"}

Signed:
Signed{.n = -2147483648}
Signed{.n = 0}
Signed{.n = 1}
Signed{.n = 2}
Signed{.n = 3}
Signed{.n = 4}
Signed{.n = 5}
Signed{.n = 6}
Signed{.n = 7}
Signed{.n = 8}
Signed{.n = 9}
Signed{.n = 10}

Trees:
Trees{.tree = NonLeafNode{.branches = [LeafNode{.v = 300}, NonLeafNode{.branches = [LeafNode{.v = 100}, LeafNode{.v = 200}]}]}}

UMinus_bigint:
UMinus_bigint{.description = "- -100", .n = 100}
UMinus_bigint{.description = "-100", .n = -100}
UMinus_bigint{.description = "-32768", .n = -32768}

UMinus_s32:
UMinus_s32{.description = "-(-32'sd100)", .n = 100}
UMinus_s32{.description = "-32'sd100", .n = -100}
UMinus_s32{.description = "-32768", .n = -32768}

VecTest:
VecTest{.x = []}
VecTest{.x = ["Hello,"]}
VecTest{.x = ["Hello, ", "world!"]}

Rules test
R4:
R3{.f1 = 0, .f2 = true}: +1
R3{.f1 = 1, .f2 = true}: +1
R3{.f1 = 2, .f2 = true}: +1
R3{.f1 = 3, .f2 = true}: +1
R3{.f1 = 4, .f2 = true}: +1
R3{.f1 = 5, .f2 = true}: +1
R3{.f1 = 6, .f2 = true}: +1
R5:
0: +1
1: +1
2: +1
3: +1
4: +1
5: +1
6: +1
R6:
R6{.f = 0}: +1
R6{.f = 1}: +1
R6{.f = 2}: +1
R6{.f = 3}: +1
R6{.f = 4}: +1
R6{.f = 5}: +1
R6{.f = 6}: +1
Answer:
Answer{.x = "Chatelet"}
Answer{.x = "Louvres"}
Answer{.x = "Odeon"}
Answer{.x = "Palais Royal"}
Answer{.x = "St.Germain"}
Answer{.x = "St.Michel"}

Arithm:
Arithm{.n = 0}
Arithm{.n = 1}
Arithm{.n = 2}
Arithm{.n = 3}
Arithm{.n = 4}
Arithm{.n = 5}
Arithm{.n = 6}
Arithm{.n = 7}
Arithm{.n = 8}
Arithm{.n = 9}
Arithm{.n = 10}
Arithm{.n = 11}
Arithm{.n = 12}
Arithm{.n = 13}
Arithm{.n = 14}

BigintVectors:
BigintVectors{.expr = "double_evens(1,2,-1,4)", .vec = [4]}
BigintVectors{.expr = "double_evens(1,2,0,4)", .vec = [4]}
BigintVectors{.expr = "filter_C0(C0{1}, C1{2}, C1{0}, C1{3})", .vec = [2]}
BigintVectors{.expr = "filter_gt((10, 20, 30), 15)", .vec = [20, 30]}

Cast_bigint:
Cast_bigint{.description = "(32'sd0 - 32'sd10) as bigint", .expected = -10, .actual = -10}
Cast_bigint{.description = "128'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "16'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "24'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "256'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint", .expected = 29642774844752946028434172162224104410437116074403984394101141506025761187823610, .actual = 29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{.description = "32'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "512'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "8'd100   as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "int_from_d(64'f3.5)", .expected = 3, .actual = 3}
Cast_bigint{.description = "int_from_f(32'f3.5)", .expected = 3, .actual = 3}

Cast_double:
Cast_double{.description = "128'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "16'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "24'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "256'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as double", .expected = 29642774844752946000000000000000000000000000000000000000000000000000000000000000, .actual = 29642774844752946000000000000000000000000000000000000000000000000000000000000000}
Cast_double{.description = "32'd100  as double", .expected = 100, .actual = 100}
Cast_double{.description = "32'f3.5  as double", .expected = 3.5, .actual = 3.5}
Cast_double{.description = "512'd100 as double", .expected = 100, .actual = 100}
Cast_double{.description = "64'f3.5  as double", .expected = 3.5, .actual = 3.5}
Cast_double{.description = "8'd100   as double", .expected = 100, .actual = 100}

Cast_float:
Cast_float{.description = "-16'sd100  as float", .expected = -100, .actual = -100}
Cast_float{.description = "-32'sd100  as float", .expected = -100, .actual = -100}
Cast_float{.description = "128'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "16'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "16'sd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "24'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "256'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as float", .expected = NaN, .actual = NaN}
Cast_float{.description = "32'd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "32'f3.5  as float", .expected = 3.5, .actual = 3.5}
Cast_float{.description = "32'sd100  as float", .expected = 100, .actual = 100}
Cast_float{.description = "512'd100 as float", .expected = 100, .actual = 100}
Cast_float{.description = "64'f3.5  as float", .expected = 3.5, .actual = 3.5}
Cast_float{.description = "8'd100   as float", .expected = 100, .actual = 100}

Cast_s128:
Cast_s128{.description = "('hff000000000000000000000000000000ff: bigint as signed<8>)", .expected = 255, .actual = 255}
Cast_s128{.description = "('hffffffffffffffffffffffffffffffffff: bigint as signed<128>)", .expected = -1, .actual = -1}
Cast_s128{.description = "(-1: bigint as signed<128>)", .expected = -1, .actual = -1}

Cast_s32:
Cast_s32{.description = "('hff000000ff: bigint as signed<32>)", .expected = 255, .actual = 255}
Cast_s32{.description = "('hffffffffff: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(-1: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(100: bit<32>) as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'sd100 as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'shffffffffffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "16'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "32'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "64'shffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "8'sd100   as signed<32>", .expected = 100, .actual = 100}

Cast_s8:
Cast_s8{.description = "('hff0000000f: bigint as signed<8>)", .expected = 15, .actual = 15}
Cast_s8{.description = "('hffffffffff: bigint as signed<8>)", .expected = -1, .actual = -1}
Cast_s8{.description = "(-1: bigint as signed<8>)", .expected = -1, .actual = -1}

Cast_u24:
Cast_u24{.description = "(100: signed<32>) as bit<32> as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<24>", .expected = 16777206, .actual = 16777206}
Cast_u24{.description = "128'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "128'hffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "16'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "24'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "32'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "64'hffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "8'd100   as bit<24>", .expected = 100, .actual = 100}

Cast_u256:
Cast_u256{.description = "(100: signed<32>) as bit<32> as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<256>", .expected = 4294967286, .actual = 4294967286}
Cast_u256{.description = "128'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "128'hffffffffffffffffffff as bit<256>", .expected = 1208925819614629174706175, .actual = 1208925819614629174706175}
Cast_u256{.description = "16'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "24'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "256'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>", .expected = 115792089237316195423570985008687907853269984665640564039457584007913129639930, .actual = 115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{.description = "32'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "512'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "8'd100   as bit<256>", .expected = 100, .actual = 100}

Cast_u32:
Cast_u32{.description = "(100: signed<32>) as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "(32'sd0 - 32'sd10) as bit<32>", .actual = 4294967286, .expected = 4294967286}
Cast_u32{.description = "128'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "128'hffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "16'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "32'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "64'hffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "8'd100   as bit<32>", .actual = 100, .expected = 100}

Compare:
Compare{.label = "\"\" >= \"a\"", .value = false}
Compare{.label = "(1, 2) < (1, 4)", .value = true}
Compare{.label = "(1, 2) < (3, 4)", .value = true}
Compare{.label = "(1, 2) >= (3, 4)", .value = false}
Compare{.label = "5 <= 3", .value = false}
Compare{.label = "C0{32'd3} < C0{32'd4}", .value = true}
Compare{.label = "C0{32'd3} < C1{32'd4}", .value = true}
Compare{.label = "C0{32'd3} > C1{32'd4}", .value = false}
Compare{.label = "C{\"a\", \"b\"} < C{\"a\", \"e\"}", .value = true}
Compare{.label = "C{\"a\", \"b\"} > C{\"b\", \"e\"}", .value = false}
Compare{.label = "None < Some{1}", .value = true}
Compare{.label = "Some{0} < Some{1}", .value = true}
Compare{.label = "true >= false", .value = true}

ControlFlow:
ControlFlow{.expr = "all(true, true, false)", .value = "false"}
ControlFlow{.expr = "all(true, true, true)", .value = "true"}
ControlFlow{.expr = "any(false, false, false)", .value = "false"}
ControlFlow{.expr = "any(false, true, false)", .value = "true"}
ControlFlow{.expr = "weird_any(false, false, false)", .value = "false"}
ControlFlow{.expr = "weird_any(false, true, false)", .value = "true"}

Doubles:
Doubles{.s = "-5", .d = -5}
Doubles{.s = "0: double", .d = 0}
Doubles{.s = "10", .d = 8}
Doubles{.s = "5 + 3", .d = 8}
Doubles{.s = "5*3", .d = 15}
Doubles{.s = "5/3", .d = 1.6666666666666667}
Doubles{.s = "64'f5.0", .d = 5}
Doubles{.s = "64'f5e2", .d = 500}
Doubles{.s = "floor_d(64'f0.1)", .d = 0}

Floats:
Floats{.s = "0: float", .f = 0}
Floats{.s = "32'f5.0", .f = 5}
Floats{.s = "32'f5e2", .f = 500}
Floats{.s = "5 + 3", .f = 8}
Floats{.s = "5*3", .f = 15}
Floats{.s = "5/3", .f = 1.6666666}
Floats{.s = "floor_f(32'f0.1)", .f = 0}

J:
J{.b = true}

R4:
R3{.f1 = 0, .f2 = true}
R3{.f1 = 1, .f2 = true}
R3{.f1 = 2, .f2 = true}
R3{.f1 = 3, .f2 = true}
R3{.f1 = 4, .f2 = true}
R3{.f1 = 5, .f2 = true}
R3{.f1 = 6, .f2 = true}

R5:
0
1
2
3
4
5
6

R6:
R6{.f = 0}
R6{.f = 1}
R6{.f = 2}
R6{.f = 3}
R6{.f = 4}
R6{.f = 5}
R6{.f = 6}

R7:
R7{.f1 = 1, .f2 = 2}
R7{.f1 = 1, .f2 = 3}
R7Other{}

Reach:
Reach{.s1 = "Chatelet", .s2 = "Chatelet"}
Reach{.s1 = "Chatelet", .s2 = "Louvres"}
Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}
Reach{.s1 = "Chatelet", .s2 = "St.Michel"}
Reach{.s1 = "Concorde", .s2 = "Tuileries"}
Reach{.s1 = "Louvres", .s2 = "Chatelet"}
Reach{.s1 = "Louvres", .s2 = "Louvres"}
Reach{.s1 = "Louvres", .s2 = "Palais Royal"}
Reach{.s1 = "Odeon", .s2 = "Chatelet"}
Reach{.s1 = "Odeon", .s2 = "Louvres"}
Reach{.s1 = "Odeon", .s2 = "Odeon"}
Reach{.s1 = "Odeon", .s2 = "Palais Royal"}
Reach{.s1 = "Odeon", .s2 = "St.Germain"}
Reach{.s1 = "Odeon", .s2 = "St.Michel"}
Reach{.s1 = "Palais Royal", .s2 = "Louvres"}
Reach{.s1 = "Palais-Royal", .s2 = "Concorde"}
Reach{.s1 = "Palais-Royal", .s2 = "Palais-Royal"}
Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
Reach{.s1 = "St.Germain", .s2 = "Chatelet"}
Reach{.s1 = "St.Germain", .s2 = "Louvres"}
Reach{.s1 = "St.Germain", .s2 = "Odeon"}
Reach{.s1 = "St.Germain", .s2 = "Palais Royal"}
Reach{.s1 = "St.Germain", .s2 = "St.Germain"}
Reach{.s1 = "St.Germain", .s2 = "St.Michel"}
Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
Reach{.s1 = "St.Michel", .s2 = "Louvres"}
Reach{.s1 = "St.Michel", .s2 = "Odeon"}
Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}
Reach{.s1 = "St.Michel", .s2 = "St.Michel"}
Reach{.s1 = "Tuileries", .s2 = "Concorde"}
Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}
Reach{.s1 = "Tuileries", .s2 = "Tuileries"}

Sib:
Sib{.s1 = "Alice", .s2 = "Ben"}
Sib{.s1 = "Alice", .s2 = "Bob"}
Sib{.s1 = "Ben", .s2 = "Alice"}
Sib{.s1 = "Ben", .s2 = "Bob"}
Sib{.s1 = "Bob", .s2 = "Alice"}
Sib{.s1 = "Bob", .s2 = "Ben"}

Signed:
Signed{.n = -2147483648}
Signed{.n = 0}
Signed{.n = 1}
Signed{.n = 2}
Signed{.n = 3}
Signed{.n = 4}
Signed{.n = 5}
Signed{.n = 6}
Signed{.n = 7}
Signed{.n = 8}
Signed{.n = 9}
Signed{.n = 10}

Trees:
Trees{.tree = NonLeafNode{.branches = [LeafNode{.v = 300}, NonLeafNode{.branches = [LeafNode{.v = 100}, LeafNode{.v = 200}]}]}}

UMinus_bigint:
UMinus_bigint{.description = "- -100", .n = 100}
UMinus_bigint{.description = "-100", .n = -100}
UMinus_bigint{.description = "-32768", .n = -32768}

UMinus_s32:
UMinus_s32{.description = "-(-32'sd100)", .n = 100}
UMinus_s32{.description = "-32'sd100", .n = -100}
UMinus_s32{.description = "-32768", .n = -32768}

VecTest:
VecTest{.x = []}
VecTest{.x = ["Hello,"]}
VecTest{.x = ["Hello, ", "world!"]}

Table12:
Table12{.id = 20695836920908937261915266253713563738, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}: +1
Table12{.id = 81692126345696542188923640651411714412, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}: +1
Table12{.id = 137151609739491206170748566711757625861, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}: +1
Table12{.id = 173592105249357153805573863620167017533, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}: +1
Table12{.id = 173670172741911619502105830072953828992, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}: +1
Table12{.id = 211727904196777888792921590151204575764, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}: +1
Table12{.id = 218334107078988268330177571792522447425, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}: +1
Table12{.id = 258101594679877739861006822360175003366, .name = "buzzzzzzzz", .f3 = S{.f1 = (true, true), .f2 = 5}}: +1
Table12{.id = 312560568469280405643575197132576203606, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}: +1
Table12{.id = 324905179504175058909924909437678210347, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}: +1
Table12{.id = 20695836920908937261915266253713563738, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
Table12{.id = 81692126345696542188923640651411714412, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
Table12{.id = 137151609739491206170748566711757625861, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
Table12{.id = 173592105249357153805573863620167017533, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
Table12{.id = 173670172741911619502105830072953828992, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
Table12{.id = 211727904196777888792921590151204575764, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
Table12{.id = 218334107078988268330177571792522447425, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
Table12{.id = 258101594679877739861006822360175003366, .name = "buzzzzzzzz", .f3 = S{.f1 = (true, true), .f2 = 5}}
Table12{.id = 312560568469280405643575197132576203606, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
Table12{.id = 324905179504175058909924909437678210347, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
Rel3:
Rel3{.x = 0, .y = IP4{.ip4 = 100}, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}: +1
Rel3:
Rel3{.x = 0, .y = IP4{.ip4 = 100}, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}
Aggregate1:
Aggregate1{.x = "a", .cnt = 4}: +1
Aggregate1{.x = "b", .cnt = 3}: +1
Aggregate2:
Aggregate2{.x = "a", .set = ["1", "2", "3", "a"]}: +1
Aggregate2{.x = "b", .set = ["1", "2", "3"]}: +1
Aggregate3:
Aggregate3{.x = "a", .vec = ["1", "2", "3", "a"]}: +1
Aggregate3{.x = "b", .vec = ["1", "2", "3"]}: +1
Aggregate4:
Aggregate4{.x = "a", .map = [("a", "a")]}: +1
Aggregate4{.x = "b", .map = [("b", "3")]}: +1
AggregateByX:
AggregateByX{.x = "a", .cnt = 3}: +1
AggregateByX{.x = "b", .cnt = 3}: +1
AggregateCnt:
AggregateCnt{.cnt = 7}: +1
AggregateCnt2:
AggregateCnt2{.cnt = 7}: +1
AggregateCnt3:
AggregateCnt3{.cnt = 5}: +1
Concat:
Concat{.s = "a-z:123"}: +1
Concat{.s = "b-z:123"}: +1
Counts1:
Counts1{.x = "a", .occurrences = 1}: +1
Counts1{.x = "b", .occurrences = 0}: +1
Disaggregate:
Disaggregate{.x = "a", .y = "1"}: +1
Disaggregate{.x = "a", .y = "2"}: +1
Disaggregate{.x = "a", .y = "3"}: +1
Disaggregate{.x = "a", .y = "a"}: +1
Disaggregate{.x = "b", .y = "1"}: +1
Disaggregate{.x = "b", .y = "2"}: +1
Disaggregate{.x = "b", .y = "3"}: +1
Symmetric1:
Symmetric1{.x = "a", .sym = true}: +1
Symmetric1{.x = "b", .sym = false}: +1
Aggregate1
Aggregate1{.x = "a", .cnt = 4}
Aggregate1{.x = "b", .cnt = 3}
AggregateCnt
AggregateCnt{.cnt = 7}
AggregateCnt2
AggregateCnt2{.cnt = 7}
AggregateCnt3
AggregateCnt3{.cnt = 5}
Aggregate2
Aggregate2{.x = "a", .set = ["1", "2", "3", "a"]}
Aggregate2{.x = "b", .set = ["1", "2", "3"]}
Aggregate3
Aggregate3{.x = "a", .vec = ["1", "2", "3", "a"]}
Aggregate3{.x = "b", .vec = ["1", "2", "3"]}
Aggregate4
Aggregate4{.x = "a", .map = [("a", "a")]}
Aggregate4{.x = "b", .map = [("b", "3")]}
AggregateByX
AggregateByX{.x = "a", .cnt = 3}
AggregateByX{.x = "b", .cnt = 3}
Disaggregate
Disaggregate{.x = "a", .y = "1"}
Disaggregate{.x = "a", .y = "2"}
Disaggregate{.x = "a", .y = "3"}
Disaggregate{.x = "a", .y = "a"}
Disaggregate{.x = "b", .y = "1"}
Disaggregate{.x = "b", .y = "2"}
Disaggregate{.x = "b", .y = "3"}
Sum:
Sum{.x = "a", .sum = 111}: +1
Sum{.x = "b", .sum = 60}: +1
Sum
Sum{.x = "a", .sum = 111}
Sum{.x = "b", .sum = 60}
WithKeyDbg:
WithKeyDbg{.key = 0, .val = "foo"}: +1
WithKeyDbg{.key = 1, .val = "bar"}: +1
WithKeyDbg{.key = 2, .val = "buzz"}: +1
WithKeyDbg
WithKeyDbg{.key = 0, .val = "foo"}
WithKeyDbg{.key = 1, .val = "bar"}
WithKeyDbg{.key = 2, .val = "buzz"}
WithKeyDbg:
WithKeyDbg{.key = 0, .val = "foo"}: -1
WithKeyDbg after deletion by value
WithKeyDbg{.key = 1, .val = "bar"}
WithKeyDbg{.key = 2, .val = "buzz"}
WithKeyDbg:
WithKeyDbg{.key = 1, .val = "bar"}: -1
WithKeyDbg after deletion by key
WithKeyDbg{.key = 2, .val = "buzz"}
WithKeyDbg:
WithKeyDbg{.key = 1, .val = "bar2"}: +1
WithKeyDbg{.key = 2, .val = "buzz"}: -1
WithKeyDbg{.key = 4, .val = "hello"}: +1
WithKeyDbg: +3, -2
WithKeyDbg{.key = 1, .val = "bar2"}
WithKeyDbg{.key = 4, .val = "hello"}
WithKeyDbg:
WithKeyDbg{.key = 1, .val = "bar2"}: -1
WithKeyDbg{.key = 1, .val = "bar3"}: +1
Innocent:
Innocent{.name = "Bill Smith"}: +1
Innocent{.name = "John Doe"}: +1
Innocent
Innocent{.name = "Bill Smith"}
Innocent{.name = "John Doe"}
ValidDestination:
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}: +1
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}: +1
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}: +1
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}: +1
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}: +1
ValidDestination
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}
ValidDestination{.addr = ip_addr_t{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}
HostAddress:
HostAddress{.host = 0, .addr = "10.10.10.101"}: +1
HostAddress{.host = 0, .addr = "10.10.10.102"}: +1
HostAddress{.host = 0, .addr = "10.10.10.103"}: +1
HostAddress{.host = 0, .addr = "10.10.10.104"}: +1
HostAddress{.host = 0, .addr = "10.10.10.105"}: +1
HostAddress{.host = 1, .addr = "192.168.0.1"}: +1
HostAddress{.host = 1, .addr = "192.168.0.2"}: +1
HostAddress{.host = 1, .addr = "192.168.0.3"}: +1
HostAddress{.host = 0, .addr = "10.10.10.101"}
HostAddress{.host = 0, .addr = "10.10.10.102"}
HostAddress{.host = 0, .addr = "10.10.10.103"}
HostAddress{.host = 0, .addr = "10.10.10.104"}
HostAddress{.host = 0, .addr = "10.10.10.105"}
HostAddress{.host = 1, .addr = "192.168.0.1"}
HostAddress{.host = 1, .addr = "192.168.0.2"}
HostAddress{.host = 1, .addr = "192.168.0.3"}
ExternalId:
ExternalId{.host = 0, .id = ("a", "1")}: +1
ExternalId{.host = 0, .id = ("b", "2")}: +1
ExternalId{.host = 0, .id = ("c", "3")}: +1
ExternalId{.host = 0, .id = ("c", "4")}: +1
ExternalId{.host = 0, .id = ("d", "5")}: +1
ExternalId{.host = 0, .id = ("e", "6")}: +1
ExternalId{.host = 0, .id = ("a", "1")}
ExternalId{.host = 0, .id = ("b", "2")}
ExternalId{.host = 0, .id = ("c", "3")}
ExternalId{.host = 0, .id = ("c", "4")}
ExternalId{.host = 0, .id = ("d", "5")}
ExternalId{.host = 0, .id = ("e", "6")}
Allocation:
Allocation{.name = "a", .id = "1", .x = 30}: +1
Allocation{.name = "a", .id = "2", .x = 31}: +1
Allocation{.name = "a", .id = "3", .x = 50}: +1
Allocation{.name = "a", .id = "4", .x = 51}: +1
Allocation{.name = "a", .id = "5", .x = 52}: +1
Allocation{.name = "b", .id = "1", .x = 10000}: +1
Allocation{.name = "b", .id = "3", .x = 16777215}: +1
Allocation{.name = "b", .id = "4", .x = 1}: +1
Allocation{.name = "b", .id = "5", .x = 2}: +1
Allocation{.name = "a", .id = "1", .x = 30}
Allocation{.name = "a", .id = "2", .x = 31}
Allocation{.name = "a", .id = "3", .x = 50}
Allocation{.name = "a", .id = "4", .x = 51}
Allocation{.name = "a", .id = "5", .x = 52}
Allocation{.name = "b", .id = "1", .x = 10000}
Allocation{.name = "b", .id = "3", .x = 16777215}
Allocation{.name = "b", .id = "4", .x = 1}
Allocation{.name = "b", .id = "5", .x = 2}
Allocation:
Allocation{.name = "a", .id = "1", .x = 30}: -1
Allocation{.name = "a", .id = "2", .x = 31}: -1
Allocation{.name = "a", .id = "3", .x = 50}: -1
Allocation{.name = "a", .id = "4", .x = 51}: -1
Allocation{.name = "a", .id = "5", .x = 52}: -1
Allocation{.name = "b", .id = "1", .x = 10000}: -1
Allocation{.name = "b", .id = "3", .x = 16777215}: -1
Allocation{.name = "b", .id = "4", .x = 1}: -1
Allocation{.name = "b", .id = "5", .x = 2}: -1
Allocation after clear
Filtered:
Filtered{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}: +1
Filtered2:
Filtered2{.r = Referee2{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}}: +1
Filtered3:
Filtered3{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}: +1
Referee:
Referee{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}: +1
Referee2:
Referee2{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}: +1
Referee
Referee{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}
Filtered
Filtered{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}
Referee2
Referee2{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}
Filtered2
Filtered2{.r = Referee2{.r = Referenced{.x = true, .y = std.Some{.x = "hello"}}}}
Adjusted:
Adjusted{.id = 1, .alloc = []}: +1
Adjusted{.id = 2, .alloc = [("a", 0)]}: +1
Adjusted{.id = 3, .alloc = [("a", 0)]}: +1
Adjusted{.id = 4, .alloc = [("a", 0), ("b", 1)]}: +1
Adjusted{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}: +1
Adjusted{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}: +1
Adjusted{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}: +1
Adjusted{.id = 7, .alloc = [("a", 0), ("b", 1)]}: +1
Adjusted{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}: +1
Adjusted{.id = 9, .alloc = [("x", 0), ("b", 10001), ("c", 10002), ("d", 10003), ("e", 10004), ("z", 10000)]}: +1
Adjusted{.id = 10, .alloc = [("x", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("z", 10000)]}: +1
Adjusted{.id = 11, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5)]}: +1
Adjusted{.id = 12, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0)]}: +1
Adjusted{.id = 13, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0), ("r", 2)]}: +1
Adjusted{.id = 14, .alloc = [("x", 4294967287), ("b", 4294967286), ("c", 4294967288), ("d", 4294967290), ("e", 4294967291), ("z", 4294967295), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}: +1
Adjusted{.id = 15, .alloc = [("x", 16777207), ("b", 4294967286), ("c", 4294967287), ("d", 4294967288), ("e", 4294967289), ("z", 16777215), ("p", 4294967290), ("q", 4294967291), ("r", 4294967292)]}: +1
Adjusted{.id = 16, .alloc = [("x", 11), ("b", 10), ("c", 12), ("d", 14), ("e", 15), ("z", 20), ("p", 16), ("q", 17), ("r", 18)]}: +1
Adjusted{.id = 17, .alloc = [("x", 10), ("z", 12)]}: +1
Adjusted{.id = 18, .alloc = [("x", 4294967293), ("z", 4294967295)]}: +1
Adjusted{.id = 19, .alloc = [("x", 0), ("z", 2)]}: +1
Adjusted{.id = 20, .alloc = [("x", 0), ("z", 2)]}: +1
Adjusted{.id = 21, .alloc = [("x", 0), ("z", 2)]}: +1
NewAllocation:
NewAllocation{.id = 1, .alloc = []}: +1
NewAllocation{.id = 2, .alloc = [("a", 0)]}: +1
NewAllocation{.id = 3, .alloc = [("a", 0)]}: +1
NewAllocation{.id = 4, .alloc = [("a", 0), ("b", 1)]}: +1
NewAllocation{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}: +1
NewAllocation{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}: +1
NewAllocation{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}: +1
NewAllocation{.id = 7, .alloc = [("a", 0), ("b", 1)]}: +1
NewAllocation{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}: +1
NewAllocation{.id = 9, .alloc = [("x", 10001), ("b", 10002), ("c", 10003), ("d", 10004), ("e", 10005), ("z", 10006)]}: +1
NewAllocation{.id = 10, .alloc = [("x", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("z", 6)]}: +1
NewAllocation{.id = 11, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0)]}: +1
NewAllocation{.id = 12, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}: +1
NewAllocation{.id = 13, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}: +1
NewAllocation{.id = 14, .alloc = [("x", 4294967286), ("b", 4294967288), ("c", 4294967290), ("d", 4294967291), ("e", 4294967292), ("z", 4294967293), ("p", 4294967294)]}: +1
NewAllocation{.id = 15, .alloc = [("x", 4294967286), ("b", 4294967287), ("c", 4294967288), ("d", 4294967289), ("e", 4294967290), ("z", 4294967291), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}: +1
NewAllocation{.id = 16, .alloc = [("x", 10), ("b", 12), ("c", 14), ("d", 15), ("e", 16), ("z", 17), ("p", 18), ("q", 19)]}: +1
NewAllocation{.id = 17, .alloc = []}: +1
NewAllocation{.id = 18, .alloc = []}: +1
NewAllocation{.id = 19, .alloc = []}: +1
NewAllocation{.id = 20, .alloc = []}: +1
NewAllocation{.id = 21, .alloc = []}: +1
NewAllocationOpt:
NewAllocationOpt{.id = 1, .alloc = []}: +1
NewAllocationOpt{.id = 2, .alloc = [("a", std.Some{.x = 0})]}: +1
NewAllocationOpt{.id = 3, .alloc = [("a", std.Some{.x = 0}), ("b", std.None{})]}: +1
NewAllocationOpt{.id = 4, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1})]}: +1
NewAllocationOpt{.id = 5, .alloc = [("a", std.Some{.x = 1000}), ("b", std.Some{.x = 1001})]}: +1
NewAllocationOpt{.id = 5, .alloc = [("a", std.Some{.x = 4294967294}), ("b", std.Some{.x = 4294967295})]}: +1
NewAllocationOpt{.id = 6, .alloc = [("a", std.Some{.x = 4294967292}), ("b", std.Some{.x = 4294967293})]}: +1
NewAllocationOpt{.id = 7, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1})]}: +1
NewAllocationOpt{.id = 8, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1}), ("c", std.Some{.x = 2}), ("d", std.Some{.x = 3}), ("e", std.Some{.x = 4}), ("f", std.Some{.x = 5})]}: +1
NewAllocationOpt{.id = 9, .alloc = [("x", std.Some{.x = 10001}), ("b", std.Some{.x = 10002}), ("c", std.Some{.x = 10003}), ("d", std.Some{.x = 10004}), ("e", std.Some{.x = 10005}), ("z", std.Some{.x = 10006})]}: +1
NewAllocationOpt{.id = 10, .alloc = [("x", std.Some{.x = 1}), ("b", std.Some{.x = 2}), ("c", std.Some{.x = 3}), ("d", std.Some{.x = 4}), ("e", std.Some{.x = 5}), ("z", std.Some{.x = 6})]}: +1
NewAllocationOpt{.id = 11, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0})]}: +1
NewAllocationOpt{.id = 12, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0}), ("p", std.Some{.x = 2}), ("q", std.Some{.x = 4})]}: +1
NewAllocationOpt{.id = 13, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0}), ("p", std.Some{.x = 2}), ("q", std.Some{.x = 4}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 14, .alloc = [("x", std.Some{.x = 4294967286}), ("b", std.Some{.x = 4294967288}), ("c", std.Some{.x = 4294967290}), ("d", std.Some{.x = 4294967291}), ("e", std.Some{.x = 4294967292}), ("z", std.Some{.x = 4294967293}), ("p", std.Some{.x = 4294967294}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 15, .alloc = [("x", std.Some{.x = 4294967286}), ("b", std.Some{.x = 4294967287}), ("c", std.Some{.x = 4294967288}), ("d", std.Some{.x = 4294967289}), ("e", std.Some{.x = 4294967290}), ("z", std.Some{.x = 4294967291}), ("p", std.Some{.x = 4294967292}), ("q", std.Some{.x = 4294967293}), ("r", std.Some{.x = 4294967294})]}: +1
NewAllocationOpt{.id = 16, .alloc = [("x", std.Some{.x = 10}), ("b", std.Some{.x = 12}), ("c", std.Some{.x = 14}), ("d", std.Some{.x = 15}), ("e", std.Some{.x = 16}), ("z", std.Some{.x = 17}), ("p", std.Some{.x = 18}), ("q", std.Some{.x = 19}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 17, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 18, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 19, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 20, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocationOpt{.id = 21, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}: +1
NewAllocation
NewAllocation{.id = 1, .alloc = []}
NewAllocation{.id = 2, .alloc = [("a", 0)]}
NewAllocation{.id = 3, .alloc = [("a", 0)]}
NewAllocation{.id = 4, .alloc = [("a", 0), ("b", 1)]}
NewAllocation{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
NewAllocation{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
NewAllocation{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
NewAllocation{.id = 7, .alloc = [("a", 0), ("b", 1)]}
NewAllocation{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
NewAllocation{.id = 9, .alloc = [("x", 10001), ("b", 10002), ("c", 10003), ("d", 10004), ("e", 10005), ("z", 10006)]}
NewAllocation{.id = 10, .alloc = [("x", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("z", 6)]}
NewAllocation{.id = 11, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0)]}
NewAllocation{.id = 12, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
NewAllocation{.id = 13, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
NewAllocation{.id = 14, .alloc = [("x", 4294967286), ("b", 4294967288), ("c", 4294967290), ("d", 4294967291), ("e", 4294967292), ("z", 4294967293), ("p", 4294967294)]}
NewAllocation{.id = 15, .alloc = [("x", 4294967286), ("b", 4294967287), ("c", 4294967288), ("d", 4294967289), ("e", 4294967290), ("z", 4294967291), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
NewAllocation{.id = 16, .alloc = [("x", 10), ("b", 12), ("c", 14), ("d", 15), ("e", 16), ("z", 17), ("p", 18), ("q", 19)]}
NewAllocation{.id = 17, .alloc = []}
NewAllocation{.id = 18, .alloc = []}
NewAllocation{.id = 19, .alloc = []}
NewAllocation{.id = 20, .alloc = []}
NewAllocation{.id = 21, .alloc = []}
NewAllocationOpt
NewAllocationOpt{.id = 1, .alloc = []}
NewAllocationOpt{.id = 2, .alloc = [("a", std.Some{.x = 0})]}
NewAllocationOpt{.id = 3, .alloc = [("a", std.Some{.x = 0}), ("b", std.None{})]}
NewAllocationOpt{.id = 4, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1})]}
NewAllocationOpt{.id = 5, .alloc = [("a", std.Some{.x = 1000}), ("b", std.Some{.x = 1001})]}
NewAllocationOpt{.id = 5, .alloc = [("a", std.Some{.x = 4294967294}), ("b", std.Some{.x = 4294967295})]}
NewAllocationOpt{.id = 6, .alloc = [("a", std.Some{.x = 4294967292}), ("b", std.Some{.x = 4294967293})]}
NewAllocationOpt{.id = 7, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1})]}
NewAllocationOpt{.id = 8, .alloc = [("a", std.Some{.x = 0}), ("b", std.Some{.x = 1}), ("c", std.Some{.x = 2}), ("d", std.Some{.x = 3}), ("e", std.Some{.x = 4}), ("f", std.Some{.x = 5})]}
NewAllocationOpt{.id = 9, .alloc = [("x", std.Some{.x = 10001}), ("b", std.Some{.x = 10002}), ("c", std.Some{.x = 10003}), ("d", std.Some{.x = 10004}), ("e", std.Some{.x = 10005}), ("z", std.Some{.x = 10006})]}
NewAllocationOpt{.id = 10, .alloc = [("x", std.Some{.x = 1}), ("b", std.Some{.x = 2}), ("c", std.Some{.x = 3}), ("d", std.Some{.x = 4}), ("e", std.Some{.x = 5}), ("z", std.Some{.x = 6})]}
NewAllocationOpt{.id = 11, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0})]}
NewAllocationOpt{.id = 12, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0}), ("p", std.Some{.x = 2}), ("q", std.Some{.x = 4})]}
NewAllocationOpt{.id = 13, .alloc = [("x", std.Some{.x = 6}), ("b", std.Some{.x = 7}), ("c", std.Some{.x = 8}), ("d", std.Some{.x = 9}), ("e", std.Some{.x = 10}), ("z", std.Some{.x = 0}), ("p", std.Some{.x = 2}), ("q", std.Some{.x = 4}), ("r", std.None{})]}
NewAllocationOpt{.id = 14, .alloc = [("x", std.Some{.x = 4294967286}), ("b", std.Some{.x = 4294967288}), ("c", std.Some{.x = 4294967290}), ("d", std.Some{.x = 4294967291}), ("e", std.Some{.x = 4294967292}), ("z", std.Some{.x = 4294967293}), ("p", std.Some{.x = 4294967294}), ("q", std.None{}), ("r", std.None{})]}
NewAllocationOpt{.id = 15, .alloc = [("x", std.Some{.x = 4294967286}), ("b", std.Some{.x = 4294967287}), ("c", std.Some{.x = 4294967288}), ("d", std.Some{.x = 4294967289}), ("e", std.Some{.x = 4294967290}), ("z", std.Some{.x = 4294967291}), ("p", std.Some{.x = 4294967292}), ("q", std.Some{.x = 4294967293}), ("r", std.Some{.x = 4294967294})]}
NewAllocationOpt{.id = 16, .alloc = [("x", std.Some{.x = 10}), ("b", std.Some{.x = 12}), ("c", std.Some{.x = 14}), ("d", std.Some{.x = 15}), ("e", std.Some{.x = 16}), ("z", std.Some{.x = 17}), ("p", std.Some{.x = 18}), ("q", std.Some{.x = 19}), ("r", std.None{})]}
NewAllocationOpt{.id = 17, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}
NewAllocationOpt{.id = 18, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}
NewAllocationOpt{.id = 19, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}
NewAllocationOpt{.id = 20, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}
NewAllocationOpt{.id = 21, .alloc = [("x", std.None{}), ("b", std.None{}), ("c", std.None{}), ("d", std.None{}), ("e", std.None{}), ("z", std.None{}), ("p", std.None{}), ("q", std.None{}), ("r", std.None{})]}
Adjusted
Adjusted{.id = 1, .alloc = []}
Adjusted{.id = 2, .alloc = [("a", 0)]}
Adjusted{.id = 3, .alloc = [("a", 0)]}
Adjusted{.id = 4, .alloc = [("a", 0), ("b", 1)]}
Adjusted{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
Adjusted{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
Adjusted{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
Adjusted{.id = 7, .alloc = [("a", 0), ("b", 1)]}
Adjusted{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
Adjusted{.id = 9, .alloc = [("x", 0), ("b", 10001), ("c", 10002), ("d", 10003), ("e", 10004), ("z", 10000)]}
Adjusted{.id = 10, .alloc = [("x", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("z", 10000)]}
Adjusted{.id = 11, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5)]}
Adjusted{.id = 12, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0)]}
Adjusted{.id = 13, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0), ("r", 2)]}
Adjusted{.id = 14, .alloc = [("x", 4294967287), ("b", 4294967286), ("c", 4294967288), ("d", 4294967290), ("e", 4294967291), ("z", 4294967295), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
Adjusted{.id = 15, .alloc = [("x", 16777207), ("b", 4294967286), ("c", 4294967287), ("d", 4294967288), ("e", 4294967289), ("z", 16777215), ("p", 4294967290), ("q", 4294967291), ("r", 4294967292)]}
Adjusted{.id = 16, .alloc = [("x", 11), ("b", 10), ("c", 12), ("d", 14), ("e", 15), ("z", 20), ("p", 16), ("q", 17), ("r", 18)]}
Adjusted{.id = 17, .alloc = [("x", 10), ("z", 12)]}
Adjusted{.id = 18, .alloc = [("x", 4294967293), ("z", 4294967295)]}
Adjusted{.id = 19, .alloc = [("x", 0), ("z", 2)]}
Adjusted{.id = 20, .alloc = [("x", 0), ("z", 2)]}
Adjusted{.id = 21, .alloc = [("x", 0), ("z", 2)]}
YX:
YX{.y = 10, .x = 1}: +1
YX{.y = 20, .x = 2}: +1
YX{.y = 30, .x = 3}: +1
YX{.y = 40, .x = 4}: +1
YX
YX{.y = 10, .x = 1}
YX{.y = 20, .x = 2}
YX{.y = 30, .x = 3}
YX{.y = 40, .x = 4}
SCCLabel:
(2, 2): +1
(3, 2): +1
(4, 2): +1
(5, 5): +1
(6, 5): +1
(7, 5): +1
SCCLabel
(2, 2)
(3, 2)
(4, 2)
(5, 5)
(6, 5)
(7, 5)
ConcatString:
ConcatString{.s = "Foo bar"}: +1
ConcatString{.s = "Foo world"}: +1
ConcatString{.s = "Hello, bar"}: +1
ConcatString{.s = "Hello, world"}: +1
ConcatString
ConcatString{.s = "Foo bar"}
ConcatString{.s = "Foo world"}
ConcatString{.s = "Hello, bar"}
ConcatString{.s = "Hello, world"}
CMethod:
CMethod{.c1 = "bar", .c2 = "foo"}: +1
CMethod{.c1 = "buzz", .c2 = "foo"}: +1
CMethod{.c1 = "hello", .c2 = "world"}: +1
DMethod:
DMethod{.c1 = "bar", .c2 = "foo"}: +1
DMethod{.c1 = "buzz", .c2 = "foo"}: +1
DMethod{.c1 = "hello", .c2 = "world"}: +1
CMethod
CMethod{.c1 = "bar", .c2 = "foo"}
CMethod{.c1 = "buzz", .c2 = "foo"}
CMethod{.c1 = "hello", .c2 = "world"}
DMethod
DMethod{.c1 = "bar", .c2 = "foo"}
DMethod{.c1 = "buzz", .c2 = "foo"}
DMethod{.c1 = "hello", .c2 = "world"}
Power3:
Power3{.y = 0}: +1
Power3{.y = 1}: +1
Power3{.y = 8}: +1
Power3{.y = 27}: +1
Power3{.y = 64}: +1
Power3
Power3{.y = 0}
Power3{.y = 1}
Power3{.y = 8}
Power3{.y = 27}
Power3{.y = 64}
RegexMatch:
RegexMatch{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb", .m = true}: +1
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333", .m = false}: +1
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333", .m = true}: +1
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333", .m = true}: +1
RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01", .m = true}: +1
RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101", .m = false}: +1
RegexMatch{.regex = "a+b+", .text = "AaAaAbbBBBb", .m = false}: +1
RegexMatch{.regex = "a+b+", .text = "aaaaabbbbbb", .m = true}: +1
RegexMatch
RegexMatch{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb", .m = true}
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333", .m = false}
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333", .m = true}
RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333", .m = true}
RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01", .m = true}
RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101", .m = false}
RegexMatch{.regex = "a+b+", .text = "AaAaAbbBBBb", .m = false}
RegexMatch{.regex = "a+b+", .text = "aaaaabbbbbb", .m = true}
Arithm
Arithm{.n = 0}
Arithm{.n = 1}
Arithm{.n = 2}
Arithm{.n = 3}
Arithm{.n = 4}
Arithm{.n = 5}
Arithm{.n = 6}
Arithm{.n = 7}
Arithm{.n = 8}
Arithm{.n = 9}
Arithm{.n = 10}
Arithm{.n = 11}
Arithm{.n = 12}
Arithm{.n = 13}
Arithm{.n = 14}
Signed
Signed{.n = -2147483648}
Signed{.n = 0}
Signed{.n = 1}
Signed{.n = 2}
Signed{.n = 3}
Signed{.n = 4}
Signed{.n = 5}
Signed{.n = 6}
Signed{.n = 7}
Signed{.n = 8}
Signed{.n = 9}
Signed{.n = 10}
Cast_u32
Cast_u32{.description = "(100: signed<32>) as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "(32'sd0 - 32'sd10) as bit<32>", .actual = 4294967286, .expected = 4294967286}
Cast_u32{.description = "128'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "128'hffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "16'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'd100 as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "32'd100  as bit<32>", .actual = 100, .expected = 100}
Cast_u32{.description = "64'hffffffffffff as bit<32>", .actual = 4294967295, .expected = 4294967295}
Cast_u32{.description = "8'd100   as bit<32>", .actual = 100, .expected = 100}
Cast_s32
Cast_s32{.description = "('hff000000ff: bigint as signed<32>)", .expected = 255, .actual = 255}
Cast_s32{.description = "('hffffffffff: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(-1: bigint as signed<32>)", .expected = -1, .actual = -1}
Cast_s32{.description = "(100: bit<32>) as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'sd100 as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "128'shffffffffffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "16'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "32'sd100  as signed<32>", .expected = 100, .actual = 100}
Cast_s32{.description = "64'shffffffffffff as signed<32>", .expected = -1, .actual = -1}
Cast_s32{.description = "8'sd100   as signed<32>", .expected = 100, .actual = 100}
Cast_u24
Cast_u24{.description = "(100: signed<32>) as bit<32> as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<24>", .expected = 16777206, .actual = 16777206}
Cast_u24{.description = "128'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "128'hffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "16'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "24'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'd100 as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "256'hffffffffffffffffffffffffffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "32'd100  as bit<24>", .expected = 100, .actual = 100}
Cast_u24{.description = "64'hffffffffffff as bit<24>", .expected = 16777215, .actual = 16777215}
Cast_u24{.description = "8'd100   as bit<24>", .expected = 100, .actual = 100}
Cast_u256
Cast_u256{.description = "(100: signed<32>) as bit<32> as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "(32'sd0 - 32'sd10) as bit<32> as bit<256>", .expected = 4294967286, .actual = 4294967286}
Cast_u256{.description = "128'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "128'hffffffffffffffffffff as bit<256>", .expected = 1208925819614629174706175, .actual = 1208925819614629174706175}
Cast_u256{.description = "16'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "24'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "256'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>", .expected = 115792089237316195423570985008687907853269984665640564039457584007913129639930, .actual = 115792089237316195423570985008687907853269984665640564039457584007913129639930}
Cast_u256{.description = "32'd100  as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "512'd100 as bit<256>", .expected = 100, .actual = 100}
Cast_u256{.description = "8'd100   as bit<256>", .expected = 100, .actual = 100}
Cast_bigint
Cast_bigint{.description = "(32'sd0 - 32'sd10) as bigint", .expected = -10, .actual = -10}
Cast_bigint{.description = "128'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "16'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "24'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "256'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint", .expected = 29642774844752946028434172162224104410437116074403984394101141506025761187823610, .actual = 29642774844752946028434172162224104410437116074403984394101141506025761187823610}
Cast_bigint{.description = "32'd100  as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "512'd100 as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "8'd100   as bigint", .expected = 100, .actual = 100}
Cast_bigint{.description = "int_from_d(64'f3.5)", .expected = 3, .actual = 3}
Cast_bigint{.description = "int_from_f(32'f3.5)", .expected = 3, .actual = 3}
UMinus_s32
UMinus_s32{.description = "-(-32'sd100)", .n = 100}
UMinus_s32{.description = "-32'sd100", .n = -100}
UMinus_s32{.description = "-32768", .n = -32768}
UMinus_bigint
UMinus_bigint{.description = "- -100", .n = 100}
UMinus_bigint{.description = "-100", .n = -100}
UMinus_bigint{.description = "-32768", .n = -32768}
J
J{.b = true}
Span:
Span{.entity = 0, .tns = [0, 1, 2]}: +1
Span{.entity = 1, .tns = [0, 1, 2]}: +1
Span{.entity = 2, .tns = [0, 1, 2]}: +1
Span{.entity = 3, .tns = [0, 1, 2]}: +1
Span{.entity = 4, .tns = [0, 1, 2]}: +1
Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 9, .tns = [0]}: +1
Span{.entity = 10, .tns = [1]}: +1
Span{.entity = 11, .tns = [2]}: +1
Span{.entity = 12, .tns = [3]}: +1
Span{.entity = 13, .tns = [4]}: +1
Span:
Span{.entity = 0, .tns = [0, 1, 2]}: -1
Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 1, .tns = [0, 1, 2]}: -1
Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 2, .tns = [0, 1, 2]}: -1
Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 3, .tns = [0, 1, 2]}: -1
Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}: +1
Span{.entity = 4, .tns = [0, 1, 2]}: -1
Span{.entity = 4, .tns = [0, 1, 2, 3, 4]}: +1
LongJoin:
LongJoin{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}: +1
