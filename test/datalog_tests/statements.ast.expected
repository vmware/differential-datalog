typedef set<'A>
function __builtin_2string (x: 'X): string
relation W (
    f1: int,
    f2: int,
    f3: int)
ground relation X (
    field: int)
relation Z (
    field: int)
Z(.field=a) :- X(.field=a).
Z(.field=a) :- X(.field=a), match (a) {
                                1 -> true,
                                _ -> false
                            }.
Z(.field=(a + 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> true,
                                      _ -> false
                                  }.
Z(.field=(a - 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> false,
                                      _ -> true
                                  }.
Z(.field=a) :- X(.field=a), ((a % 2) == 0).
Z(.field=(a + 1)) :- X(.field=a), (a == 2).
Z(.field=a) :- X(.field=a), (a != 1).
Z(.field=a) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a + 2)) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a + b)) :- X(.field=a), X(.field=b).
Z(.field=(a + c)) :- X(.field=a), X(.field=c).
Z(.field=(a + b)),
Z(.field=(a + c)) :- X(.field=a), X(.field=b), X(.field=c).
Z(.field=(a + b)) :- X(.field=a), var b = (a + 2).
W(.f1=a, .f2=b, .f3=c) :- X(.field=a), var b = (a + 2), var c = (b + a).
Z(.field=a) :- X(.field=a).
Z(.field=a) :- X(.field=a), match (a) {
                                1 -> true,
                                2 -> false,
                                _ -> false
                            }.
Z(.field=(a + 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> true,
                                      _ -> false
                                  }.
Z(.field=(a - 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> false,
                                      _ -> true
                                  }.
Z(.field=a) :- X(.field=a), ((a % 2) == 0).
Z(.field=a) :- X(.field=a), ((a % 2) == 0).
Z(.field=(a + 1)) :- X(.field=a), (a == 2).
Z(.field=a) :- X(.field=a), (not (a == 2)).
Z(.field=a) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a + 2)) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a + b)) :- X(.field=a), X(.field=b).
Z(.field=(a + c)) :- X(.field=a), X(.field=c).
Z(.field=(a + b)) :- X(.field=a), var b = (a + 2).
W(.f1=a, .f2=b, .f3=c) :- X(.field=a), var b = (a + 2), var c = (b + a).
