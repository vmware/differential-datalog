typedef Strings = Strings{s: string}
typedef serializable_t = ConsInt{x: bigint} | ConsBit{y: bit<32>} | ConsBool{z: bool} | Cons0{}
extern type std.Set<'A>
extern type std.Vec<'A>
function dummy (x: string): string =
    (x ++ " dummy")
function serializable_t2string (x: serializable_t): string =
    match (x) {
        ConsInt{.x=var v} -> (("ConsInt(" ++ std.__builtin_2string(v)) ++ ")"),
        ConsBit{.y=var v} -> (("ConsBool(" ++ std.__builtin_2string(v)) ++ ")"),
        ConsBool{.z=true} -> "ConsBool(true)",
        ConsBool{.z=false} -> "ConsBool(false)",
        Cons0{} -> "Cons0"
    }
extern function std.__builtin_2string (x: 'X): string
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
function strings (): () =
    (var str1 = ("foo" ++ "bar");
     (var str2 = (("foobar" ++ "buzz") ++ "\nraw string quoted string");
      (var str3 = (("str1: " ++ str1) ++ "");
       (var str4 = (((((("str1: " ++ str1) ++ ", str2: ") ++ str2) ++ ", str3: ") ++ str3) ++ ".");
        (var str5 = (((((("str1: " ++ str1) ++ ",\nstr2: ") ++ str2) ++ ",\nstr3: ") ++ str3) ++ ".");
         (var str6 = (("" ++ (str1 ++ str2)) ++ "");
          (var str7 = (("" ++ (var x = (str1 ++ str2);
                               x)) ++ "");
           (var str8 = (("" ++ (var x = (str1 ++ str2);
                                dummy(x))) ++ "");
            ()))))))))
function tostring1 (): () =
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        (var err = (((((((("a=" ++ std.__builtin_2string(a)) ++ ", b=") ++ std.__builtin_2string(b)) ++ ", c=") ++ std.__builtin_2string(c)) ++ ", d=") ++ d) ++ "");
         ())))))
function tostring2 (): () =
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        ((var e: serializable_t) = ConsInt{.x=0};
         (var err = (((((((((("a=" ++ std.__builtin_2string(a)) ++ ", b=") ++ std.__builtin_2string(b)) ++ ", c=") ++ std.__builtin_2string(c)) ++ ", d=") ++ d) ++ ", e:") ++ serializable_t2string(e)) ++ "");
          ()))))))
input relation Strings [Strings]
Strings(.s="").
Strings(.s="foo").
Strings(.s="bar\n").
Strings(.s="\t\tbar").
Strings(.s="\"buzz").
Strings(.s="\r\n\abuzz").
Strings(.s="\\buzz").
Strings(.s="\\buzz").
Strings(.s="bar\916").
Strings(.s="").
Strings(.s="foo").
Strings(.s="foo\nbuzz\nbar").
Strings(.s="\n    foo\n    buzz\n    bar").
Strings(.s="bar\916\n\928").
Strings(.s="bar\916\n\928 quoted string").
Strings(.s="\n    foo\\r\\n\n    buzz\n    bar").
Strings(.s="foo-bar").
Strings(.s="foo\nbar").
Strings(.s="foo\\bar").
Strings(.s="foo\\bar").
Strings(.s="word1 word2").
Strings(.s="line1\nline2").
