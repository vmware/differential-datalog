typedef debug::DDlogOpId = (std::u32, std::u32, std::u32)
typedef fp_test::BB = fp_test::BB{s: string, b: bool}
typedef fp_test::D = fp_test::D{s: string, d: double}
typedef fp_test::DoublesFromRecord = fp_test::DoublesFromRecord{s: string, d: double}
typedef fp_test::F = fp_test::F{s: string, d: float}
typedef fp_test::FloatsFromRecord = fp_test::FloatsFromRecord{s: string, f: float}
#[size = 8]
#[shared_ref = true]
extern type internment::Intern<'A>
typedef internment::istring = internment::Intern<string>
typedef internment_test::AllInternedString = internment_test::AllInternedString{ix: internment::istring}
typedef internment_test::IInternedString = internment_test::IInternedString{ix: internment::istring}
typedef internment_test::IStruct = internment_test::IStruct{u: internment::Intern<internment_test::IUnion>, t: internment::Intern<(std::s32, double)>, x: bigint}
typedef internment_test::IUnion = internment_test::Tag1{f1: bool} |
                                  internment_test::Tag2{f2: std::u32, f3: string}
typedef internment_test::OInternedString = internment_test::OInternedString{x: string, ix: internment::istring}
typedef internment_test::Projections = internment_test::Projections{inp: internment_test::Struct, p: string}
typedef internment_test::StaticInternedString = internment_test::StaticInternedString{ix: internment::istring}
typedef internment_test::Struct = internment_test::Struct{u: internment_test::IUnion, t: (std::s32, double), x: bigint}
typedef json::JsonNum = json::JsonInt{i: std::s128} |
                        json::JsonFloat{d: double}
typedef json::JsonPtr = std::Vec<json::JsonPtrItem>
typedef json::JsonPtrItem = json::JKeyPtr{key: internment::istring} |
                            json::JIdxPtr{idx: std::usize}
#[rust = "serde(from = \"__json::ValueWrapper\", into = \"__json::ValueWrapper\")"]
typedef json::JsonValue = json::JsonNull{} |
                          json::JsonBool{b: bool} |
                          json::JsonNumber{n: json::JsonNum} |
                          json::JsonString{s: internment::istring} |
                          json::JsonArray{a: std::Vec<json::JsonValue>} |
                          json::JsonObject{o: std::Map<internment::istring,json::JsonValue>}
#[custom_serde = true]
typedef json::JsonWrapper<'T> = json::JsonWrapper{x: 'T}
typedef json_test::Array = std::Vec<json_test::BoolStruct>
typedef json_test::BoolMap = std::Map<string,json_test::BoolStruct>
typedef json_test::BoolStruct = json_test::BoolStruct{b: bool}
typedef json_test::Enum = #[rust = "serde(rename = \"Variant1\")"]
                          json_test::Variant1{b: bool} |
                          #[rust = "serde(rename = \"Variant2\")"]
                          json_test::Variant2{u: std::u32}
typedef json_test::JsonTest = json_test::JsonTest{description: string, value: string}
typedef json_test::JsonTestValue = json_test::JsonTestValue{description: string, value: string}
typedef json_test::Nested = json_test::Nested{x: string, z: std::u64}
typedef json_test::Optional = json_test::Optional{s: std::Option<string>, i: std::Option<std::u64>, v: std::Option<json::JsonValue>}
typedef json_test::S32FromString = json_test::S32FromString{#[rust = "serde(with=\"serde_string\")"] x: std::s32}
typedef json_test::StructWithKey = json_test::StructWithKey{key: std::u64, payload: string}
typedef json_test::StructWithMap = json_test::StructWithMap{#[deserialize_from_array = json_test::key_structWithKey()] f: std::Map<std::u64,json_test::StructWithKey>}
#[rust = "serde(tag = \"@type\")"]
typedef json_test::TaggedEnum = #[rust = "serde(rename = \"t.V1\")"]
                                json_test::TVariant1{b: bool} |
                                #[rust = "serde(rename = \"t.V2\")"]
                                json_test::TVariant2{u: std::u32}
typedef json_test::Top = json_test::Top{t: string, id: string, nested: json_test::Nested}
typedef json_test::TopFlat = json_test::TopFlat{t: string, #[rust = "serde(rename=\"@id\")"] id: string, #[rust = "serde(flatten)"] nested: json_test::Nested}
typedef json_test::U64FromString = json_test::U64FromString{x: string, #[rust = "serde(with=\"serde_string\")"] y: std::u64}
typedef json_test::WrappedEnum = json::JsonWrapper<json_test::TaggedEnum>
typedef log::log_level_t = signed<32>
typedef log::module_t = signed<32>
typedef net::ipaddr::IpAddr = net::ipaddr::IpAddrV4{addr4: net::ipv4::Ipv4Addr} |
                              net::ipaddr::IpAddrV6{addr6: net::ipv6::Ipv6Addr}
extern type net::ipv4::Ipv4Addr
extern type net::ipv6::Ipv6Addr
typedef net_test::NetChecks = net_test::NetChecks{description: string, value: string}
extern type regex::Regex
typedef regex_test::RegexTestInput = regex_test::RegexTestInput{regex: string, text: string}
typedef regex_test::RegexTestOutput = regex_test::RegexTestOutput{regex: string, text: string, match_found: bool, match_found_checked: bool, first_match: std::Option<string>, all_matches: std::Vec<string>}
typedef std::DDEpoch = std::u64
typedef std::DDIteration = std::u64
typedef std::DDNestedTS = std::DDNestedTS{epoch: std::DDEpoch, iter: std::DDIteration}
typedef std::DDWeight = std::s64
typedef std::Either<'A,'B> = std::Left{l: 'A} |
                             std::Right{r: 'B}
extern type std::Group<'K,'V>
extern type std::Map<'K,'V>
#[rust = "serde(from=\"Option<A>\", into=\"Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
#[custom_from_record = true]
typedef std::Option<'A> = std::None{} |
                          std::Some{x: 'A}
#[size = 8]
#[shared_ref = true]
extern type std::Ref<'A>
typedef std::Result<'V,'E> = std::Ok{res: 'V} |
                             std::Err{err: 'E}
extern type std::Set<'A>
extern type std::Vec<'A>
typedef std::s128 = signed<128>
typedef std::s16 = signed<16>
typedef std::s32 = signed<32>
typedef std::s64 = signed<64>
typedef std::s8 = signed<8>
typedef std::u128 = bit<128>
typedef std::u16 = bit<16>
typedef std::u32 = bit<32>
typedef std::u64 = bit<64>
typedef std::u8 = bit<8>
typedef std::usize = std::u64
typedef std_test::Default = std_test::Default{descr: string, val: string}
typedef std_test::DefaultEnum = std_test::DEnum1{} |
                                std_test::DEnum2{x: std::u32}
typedef std_test::IntVecTest = std_test::IntVecTest{descr: string, vec: std::Vec<std::s64>}
typedef std_test::MapDelete = std_test::MapDelete{descr: string, m: std::Map<std::usize,string>, s: std::Option<string>}
typedef std_test::MapSizes = std_test::MapSizes{m: std::Map<std::u64,string>, size: std::usize}
typedef std_test::Maps = std_test::Maps{m: std::Map<std::u64,string>}
typedef std_test::Pow = std_test::Pow{descr: string, val: string}
typedef std_test::SetDifference = std_test::SetDifference{s1: std::Set<std::u64>, s2: std::Set<std::u64>, diff: std::Set<std::u64>}
typedef std_test::SetPairs = std_test::SetPairs{s1: std::Set<std::u64>, s2: std::Set<std::u64>}
typedef std_test::SortedVector = std_test::SortedVector{v: std::Vec<bigint>}
typedef std_test::SortedVectorInPlace = std_test::SortedVectorInPlace{v: std::Vec<bigint>}
typedef std_test::Vector = std_test::Vector{v: std::Vec<bigint>}
extern type tinyset::Set64<'X>
typedef tinyset_test::Diffs = tinyset_test::Diffs{setid1: string, setid2: string, set: tinyset::Set64<std::u32>}
typedef tinyset_test::Intersects = tinyset_test::Intersects{setid1: string, setid2: string, set: tinyset::Set64<std::u32>}
typedef tinyset_test::Intersects2 = tinyset_test::Intersects2{setid1: string, setid2: string, set: tinyset::Set64<std::u32>}
typedef tinyset_test::SetElement = tinyset_test::SetElement{setid: string, element: std::u32}
typedef tinyset_test::Sets = tinyset_test::Sets{setid: string, set: tinyset::Set64<std::u32>}
extern type url::Url
typedef url_test::URLTest = url_test::URLTest{description: string, val: string}
typedef uuid::Error = string
extern type uuid::Uuid
typedef uuid_test::UUID = uuid_test::UUID{description: string, result: string}
function __debug_306_1_tinyset::group_to_set (g: std::Group<string,('I, bit<32>)>): (std::Vec<'I>, tinyset::Set64<bit<32>>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,bit<32>>)) = debug::debug_split_group(g);
     (inputs, tinyset::group_to_set(original_group)))
}
extern function debug::debug_event (operator_id: debug::DDlogOpId, w: std::DDWeight, ts: 'T1, operator_type: string, input1: 'A1, out: 'A2): ()
extern function debug::debug_event_join (operator_id: debug::DDlogOpId, w: std::DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()
extern function debug::debug_split_group (g: std::Group<'K,('I, 'V)>): (std::Vec<'I>, std::Group<'K,'V>)
extern function fp::abs_d (f: double): double
extern function fp::abs_f (f: float): float
extern function fp::acos_d (f: double): double
extern function fp::acos_f (f: float): float
extern function fp::acosh_d (f: double): double
extern function fp::acosh_f (f: float): float
extern function fp::asin_d (f: double): double
extern function fp::asin_f (f: float): float
extern function fp::asinh_d (f: double): double
extern function fp::asinh_f (f: float): float
extern function fp::atan2_d (f: double, other: double): double
extern function fp::atan2_f (f: float, other: float): float
extern function fp::atan_d (f: double): double
extern function fp::atan_f (f: float): float
extern function fp::atanh_d (f: double): double
extern function fp::atanh_f (f: float): float
extern function fp::cbrt_d (f: double): double
extern function fp::cbrt_f (f: float): float
extern function fp::ceil_d (f: double): double
extern function fp::ceil_f (f: float): float
extern function fp::cos_d (f: double): double
extern function fp::cos_f (f: float): float
extern function fp::cosh_d (f: double): double
extern function fp::cosh_f (f: float): float
extern function fp::exp2_d (f: double): double
extern function fp::exp2_f (f: float): float
extern function fp::exp_d (f: double): double
extern function fp::exp_f (f: float): float
extern function fp::floor_d (f: double): double
extern function fp::floor_f (f: float): float
extern function fp::fract_d (f: double): double
extern function fp::fract_f (f: float): float
extern function fp::int_from_d (d: double): std::Option<bigint>
extern function fp::int_from_f (f: float): std::Option<bigint>
extern function fp::is_finite_d (f: double): bool
extern function fp::is_finite_f (f: float): bool
extern function fp::is_infinite_d (f: double): bool
extern function fp::is_infinite_f (f: float): bool
extern function fp::is_nan_d (f: double): bool
extern function fp::is_nan_f (f: float): bool
extern function fp::ln_d (f: double): double
extern function fp::ln_f (f: float): float
extern function fp::log10_d (f: double): double
extern function fp::log10_f (f: float): float
extern function fp::log2_d (f: double): double
extern function fp::log2_f (f: float): float
extern function fp::log_d (f: double, base: double): double
extern function fp::log_f (f: float, base: float): float
extern function fp::mul_add_d (a: double, b: double, c: double): double
extern function fp::mul_add_f (a: float, b: float, c: float): float
extern function fp::nan_d (): double
extern function fp::nan_f (): float
extern function fp::parse_d (s: string): std::Result<double,string>
extern function fp::parse_f (s: string): std::Result<float,string>
extern function fp::powf_d (f: double, exp: double): double
extern function fp::powf_f (f: float, exp: float): float
extern function fp::powi_d (f: double, exp: signed<32>): double
extern function fp::powi_f (f: float, exp: signed<32>): float
extern function fp::recip_d (f: double): double
extern function fp::recip_f (f: float): float
extern function fp::round_d (f: double): double
extern function fp::round_f (f: float): float
extern function fp::signum_d (f: double): double
extern function fp::signum_f (f: float): float
extern function fp::sin_d (f: double): double
extern function fp::sin_f (f: float): float
extern function fp::sinh_d (f: double): double
extern function fp::sinh_f (f: float): float
extern function fp::sqrt_d (f: double): double
extern function fp::sqrt_f (f: float): float
extern function fp::tan_d (f: double): double
extern function fp::tan_f (f: float): float
extern function fp::tanh_d (f: double): double
extern function fp::tanh_f (f: float): float
extern function fp::to_degrees_d (f: double): double
extern function fp::to_degrees_f (f: float): float
extern function fp::to_radians_d (f: double): double
extern function fp::to_radians_f (f: float): float
extern function fp::trunc_d (f: double): double
extern function fp::trunc_f (f: float): float
function internment::contains (s1: internment::istring, s2: string): bool
{
    internment::istring_contains(s1, s2)
}
function internment::ends_with (s: internment::istring, suffix: string): bool
{
    internment::istring_ends_with(s, suffix)
}
extern function internment::intern (s: 'A): internment::Intern<'A>
extern function internment::istring_contains (s1: internment::istring, s2: string): bool
extern function internment::istring_ends_with (s: internment::istring, suffix: string): bool
extern function internment::istring_join (strings: std::Vec<internment::istring>, sep: string): string
extern function internment::istring_len (s: internment::istring): std::usize
extern function internment::istring_replace (s: internment::istring, from: string, to: string): string
extern function internment::istring_reverse (s: internment::istring): string
extern function internment::istring_split (s: internment::istring, sep: string): std::Vec<string>
extern function internment::istring_starts_with (s: internment::istring, prefix: string): bool
extern function internment::istring_substr (s: internment::istring, start: std::usize, end: std::usize): string
extern function internment::istring_to_bytes (s: internment::istring): std::Vec<std::u8>
extern function internment::istring_to_lowercase (s: internment::istring): string
extern function internment::istring_to_uppercase (s: internment::istring): string
extern function internment::istring_trim (s: internment::istring): string
#[return_by_ref = true]
extern function internment::ival (s: internment::Intern<'A>): 'A
function internment::join (strings: std::Vec<internment::istring>, sep: string): string
{
    internment::istring_join(strings, sep)
}
function internment::len (s: internment::istring): std::usize
{
    internment::istring_len(s)
}
function internment::replace (s: internment::istring, from: string, to: string): string
{
    internment::istring_replace(s, from, to)
}
function internment::reverse (s: internment::istring): string
{
    internment::istring_reverse(s)
}
function internment::split (s: internment::istring, sep: string): std::Vec<string>
{
    internment::istring_split(s, sep)
}
function internment::starts_with (s: internment::istring, prefix: string): bool
{
    internment::istring_starts_with(s, prefix)
}
function internment::substr (s: internment::istring, start: std::usize, end: std::usize): string
{
    internment::istring_substr(s, start, end)
}
function internment::to_bytes (s: internment::istring): std::Vec<std::u8>
{
    internment::istring_to_bytes(s)
}
function internment::to_lowercase (s: internment::istring): string
{
    internment::istring_to_lowercase(s)
}
function internment::to_string (s: internment::istring): string
{
    (internment::ival(s): string)
}
function internment::to_uppercase (s: internment::istring): string
{
    internment::istring_to_uppercase(s)
}
function internment::trim (s: internment::istring): string
{
    internment::istring_trim(s)
}
function internment_test::istruct2struct (i: internment_test::IStruct): internment_test::Struct
{
    (internment_test::Struct{.u=(internment::ival(i.u): internment_test::IUnion), .t=(internment::ival(i.t): (std::s32, double)), .x=i.x}: internment_test::Struct)
}
extern function json::from_json_string (json: string): std::Result<'T,string>
extern function json::from_json_value (json_val: json::JsonValue): std::Result<'T,string>
function json::get_by_ptr (jval: json::JsonValue, ptr: json::JsonPtr): std::Option<json::JsonValue>
{
    json::get_by_ptr_(jval, ptr, 64'd0)
}
function json::get_by_ptr_ (jval: json::JsonValue, ptr: json::JsonPtr, idx: std::usize): std::Option<json::JsonValue>
{
    match ((std::nth(ptr, idx): std::Option<json::JsonPtrItem>)) {
        (std::None{}: std::Option<json::JsonPtrItem>) -> (std::Some{.x=jval}: std::Option<json::JsonValue>),
        (std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: std::Option<json::JsonPtrItem>) -> json::get_by_ptr_(match (json::jval_get(jval, key)) {
                                                                                                                                                                (std::None{}: std::Option<json::JsonValue>) -> ((return (std::None{}: std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                (std::Some{.x=(var __x: json::JsonValue)}: std::Option<json::JsonValue>) -> __x
                                                                                                                                                            }, ptr, (idx + 64'd1)),
        (std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: std::Option<json::JsonPtrItem>) -> match (jval) {
                                                                                                                         (json::JsonArray{.a=(var vals: std::Vec<json::JsonValue>)}: json::JsonValue) -> json::get_by_ptr_(match ((std::nth(vals, n): std::Option<json::JsonValue>)) {
                                                                                                                                                                                                                               (std::None{}: std::Option<json::JsonValue>) -> ((return (std::None{}: std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                                                                               (std::Some{.x=(var __x: json::JsonValue)}: std::Option<json::JsonValue>) -> __x
                                                                                                                                                                                                                           }, ptr, (idx + 64'd1)),
                                                                                                                         (_: json::JsonValue) -> (std::None{}: std::Option<json::JsonValue>)
                                                                                                                     }
    }
}
function json::jval_as_array (v: json::JsonValue): std::Option<std::Vec<json::JsonValue>>
{
    match (v) {
        (json::JsonArray{.a=(var a: std::Vec<json::JsonValue>)}: json::JsonValue) -> (std::Some{.x=a}: std::Option<std::Vec<json::JsonValue>>),
        (_: json::JsonValue) -> (std::None{}: std::Option<std::Vec<json::JsonValue>>)
    }
}
function json::jval_as_array_or (v: json::JsonValue, def: std::Vec<json::JsonValue>): std::Vec<json::JsonValue>
{
    match (v) {
        (json::JsonArray{.a=(var a: std::Vec<json::JsonValue>)}: json::JsonValue) -> a,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_bool (v: json::JsonValue): std::Option<bool>
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> (std::Some{.x=b}: std::Option<bool>),
        (_: json::JsonValue) -> (std::None{}: std::Option<bool>)
    }
}
function json::jval_as_bool_or (v: json::JsonValue, def: bool): bool
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> b,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_number (v: json::JsonValue): std::Option<json::JsonNum>
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> (std::Some{.x=n}: std::Option<json::JsonNum>),
        (_: json::JsonValue) -> (std::None{}: std::Option<json::JsonNum>)
    }
}
function json::jval_as_number_or (v: json::JsonValue, def: json::JsonNum): json::JsonNum
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> n,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_object (v: json::JsonValue): std::Option<std::Map<internment::istring,json::JsonValue>>
{
    match (v) {
        (json::JsonObject{.o=(var o: std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (std::Some{.x=o}: std::Option<std::Map<internment::istring,json::JsonValue>>),
        (_: json::JsonValue) -> (std::None{}: std::Option<std::Map<internment::istring,json::JsonValue>>)
    }
}
function json::jval_as_object_or (v: json::JsonValue, def: std::Map<internment::istring,json::JsonValue>): std::Map<internment::istring,json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> o,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_string (v: json::JsonValue): std::Option<internment::istring>
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> (std::Some{.x=s}: std::Option<internment::Intern<string>>),
        (_: json::JsonValue) -> (std::None{}: std::Option<internment::Intern<string>>)
    }
}
function json::jval_as_string_or (v: json::JsonValue, def: internment::istring): internment::istring
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> s,
        (_: json::JsonValue) -> def
    }
}
function json::jval_get (v: json::JsonValue, attr: internment::istring): std::Option<json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (std::map_get(o, attr): std::Option<json::JsonValue>),
        (_: json::JsonValue) -> (std::None{}: std::Option<json::JsonValue>)
    }
}
function json::jval_get_or (v: json::JsonValue, attr: internment::istring, def: json::JsonValue): json::JsonValue
{
    match (v) {
        (json::JsonObject{.o=(var o: std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (std::unwrap_or((std::map_get(o, attr): std::Option<json::JsonValue>), def): json::JsonValue),
        (_: json::JsonValue) -> def
    }
}
function json::set_by_ptr (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue): std::Result<(),string>
{
    json::set_by_ptr_(jval, ptr, v, 64'd0)
}
function json::set_by_ptr_ (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue, idx: std::usize): std::Result<(),string>
{
    match ((std::nth(ptr, idx): std::Option<json::JsonPtrItem>)) {
        (std::None{}: std::Option<json::JsonPtrItem>) -> (jval = v;
                                                          (std::Ok{.res=()}: std::Result<(),string>)),
        (std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: std::Option<json::JsonPtrItem>) -> (if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                                               jval = (json::JsonObject{.o=(std::map_empty(): std::Map<internment::istring,json::JsonValue>)}: json::JsonValue)
                                                                                                                                           } else {
                                                                                                                                                 ()
                                                                                                                                             };
                                                                                                                                           match (jval) {
                                                                                                                                               (json::JsonObject{.o=(var m: std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> ((var old: json::JsonValue) = (std::unwrap_or((std::remove(m, key): std::Option<json::JsonValue>), (json::JsonNull{}: json::JsonValue)): json::JsonValue);
                                                                                                                                                                                                                                                  (json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                                                                   (std::insert(m, key, old);
                                                                                                                                                                                                                                                    (std::Ok{.res=()}: std::Result<(),string>)))),
                                                                                                                                               (_: json::JsonValue) -> (std::Err{.err="Not a JSON map"}: std::Result<(),string>)
                                                                                                                                           }),
        (std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: std::Option<json::JsonPtrItem>) -> (if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                          jval = (json::JsonArray{.a=(std::vec_empty(): std::Vec<json::JsonValue>)}: json::JsonValue)
                                                                                                                      } else {
                                                                                                                            ()
                                                                                                                        };
                                                                                                                      match (jval) {
                                                                                                                          (json::JsonArray{.a=(var xs: std::Vec<json::JsonValue>)}: json::JsonValue) -> (std::resize(xs, (std::max((n + 64'd1), std::len(xs)): bit<64>), (json::JsonNull{}: json::JsonValue));
                                                                                                                                                                                                         ((var old: json::JsonValue) = (json::JsonNull{}: json::JsonValue);
                                                                                                                                                                                                          (std::swap_nth(xs, n, old);
                                                                                                                                                                                                           (json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                            (std::swap_nth(xs, n, old);
                                                                                                                                                                                                             (std::Ok{.res=()}: std::Result<(),string>)))))),
                                                                                                                          (_: json::JsonValue) -> (std::Err{.err="Not a JSON array"}: std::Result<(),string>)
                                                                                                                      })
    }
}
extern function json::to_json_string (x: 'T): std::Result<string,string>
extern function json::to_json_value (x: 'T): std::Result<json::JsonValue,string>
function json_test::array1 (): string
{
    "[{\"b\":true}, {\"b\":false}, {\"b\":true}, {\"b\":false}]"
}
function json_test::boolStruct1 (): string
{
    "{\"b\":true}"
}
function json_test::boolStruct2 (): string
{
    "{\"b\":true, \"foo\":\"bar\"}"
}
function json_test::boolStruct3 (): string
{
    "{\"foo\":\"bar\"}"
}
function json_test::enum1 (): string
{
    "{\"Variant1\": {\"b\": true}}"
}
function json_test::enum2 (): string
{
    "{\"Variant2\": {\"u\": 100}}"
}
function json_test::flattenedStruct1 (): string
{
    "{\"t\":\"foo\", \"@id\":\"1001001001\", \"x\": \"x\", \"z\": 100000}"
}
function json_test::key_structWithKey (x: json_test::StructWithKey): std::u64
{
    x.key
}
function json_test::map1 (): string
{
    "{\"1\":{\"b\":true}, \"2\":{\"b\":false}, \"3\":{\"b\":true}, \"4\":{\"b\":false}}"
}
function json_test::mutilate_jval (): json::JsonValue
{
    ((var jval: json::JsonValue) = (std::unwrap_or_default((json::from_json_string(json_test::nestedStruct1()): std::Result<json::JsonValue,string>)): json::JsonValue);
     (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd2): std::Vec<json::JsonPtrItem>);
                              (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                               (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("x"): internment::Intern<string>)}: json::JsonPtrItem));
                                __vec))), (std::unwrap_or_default((json::from_json_string(json_test::boolStruct2()): std::Result<json::JsonValue,string>)): json::JsonValue));
      (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd2): std::Vec<json::JsonPtrItem>);
                               (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("y"): internment::Intern<string>)}: json::JsonPtrItem));
                                 __vec))), (std::unwrap_or_default((json::from_json_string(json_test::boolStruct2()): std::Result<json::JsonValue,string>)): json::JsonValue));
       (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd2): std::Vec<json::JsonPtrItem>);
                                (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                 (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                  __vec))), (json::JsonArray{.a=((var __vec: std::Vec<json::JsonValue>) = (std::vec_with_capacity(64'd2): std::Vec<json::JsonValue>);
                                                                 (std::push(__vec, (std::unwrap_or_default((json::from_json_string(json_test::wenum1()): std::Result<json::JsonValue,string>)): json::JsonValue));
                                                                  (std::push(__vec, (std::unwrap_or_default((json::from_json_string(json_test::wenum2()): std::Result<json::JsonValue,string>)): json::JsonValue));
                                                                   __vec)))}: json::JsonValue));
        (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd3): std::Vec<json::JsonPtrItem>);
                                 (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                  (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                   (std::push(__vec, (json::JIdxPtr{.idx=64'd1}: json::JsonPtrItem));
                                    __vec)))), (std::unwrap_or_default((json::from_json_string(json_test::wenum3()): std::Result<json::JsonValue,string>)): json::JsonValue));
         (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd4): std::Vec<json::JsonPtrItem>);
                                  (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                   (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                    (std::push(__vec, (json::JIdxPtr{.idx=64'd1}: json::JsonPtrItem));
                                     (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("b"): internment::Intern<string>)}: json::JsonPtrItem));
                                      __vec))))), (std::unwrap_or_default((json::from_json_string(json_test::struct_with_map1()): std::Result<json::JsonValue,string>)): json::JsonValue));
          (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd4): std::Vec<json::JsonPtrItem>);
                                   (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                    (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                     (std::push(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                      (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("b"): internment::Intern<string>)}: json::JsonPtrItem));
                                       __vec))))), (std::unwrap_or_default((json::from_json_string(json_test::struct_with_map1()): std::Result<json::JsonValue,string>)): json::JsonValue));
           (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd4): std::Vec<json::JsonPtrItem>);
                                    (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                     (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                      (std::push(__vec, (json::JIdxPtr{.idx=64'd9}: json::JsonPtrItem));
                                       (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("q"): internment::Intern<string>)}: json::JsonPtrItem));
                                        __vec))))), (std::unwrap_or_default((json::from_json_string(json_test::struct_with_map1()): std::Result<json::JsonValue,string>)): json::JsonValue));
            (json::set_by_ptr(jval, ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd2): std::Vec<json::JsonPtrItem>);
                                     (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("t"): internment::Intern<string>)}: json::JsonPtrItem));
                                      (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                       __vec))), (std::unwrap_or_default((json::from_json_string(json_test::struct_with_map1()): std::Result<json::JsonValue,string>)): json::JsonValue));
             jval)))))))))
}
function json_test::nestedStruct1 (): string
{
    "{\"t\":\"foo\", \"id\":\"1001001001\", \"nested\": {\"x\": \"x\", \"z\": 100000}}"
}
function json_test::optional1 (): string
{
    "{}"
}
function json_test::optional2 (): string
{
    "{\"s\": \"foo\"}"
}
function json_test::optional3 (): string
{
    "{\"s\": \"foo\", \"i\": 100000}"
}
function json_test::optional4 (): string
{
    "{\"s\": \"foo\", \"i\": 100000, \"v\": 2.5}"
}
function json_test::s32FromString1 (): string
{
    "{\"x\": \"-100000\"}"
}
function json_test::s32FromString2 (): string
{
    "{\"x\": \"100000000000\"}"
}
function json_test::scalar1 (): string
{
    "true"
}
function json_test::scalar2 (): string
{
    "100"
}
function json_test::scalar3 (): string
{
    "-100"
}
function json_test::scalar4 (): string
{
    "\"foo bar\""
}
function json_test::scalar5 (): string
{
    "2.99792458e8"
}
function json_test::struct_with_map1 (): string
{
    "{\"f\": [{\"key\": 100, \"payload\": \"foo\"}]}"
}
function json_test::tenum1 (): string
{
    "{\"@type\": \"t.V1\", \"b\": true}"
}
function json_test::tenum2 (): string
{
    "{\"@type\": \"t.V2\", \"u\": 100}"
}
function json_test::tenum3 (): string
{
    "{\"@type\": \"t.V2\", \"b\": false}"
}
function json_test::to_json_string_or_default (x: 'T): string
{
    (std::unwrap_or_default(json::to_json_string(x)): string)
}
function json_test::u64FromString1 (): string
{
    "{\"x\": \"x\", \"y\": \"100000\"}"
}
function json_test::u64FromString2 (): string
{
    "{\"x\": \"x\", \"y\": \"-100000\"}"
}
function json_test::wenum1 (): string
{
    "{\"@type\": \"t.V1\", \"b\": true}"
}
function json_test::wenum2 (): string
{
    "{\"@type\": \"t.V2\", \"u\": 100}"
}
function json_test::wenum3 (): string
{
    "{\"@type\": \"t.V2\", \"b\": false}"
}
#[has_side_effects = true]
extern function log::log (module: log::module_t, level: log::log_level_t, msg: string): ()
function net::ipaddr::ipaddr_from_ipv4addr (ipv4: net::ipv4::Ipv4Addr): net::ipaddr::IpAddr
{
    (net::ipaddr::IpAddrV4{.addr4=ipv4}: net::ipaddr::IpAddr)
}
function net::ipaddr::ipaddr_from_ipv6addr (ipv6: net::ipv6::Ipv6Addr): net::ipaddr::IpAddr
{
    (net::ipaddr::IpAddrV6{.addr6=ipv6}: net::ipaddr::IpAddr)
}
function net::ipaddr::ipaddr_is_ipv4 (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(_: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> true,
        (net::ipaddr::IpAddrV6{.addr6=(_: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> false
    }
}
function net::ipaddr::ipaddr_is_ipv6 (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(_: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> false,
        (net::ipaddr::IpAddrV6{.addr6=(_: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> true
    }
}
function net::ipaddr::ipaddr_is_loopback (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_loopback(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_loopback(a)
    }
}
function net::ipaddr::ipaddr_is_multicast (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_multicast(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_multicast(a)
    }
}
function net::ipaddr::ipaddr_is_unspecified (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_unspecified(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_unspecified(a)
    }
}
function net::ipaddr::to_string (addr: net::ipaddr::IpAddr): string
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::to_string(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::to_string(a)
    }
}
extern function net::ipv4::iPV4_BROADCAST (): net::ipv4::Ipv4Addr
extern function net::ipv4::iPV4_LOCALHOST (): net::ipv4::Ipv4Addr
extern function net::ipv4::iPV4_UNSPECIFIED (): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4Addr2string (addr: net::ipv4::Ipv4Addr): string
extern function net::ipv4::ipv4_from_octet_vec (octets: std::Vec<std::u8>): std::Option<net::ipv4::Ipv4Addr>
extern function net::ipv4::ipv4_from_str (s: string): std::Result<net::ipv4::Ipv4Addr,string>
extern function net::ipv4::ipv4_from_u32 (ip: std::u32): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4_is_broadcast (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_documentation (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_link_local (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_loopback (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_multicast (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_private (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_unspecified (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_new (a: std::u8, b: std::u8, c: std::u8, d: std::u8): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4_octet_vec (addr: net::ipv4::Ipv4Addr): std::Vec<std::u8>
extern function net::ipv4::ipv4_octets (addr: net::ipv4::Ipv4Addr): (std::u8, std::u8, std::u8, std::u8)
extern function net::ipv4::ipv4_to_ipv6_compatible (addr: net::ipv4::Ipv4Addr): net::ipv6::Ipv6Addr
extern function net::ipv4::ipv4_to_ipv6_mapped (addr: net::ipv4::Ipv4Addr): net::ipv6::Ipv6Addr
extern function net::ipv4::ipv4_to_u32 (addr: net::ipv4::Ipv4Addr): std::u32
function net::ipv4::to_string (addr: net::ipv4::Ipv4Addr): string
{
    net::ipv4::ipv4Addr2string(addr)
}
extern function net::ipv6::iPV6_LOCALHOST (): net::ipv6::Ipv6Addr
extern function net::ipv6::iPV6_UNSPECIFIED (): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6Addr2string (addr: net::ipv6::Ipv6Addr): string
extern function net::ipv6::ipv6_from_octet_vec (octets: std::Vec<std::u8>): std::Option<net::ipv6::Ipv6Addr>
extern function net::ipv6::ipv6_from_octets (b0: std::u8, b1: std::u8, b2: std::u8, b3: std::u8, b4: std::u8, b5: std::u8, b6: std::u8, b7: std::u8, b8: std::u8, b9: std::u8, b10: std::u8, b11: std::u8, b12: std::u8, b13: std::u8, b14: std::u8, b15: std::u8): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_from_segment_vec (segments: std::Vec<std::u16>): std::Option<net::ipv6::Ipv6Addr>
extern function net::ipv6::ipv6_from_str (s: string): std::Result<net::ipv6::Ipv6Addr,string>
extern function net::ipv6::ipv6_from_u128 (ip: std::u128): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_is_loopback (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_is_multicast (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_is_unspecified (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_new (a: std::u16, b: std::u16, c: std::u16, d: std::u16, e: std::u16, f: std::u16, g: std::u16, h: std::u16): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_octet_vec (addr: net::ipv6::Ipv6Addr): std::Vec<std::u8>
extern function net::ipv6::ipv6_octets (addr: net::ipv6::Ipv6Addr): (std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8, std::u8)
extern function net::ipv6::ipv6_segment_vec (addr: net::ipv6::Ipv6Addr): std::Vec<std::u16>
extern function net::ipv6::ipv6_segments (addr: net::ipv6::Ipv6Addr): (std::u16, std::u16, std::u16, std::u16, std::u16, std::u16, std::u16, std::u16)
extern function net::ipv6::ipv6_to_ipv4 (addr: net::ipv6::Ipv6Addr): std::Option<net::ipv4::Ipv4Addr>
extern function net::ipv6::ipv6_to_u128 (addr: net::ipv6::Ipv6Addr): std::u128
function net::ipv6::to_string (addr: net::ipv6::Ipv6Addr): string
{
    net::ipv6::ipv6Addr2string(addr)
}
extern function regex::regex (pattern: string): regex::Regex
extern function regex::regex_all_matches (regex: regex::Regex, text: string): std::Vec<string>
extern function regex::regex_checked (pattern: string): std::Result<regex::Regex,string>
extern function regex::regex_first_match (regex: regex::Regex, text: string): std::Option<string>
extern function regex::regex_match (regex: regex::Regex, text: string): bool
extern function std::__builtin_2string (x: 'X): string
function std::append (v: mut std::Vec<'X>, other: std::Vec<'X>): ()
{
    std::vec_append(v, other)
}
extern function std::bigint_pow32 (base: bigint, exp: bit<32>): bigint
function std::contains (s1: string, s2: string): bool
{
    std::string_contains(s1, s2)
}
function std::contains (v: std::Vec<'X>, x: 'X): bool
{
    std::vec_contains(v, x)
}
function std::contains (s: std::Set<'X>, v: 'X): bool
{
    std::set_contains(s, v)
}
function std::contains_key (m: std::Map<'K,'V>, k: 'K): bool
{
    std::map_contains_key(m, k)
}
function std::count (g: std::Group<'K,'V>): std::usize
{
    std::group_count(g)
}
extern function std::default (): 'T
#[return_by_ref = true]
extern function std::deref (x: std::Ref<'A>): 'A
function std::difference (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_difference(s1, s2): std::Set<'X>)
}
function std::ends_with (s: string, suffix: string): bool
{
    std::string_ends_with(s, suffix)
}
function std::first (g: std::Group<'K,'V>): 'V
{
    (std::group_first(g): 'V)
}
function std::get (m: std::Map<'K,'V>, k: 'K): std::Option<'V>
{
    (std::map_get(m, k): std::Option<'V>)
}
extern function std::group_count (g: std::Group<'K,'V>): std::usize
extern function std::group_first (g: std::Group<'K,'V>): 'V
extern function std::group_key (g: std::Group<'K,'V>): 'K
extern function std::group_max (g: std::Group<'K,'V>): 'V
extern function std::group_min (g: std::Group<'K,'V>): 'V
extern function std::group_nth (g: std::Group<'K,'V>, n: std::usize): std::Option<'V>
extern function std::group_set_unions (g: std::Group<'K,std::Set<'A>>): std::Set<'A>
extern function std::group_setref_unions (g: std::Group<'K,std::Ref<std::Set<'A>>>): std::Ref<std::Set<'A>>
extern function std::group_sum (g: std::Group<'K,'V>): 'V
extern function std::group_to_map (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,'V>
extern function std::group_to_set (g: std::Group<'K,'V>): std::Set<'V>
extern function std::group_to_setmap (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,std::Set<'V>>
extern function std::group_to_vec (g: std::Group<'K,'V>): std::Vec<'V>
function std::group_unzip (g: std::Group<'K,('X, 'Y)>): (std::Vec<'X>, std::Vec<'Y>)
{
    ((var xs: std::Vec<'X>) = (std::vec_empty(): std::Vec<'X>);
     ((var ys: std::Vec<'Y>) = (std::vec_empty(): std::Vec<'Y>);
      (for (v in g) {
           (((var x: 'X), (var y: 'Y)) = v;
            (std::vec_push(xs, x);
             std::vec_push(ys, y)))
       };
       (xs, ys))))
}
extern function std::hash128 (x: 'X): bit<128>
extern function std::hash64 (x: 'X): bit<64>
extern function std::hex (x: 'X): string
extern function std::htonl (x: bit<32>): bit<32>
extern function std::htons (x: bit<16>): bit<16>
function std::insert (m: mut std::Map<'K,'V>, k: 'K, v: 'V): ()
{
    std::map_insert(m, k, v)
}
function std::insert (s: mut std::Set<'X>, v: 'X): ()
{
    std::set_insert(s, v)
}
function std::insert_imm (m: std::Map<'K,'V>, k: 'K, v: 'V): std::Map<'K,'V>
{
    (std::map_insert_imm(m, k, v): std::Map<'K,'V>)
}
function std::insert_imm (s: std::Set<'X>, v: 'X): std::Set<'X>
{
    (std::set_insert_imm(s, v): std::Set<'X>)
}
function std::intersection (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_intersection(s1, s2): std::Set<'X>)
}
function std::is_empty (v: std::Vec<'X>): bool
{
    std::vec_is_empty(v)
}
function std::is_empty (m: std::Map<'K,'V>): bool
{
    std::map_is_empty(m)
}
function std::is_empty (s: std::Set<'X>): bool
{
    std::set_is_empty(s)
}
function std::is_err (res: std::Result<'V,'E>): bool
{
    match (res) {
        (std::Ok{.res=(_: 'V)}: std::Result<'V,'E>) -> false,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> true
    }
}
function std::is_none (x: std::Option<'A>): bool
{
    match (x) {
        (std::None{}: std::Option<'A>) -> true,
        (_: std::Option<'A>) -> false
    }
}
function std::is_ok (res: std::Result<'V,'E>): bool
{
    match (res) {
        (std::Ok{.res=(_: 'V)}: std::Result<'V,'E>) -> true,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> false
    }
}
function std::is_some (x: std::Option<'A>): bool
{
    match (x) {
        (std::Some{.x=(_: 'A)}: std::Option<'A>) -> true,
        (_: std::Option<'A>) -> false
    }
}
function std::join (strings: std::Vec<string>, sep: string): string
{
    std::string_join(strings, sep)
}
function std::key (g: std::Group<'K,'V>): 'K
{
    (std::group_key(g): 'K)
}
function std::keys (m: std::Map<'K,'V>): std::Vec<'K>
{
    (std::map_keys(m): std::Vec<'K>)
}
function std::len (s: string): std::usize
{
    std::string_len(s)
}
function std::len (v: std::Vec<'X>): std::usize
{
    std::vec_len(v)
}
extern function std::map_contains_key (m: std::Map<'K,'V>, k: 'K): bool
extern function std::map_empty (): std::Map<'K,'V>
extern function std::map_get (m: std::Map<'K,'V>, k: 'K): std::Option<'V>
extern function std::map_insert (m: mut std::Map<'K,'V>, k: 'K, v: 'V): ()
extern function std::map_insert_imm (m: std::Map<'K,'V>, k: 'K, v: 'V): std::Map<'K,'V>
extern function std::map_is_empty (m: std::Map<'K,'V>): bool
extern function std::map_keys (m: std::Map<'K,'V>): std::Vec<'K>
extern function std::map_remove (m: mut std::Map<'K,'V>, k: 'K): std::Option<'V>
extern function std::map_singleton (k: 'K, v: 'V): std::Map<'K,'V>
extern function std::map_size (m: std::Map<'K,'V>): std::usize
extern function std::map_union (m1: std::Map<'K,'V>, m2: std::Map<'K,'V>): std::Map<'K,'V>
function std::max (x: 'A, y: 'A): 'A
{
    if (x > y) {
        x
    } else {
          y
      }
}
function std::max (g: std::Group<'K,'V>): 'V
{
    (std::group_max(g): 'V)
}
function std::min (x: 'A, y: 'A): 'A
{
    if (x < y) {
        x
    } else {
          y
      }
}
function std::min (g: std::Group<'K,'V>): 'V
{
    (std::group_min(g): 'V)
}
function std::nth (g: std::Group<'K,'V>, n: std::usize): std::Option<'V>
{
    (std::group_nth(g, n): std::Option<'V>)
}
function std::nth (v: std::Vec<'X>, n: std::usize): std::Option<'X>
{
    (std::vec_nth(v, n): std::Option<'X>)
}
function std::nth (s: std::Set<'X>, n: std::usize): std::Option<'X>
{
    (std::set_nth(s, n): std::Option<'X>)
}
extern function std::ntohl (x: bit<32>): bit<32>
extern function std::ntohs (x: bit<16>): bit<16>
extern function std::option_unwrap_or_default (opt: std::Option<'A>): 'A
extern function std::parse_dec_i64 (s: string): std::Option<signed<64>>
extern function std::parse_dec_u64 (s: string): std::Option<bit<64>>
function std::pow32 (base: std::u8, exp: bit<32>): std::u8
{
    std::u8_pow32(base, exp)
}
function std::pow32 (base: std::u16, exp: bit<32>): std::u16
{
    std::u16_pow32(base, exp)
}
function std::pow32 (base: std::u32, exp: bit<32>): std::u32
{
    std::u32_pow32(base, exp)
}
function std::pow32 (base: std::u64, exp: bit<32>): std::u64
{
    std::u64_pow32(base, exp)
}
function std::pow32 (base: std::u128, exp: bit<32>): std::u128
{
    std::u128_pow32(base, exp)
}
function std::pow32 (base: std::s8, exp: bit<32>): std::s8
{
    std::s8_pow32(base, exp)
}
function std::pow32 (base: std::s16, exp: bit<32>): std::s16
{
    std::s16_pow32(base, exp)
}
function std::pow32 (base: std::s32, exp: bit<32>): std::s32
{
    std::s32_pow32(base, exp)
}
function std::pow32 (base: std::s64, exp: bit<32>): std::s64
{
    std::s64_pow32(base, exp)
}
function std::pow32 (base: std::s128, exp: bit<32>): std::s128
{
    std::s128_pow32(base, exp)
}
function std::pow32 (base: bigint, exp: bit<32>): bigint
{
    std::bigint_pow32(base, exp)
}
function std::push (v: mut std::Vec<'X>, x: 'X): ()
{
    std::vec_push(v, x)
}
function std::push_imm (v: std::Vec<'X>, x: 'X): std::Vec<'X>
{
    (std::vec_push_imm(v, x): std::Vec<'X>)
}
extern function std::range (from: 'A, to: 'A, step: 'A): std::Vec<'A>
extern function std::ref_new (x: 'A): std::Ref<'A>
function std::remove (m: mut std::Map<'K,'V>, k: 'K): std::Option<'V>
{
    (std::map_remove(m, k): std::Option<'V>)
}
function std::replace (s: string, from: string, to: string): string
{
    std::string_replace(s, from, to)
}
function std::resize (v: mut std::Vec<'X>, new_len: std::usize, value: 'X): ()
{
    std::vec_resize(v, new_len, value)
}
extern function std::result_unwrap_or_default (res: std::Result<'V,'E>): 'V
function std::reverse (s: string): string
{
    std::string_reverse(s)
}
extern function std::s128_pow32 (base: std::s128, exp: bit<32>): std::s128
extern function std::s16_pow32 (base: std::s16, exp: bit<32>): std::s16
extern function std::s32_pow32 (base: std::s32, exp: bit<32>): std::s32
extern function std::s64_pow32 (base: std::s64, exp: bit<32>): std::s64
extern function std::s8_pow32 (base: std::s8, exp: bit<32>): std::s8
extern function std::set_contains (s: std::Set<'X>, v: 'X): bool
extern function std::set_difference (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_empty (): std::Set<'X>
extern function std::set_insert (s: mut std::Set<'X>, v: 'X): ()
extern function std::set_insert_imm (s: std::Set<'X>, v: 'X): std::Set<'X>
extern function std::set_intersection (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_is_empty (s: std::Set<'X>): bool
extern function std::set_nth (s: std::Set<'X>, n: std::usize): std::Option<'X>
extern function std::set_singleton (x: 'X): std::Set<'X>
extern function std::set_size (s: std::Set<'X>): std::usize
extern function std::set_to_vec (s: std::Set<'A>): std::Vec<'A>
extern function std::set_union (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_unions (sets: std::Vec<std::Set<'X>>): std::Set<'X>
function std::setref_unions (g: std::Group<'K,std::Ref<std::Set<'A>>>): std::Ref<std::Set<'A>>
{
    (std::group_setref_unions(g): std::Ref<std::Set<'A>>)
}
function std::size (m: std::Map<'K,'V>): std::usize
{
    std::map_size(m)
}
function std::size (s: std::Set<'X>): std::usize
{
    std::set_size(s)
}
function std::sort (v: mut std::Vec<'X>): ()
{
    std::vec_sort(v)
}
function std::sort_imm (v: std::Vec<'X>): std::Vec<'X>
{
    (std::vec_sort_imm(v): std::Vec<'X>)
}
function std::split (s: string, sep: string): std::Vec<string>
{
    std::string_split(s, sep)
}
function std::starts_with (s: string, prefix: string): bool
{
    std::string_starts_with(s, prefix)
}
extern function std::str_to_lower (s: string): string
extern function std::string_contains (s1: string, s2: string): bool
extern function std::string_ends_with (s: string, suffix: string): bool
extern function std::string_join (strings: std::Vec<string>, sep: string): string
extern function std::string_len (s: string): std::usize
extern function std::string_replace (s: string, from: string, to: string): string
extern function std::string_reverse (s: string): string
extern function std::string_split (s: string, sep: string): std::Vec<string>
extern function std::string_starts_with (s: string, prefix: string): bool
extern function std::string_substr (s: string, start: std::usize, end: std::usize): string
extern function std::string_to_bytes (s: string): std::Vec<std::u8>
extern function std::string_to_lowercase (s: string): string
extern function std::string_to_uppercase (s: string): string
extern function std::string_trim (s: string): string
function std::substr (s: string, start: std::usize, end: std::usize): string
{
    std::string_substr(s, start, end)
}
function std::swap_nth (v: mut std::Vec<'X>, idx: std::usize, value: mut 'X): bool
{
    std::vec_swap_nth(v, idx, value)
}
function std::to_bytes (s: string): std::Vec<std::u8>
{
    std::string_to_bytes(s)
}
function std::to_lowercase (s: string): string
{
    std::string_to_lowercase(s)
}
function std::to_map (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,'V>
{
    (std::group_to_map(g): std::Map<'K2,'V>)
}
function std::to_set (o: std::Option<'X>): std::Set<'X>
{
    match (o) {
        (std::Some{.x=(var x: 'X)}: std::Option<'X>) -> (std::set_singleton(x): std::Set<'X>),
        (std::None{}: std::Option<'X>) -> (std::set_empty(): std::Set<'X>)
    }
}
function std::to_set (g: std::Group<'K,'V>): std::Set<'V>
{
    (std::group_to_set(g): std::Set<'V>)
}
function std::to_set (s: std::Vec<'A>): std::Set<'A>
{
    (std::vec_to_set(s): std::Set<'A>)
}
function std::to_setmap (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,std::Set<'V>>
{
    (std::group_to_setmap(g): std::Map<'K2,std::Set<'V>>)
}
function std::to_string (ts: std::DDNestedTS): string
{
    (((("(" ++ (std::__builtin_2string(ts.epoch): string)) ++ ",") ++ (std::__builtin_2string(ts.iter): string)) ++ ")")
}
function std::to_string (x: bool): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: bigint): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: float): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: double): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s8): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s16): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s32): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s64): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s128): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u8): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u16): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u32): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u64): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u128): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: string): string
{
    std::__builtin_2string(x)
}
function std::to_uppercase (s: string): string
{
    std::string_to_uppercase(s)
}
function std::to_vec (o: std::Option<'X>): std::Vec<'X>
{
    match (o) {
        (std::Some{.x=(var x: 'X)}: std::Option<'X>) -> (std::vec_singleton(x): std::Vec<'X>),
        (std::None{}: std::Option<'X>) -> (std::vec_empty(): std::Vec<'X>)
    }
}
function std::to_vec (g: std::Group<'K,'V>): std::Vec<'V>
{
    (std::group_to_vec(g): std::Vec<'V>)
}
function std::to_vec (s: std::Set<'A>): std::Vec<'A>
{
    (std::set_to_vec(s): std::Vec<'A>)
}
function std::trim (s: string): string
{
    std::string_trim(s)
}
extern function std::u128_pow32 (base: std::u128, exp: bit<32>): std::u128
extern function std::u16_pow32 (base: std::u16, exp: bit<32>): std::u16
extern function std::u32_pow32 (base: std::u32, exp: bit<32>): std::u32
extern function std::u64_pow32 (base: std::u64, exp: bit<32>): std::u64
extern function std::u8_pow32 (base: std::u8, exp: bit<32>): std::u8
function std::union (m1: std::Map<'K,'V>, m2: std::Map<'K,'V>): std::Map<'K,'V>
{
    (std::map_union(m1, m2): std::Map<'K,'V>)
}
function std::union (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_union(s1, s2): std::Set<'X>)
}
function std::unions (sets: std::Vec<std::Set<'X>>): std::Set<'X>
{
    (std::set_unions(sets): std::Set<'X>)
}
function std::unwrap_or (x: std::Option<'A>, def: 'A): 'A
{
    match (x) {
        (std::Some{.x=(var v: 'A)}: std::Option<'A>) -> v,
        (std::None{}: std::Option<'A>) -> def
    }
}
function std::unwrap_or (res: std::Result<'V,'E>, def: 'V): 'V
{
    match (res) {
        (std::Ok{.res=(var v: 'V)}: std::Result<'V,'E>) -> v,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> def
    }
}
function std::unwrap_or_default (opt: std::Option<'A>): 'A
{
    (std::option_unwrap_or_default(opt): 'A)
}
function std::unwrap_or_default (res: std::Result<'V,'E>): 'V
{
    (std::result_unwrap_or_default(res): 'V)
}
function std::update_nth (v: mut std::Vec<'X>, idx: std::usize, value: 'X): bool
{
    std::vec_update_nth(v, idx, value)
}
extern function std::vec_append (v: mut std::Vec<'X>, other: std::Vec<'X>): ()
extern function std::vec_contains (v: std::Vec<'X>, x: 'X): bool
extern function std::vec_empty (): std::Vec<'A>
extern function std::vec_is_empty (v: std::Vec<'X>): bool
extern function std::vec_len (v: std::Vec<'X>): std::usize
extern function std::vec_nth (v: std::Vec<'X>, n: std::usize): std::Option<'X>
extern function std::vec_push (v: mut std::Vec<'X>, x: 'X): ()
extern function std::vec_push_imm (v: std::Vec<'X>, x: 'X): std::Vec<'X>
extern function std::vec_resize (v: mut std::Vec<'X>, new_len: std::usize, value: 'X): ()
extern function std::vec_set_nth (v: std::Vec<'X>, n: std::usize, value: 'X): ()
extern function std::vec_singleton (x: 'X): std::Vec<'X>
extern function std::vec_sort (v: mut std::Vec<'X>): ()
extern function std::vec_sort_imm (v: std::Vec<'X>): std::Vec<'X>
extern function std::vec_swap_nth (v: mut std::Vec<'X>, idx: std::usize, value: mut 'X): bool
extern function std::vec_to_set (s: std::Vec<'A>): std::Set<'A>
extern function std::vec_update_nth (v: mut std::Vec<'X>, idx: std::usize, value: 'X): bool
extern function std::vec_with_capacity (len: std::usize): std::Vec<'A>
extern function std::vec_with_length (len: std::usize, x: 'A): std::Vec<'A>
function std_test::alphabet_map (): std::Map<std::usize,string>
{
    ((var __map: std::Map<bit<64>,string>) = (std::map_empty(): std::Map<bit<64>,string>);
     (std::insert(__map, 64'd0, "a");
      (std::insert(__map, 64'd1, "b");
       (std::insert(__map, 64'd2, "c");
        (std::insert(__map, 64'd3, "d");
         (std::insert(__map, 64'd4, "e");
          __map))))))
}
function std_test::to_string (e: std_test::DefaultEnum): string
{
    match (e) {
        (std_test::DEnum1{}: std_test::DefaultEnum) -> "DEnum1",
        (std_test::DEnum2{.x=(var e: bit<32>)}: std_test::DefaultEnum) -> (("DEnum2{" ++ (std::__builtin_2string(e): string)) ++ "}")
    }
}
function std_test::vec0 (): std::Vec<std::s64>
{
    ((var __vec: std::Vec<signed<64>>) = (std::vec_with_capacity(64'd6): std::Vec<signed<64>>);
     (std::push(__vec, 64'sd0);
      (std::push(__vec, 64'sd1);
       (std::push(__vec, 64'sd2);
        (std::push(__vec, 64'sd3);
         (std::push(__vec, 64'sd4);
          (std::push(__vec, 64'sd5);
           __vec)))))))
}
extern function tinyset::contains (s: tinyset::Set64<'X>, v: 'X): bool
extern function tinyset::difference (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::empty (): tinyset::Set64<'X>
extern function tinyset::group_set_unions (g: std::Group<'K,tinyset::Set64<'V>>): tinyset::Set64<'V>
extern function tinyset::group_setref_unions (g: std::Group<'K,std::Ref<tinyset::Set64<'V>>>): std::Ref<tinyset::Set64<'V>>
extern function tinyset::group_to_set (g: std::Group<'K,'V>): tinyset::Set64<'V>
extern function tinyset::insert (s: mut tinyset::Set64<'X>, v: 'X): ()
extern function tinyset::insert_imm (s: tinyset::Set64<'X>, v: 'X): tinyset::Set64<'X>
extern function tinyset::intersection (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::is_empty (s: tinyset::Set64<'X>): bool
extern function tinyset::nth (s: tinyset::Set64<'X>, n: bit<64>): std::Option<bit<64>>
extern function tinyset::singleton (x: 'X): tinyset::Set64<'X>
extern function tinyset::size (s: tinyset::Set64<'X>): bit<64>
extern function tinyset::union (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::unions (sets: std::Vec<tinyset::Set64<'X>>): tinyset::Set64<'X>
extern function url::cannot_be_a_base (url: url::Url): bool
extern function url::domain (url: url::Url): std::Option<string>
extern function url::fragment (url: url::Url): std::Option<string>
extern function url::has_authority (url: url::Url): bool
extern function url::has_host (url: url::Url): bool
extern function url::host_str (url: url::Url): std::Option<string>
extern function url::join (url: url::Url, other: string): std::Result<url::Url,string>
extern function url::password (url: url::Url): std::Option<string>
extern function url::path (url: url::Url): string
extern function url::port (url: url::Url): std::Option<std::u16>
extern function url::port_or_known_default (url: url::Url): std::Option<std::u16>
extern function url::query (url: url::Url): std::Option<string>
extern function url::scheme (url: url::Url): string
function url::to_string (url: url::Url): string
{
    url::url_to_string(url)
}
extern function url::url_parse (url: string): std::Result<url::Url,string>
extern function url::url_to_string (url: url::Url): string
extern function url::username (url: url::Url): string
extern function uuid::as_u128 (uuid: uuid::Uuid): std::u128
extern function uuid::from_bytes (b: std::Vec<std::u8>): std::Result<uuid::Uuid,uuid::Error>
extern function uuid::from_u128 (v: std::u128): uuid::Uuid
extern function uuid::from_u128_le (v: std::u128): uuid::Uuid
extern function uuid::is_nil (uuid: uuid::Uuid): bool
extern function uuid::nAMESPACE_DNS (): uuid::Uuid
extern function uuid::nAMESPACE_OID (): uuid::Uuid
extern function uuid::nAMESPACE_URL (): uuid::Uuid
extern function uuid::nAMESPACE_X500 (): uuid::Uuid
extern function uuid::new_v5 (namespace: uuid::Uuid, name: std::Vec<std::u8>): uuid::Uuid
extern function uuid::nil (): uuid::Uuid
extern function uuid::parse_str (str: string): std::Result<uuid::Uuid,uuid::Error>
extern function uuid::to_hyphenated_lower (uuid: uuid::Uuid): string
extern function uuid::to_hyphenated_upper (uuid: uuid::Uuid): string
extern function uuid::to_simple_lower (uuid: uuid::Uuid): string
extern function uuid::to_simple_upper (uuid: uuid::Uuid): string
extern function uuid::to_u128_le (uuid: uuid::Uuid): std::u128
extern function uuid::to_urn_lower (uuid: uuid::Uuid): string
extern function uuid::to_urn_upper (uuid: uuid::Uuid): string
function uuid_test::test_uuid_from_bytes (): uuid::Uuid
{
    ((var bytes: std::Vec<bit<8>>) = (std::vec_empty(): std::Vec<bit<8>>);
     (for (i in (std::range((8'd0: bit<8>), (8'd15: bit<8>), (8'd1: bit<8>)): std::Vec<bit<8>>)) {
          std::vec_push(bytes, (i as bit<8>))
      };
      (std::unwrap_or(uuid::from_bytes(bytes), uuid::nil()): uuid::Uuid)))
}
function uuid_test::uuid_parse_or_nil (str: string): uuid::Uuid
{
    (std::unwrap_or(uuid::parse_str(str), uuid::nil()): uuid::Uuid)
}
output relation fp_test::BB [fp_test::BB]
output relation fp_test::D [fp_test::D]
input relation fp_test::DoublesFromRecord [fp_test::DoublesFromRecord]
output relation fp_test::F [fp_test::F]
input relation fp_test::FloatsFromRecord [fp_test::FloatsFromRecord]
output relation fp_test::OutDoublesFromRecord [fp_test::DoublesFromRecord]
output relation fp_test::OutFloatsFromRecord [fp_test::FloatsFromRecord]
relation internment_test::AllInternedString [internment_test::AllInternedString]
input relation internment_test::IInternedString [internment_test::IInternedString]
input relation internment_test::IStruct [internment::Intern<internment_test::IStruct>]
output relation internment_test::OInternedString [internment_test::OInternedString]
output relation internment_test::Projections [internment_test::Projections]
relation internment_test::StaticInternedString [internment_test::StaticInternedString]
input relation json_test::Deserialized [json_test::TaggedEnum]
output relation json_test::JsonTest [json_test::JsonTest]
output relation json_test::JsonTestValue [json_test::JsonTestValue]
output relation json_test::ODeserialized [json_test::TaggedEnum]
output relation net_test::NetChecks [net_test::NetChecks]
relation regex_test::RegexTestInput [regex_test::RegexTestInput]
output relation regex_test::RegexTestOutput [regex_test::RegexTestOutput]
output relation std_test::Default [std_test::Default]
output relation std_test::IntVecTest [std_test::IntVecTest]
output relation std_test::MapDelete [std_test::MapDelete]
output relation std_test::MapSizes [std_test::MapSizes]
input relation std_test::Maps [std_test::Maps]
output relation std_test::Pow [std_test::Pow]
output relation std_test::SetDifference [std_test::SetDifference]
input relation std_test::SetPairs [std_test::SetPairs]
output relation std_test::SortedVector [std_test::SortedVector]
output relation std_test::SortedVectorInPlace [std_test::SortedVectorInPlace]
input relation std_test::Vector [std_test::Vector]
output relation tinyset_test::Diffs [tinyset_test::Diffs]
output relation tinyset_test::Intersects [tinyset_test::Intersects]
output relation tinyset_test::Intersects2 [tinyset_test::Intersects2]
input relation tinyset_test::SetElement [tinyset_test::SetElement]
output relation tinyset_test::Sets [tinyset_test::Sets]
output relation url_test::URLTest [url_test::URLTest]
output relation uuid_test::UUID [uuid_test::UUID]
std_test::SortedVector[(std_test::SortedVector{.v=sorted}: std_test::SortedVector)] :- std_test::Vector[(__std_test_vector0@ (std_test::Vector{.v=(v: std::Vec<bigint>)}: std_test::Vector))], (var sorted: std::Vec<bigint>) = (std::sort_imm(v): std::Vec<bigint>), Inspect debug::debug_event((32'd0, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __std_test_vector0, (std_test::SortedVector{.v=sorted}: std_test::SortedVector)).
std_test::SortedVectorInPlace[(std_test::SortedVectorInPlace{.v=sorted}: std_test::SortedVectorInPlace)] :- std_test::Vector[(__std_test_vector0@ (std_test::Vector{.v=(v: std::Vec<bigint>)}: std_test::Vector))], (var sorted: std::Vec<bigint>) = ((var v2: std::Vec<bigint>) = v;
                                                                                                                                                                                                                                                      (std::sort(v2);
                                                                                                                                                                                                                                                       v2)), Inspect debug::debug_event((32'd1, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __std_test_vector0, (std_test::SortedVectorInPlace{.v=sorted}: std_test::SortedVectorInPlace)).
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0", .vec=std_test::vec0()}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.resize(10,-100)", .vec=((var v: std::Vec<std::s64>) = std_test::vec0();
                                                                                (std::resize(v, 64'd10, (- 64'sd100));
                                                                                 v))}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.update_nth(10, -1)", .vec=((var v: std::Vec<std::s64>) = std_test::vec0();
                                                                                   (std::update_nth(v, 64'd10, (- 64'sd1));
                                                                                    v))}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.update_nth(1, -1)", .vec=((var v: std::Vec<std::s64>) = std_test::vec0();
                                                                                  (std::update_nth(v, 64'd1, (- 64'sd1));
                                                                                   v))}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.swap_nth(10, -1)", .vec=((var v: std::Vec<std::s64>) = std_test::vec0();
                                                                                 ((var val: signed<64>) = (- 64'sd1);
                                                                                  (std::swap_nth(v, 64'd10, val);
                                                                                   (std::push(v, val);
                                                                                    v))))}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.swap_nth(5, -1)", .vec=((var v: std::Vec<std::s64>) = std_test::vec0();
                                                                                ((var val: signed<64>) = (- 64'sd1);
                                                                                 (std::swap_nth(v, 64'd5, val);
                                                                                  (std::push(v, val);
                                                                                   v))))}: std_test::IntVecTest)].
std_test::SetDifference[(std_test::SetDifference{.s1=s1, .s2=s2, .diff=(std::set_difference(s1, s2): std::Set<std::u64>)}: std_test::SetDifference)] :- std_test::SetPairs[(__std_test_setpairs0@ (std_test::SetPairs{.s1=(s1: std::Set<std::u64>), .s2=(s2: std::Set<std::u64>)}: std_test::SetPairs))], Inspect debug::debug_event((32'd8, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_setpairs0, (std_test::SetDifference{.s1=s1, .s2=s2, .diff=(std::set_difference(s1, s2): std::Set<std::u64>)}: std_test::SetDifference)).
std_test::SetDifference[(std_test::SetDifference{.s1=s2, .s2=s1, .diff=(std::set_difference(s2, s1): std::Set<std::u64>)}: std_test::SetDifference)] :- std_test::SetPairs[(__std_test_setpairs0@ (std_test::SetPairs{.s1=(s1: std::Set<std::u64>), .s2=(s2: std::Set<std::u64>)}: std_test::SetPairs))], Inspect debug::debug_event((32'd9, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_setpairs0, (std_test::SetDifference{.s1=s2, .s2=s1, .diff=(std::set_difference(s2, s1): std::Set<std::u64>)}: std_test::SetDifference)).
std_test::MapSizes[(std_test::MapSizes{.m=m, .size=std::size(m)}: std_test::MapSizes)] :- std_test::Maps[(__std_test_maps0@ (std_test::Maps{.m=(m: std::Map<std::u64,string>)}: std_test::Maps))], Inspect debug::debug_event((32'd10, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_maps0, (std_test::MapSizes{.m=m, .size=std::size(m)}: std_test::MapSizes)).
std_test::Pow[(std_test::Pow{.descr="pow32(2: u32, 32)", .val=("" ++ (std::__builtin_2string(std::pow32((32'd2: std::u32), 32'd32)): string))}: std_test::Pow)].
std_test::Pow[(std_test::Pow{.descr="$pow32(2: u64, 32)", .val=("" ++ (std::__builtin_2string(std::pow32((64'd2: std::u64), 32'd32)): string))}: std_test::Pow)].
std_test::Default[(std_test::Default{.descr="u32", .val=("" ++ (std::__builtin_2string((std::default(): std::u32)): string))}: std_test::Default)].
std_test::Default[(std_test::Default{.descr="DefaultEnum", .val=("" ++ (std_test::to_string((std::default(): std_test::DefaultEnum)): string))}: std_test::Default)].
std_test::MapDelete[(std_test::MapDelete{.descr="alphabet", .m=std_test::alphabet_map(), .s=(std::None{}: std::Option<string>)}: std_test::MapDelete)].
std_test::MapDelete[(std_test::MapDelete{.descr=((("" ++ d) ++ "\\") ++ (std::__builtin_2string((std::size(m) - 64'd1)): string)), .m=m2, .s=s}: std_test::MapDelete)] :- std_test::MapDelete[(__std_test_mapdelete0@ (std_test::MapDelete{.descr=(d: string), .m=(m: std::Map<std::usize,string>), .s=(_: std::Option<string>)}: std_test::MapDelete))], (std::size(m) > 64'd0), ((var m2: std::Map<std::usize,string>), (var s: std::Option<string>)) = ((var m2: std::Map<bit<64>,string>) = m;
                                                                                                                                                                                                                                                                                                                                                                                                                                                           ((var s: std::Option<string>) = (std::remove(m2, (std::size(m) - 64'd1)): std::Option<string>);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            (m2, s))), Inspect debug::debug_event((32'd16, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (d, m), (std_test::MapDelete{.descr=((("" ++ d) ++ "\\") ++ (std::__builtin_2string((std::size(m) - 64'd1)): string)), .m=m2, .s=s}: std_test::MapDelete)).
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::nil())", .result=uuid::to_hyphenated_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::nil())", .result=uuid::to_hyphenated_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::nil())", .result=uuid::to_simple_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::nil())", .result=uuid::to_simple_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::nil())", .result=uuid::to_urn_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::nil())", .result=uuid::to_urn_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(test_uuid_from_bytes())", .result=uuid::to_hyphenated_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(test_uuid_from_bytes())", .result=uuid::to_hyphenated_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(test_uuid_from_bytes())", .result=uuid::to_simple_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(test_uuid_from_bytes())", .result=uuid::to_simple_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(test_uuid_from_bytes())", .result=uuid::to_urn_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(test_uuid_from_bytes())", .result=uuid::to_urn_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_hyphenated_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_hyphenated_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_simple_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_simple_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_urn_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_urn_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::as_u128(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=std::hex(uuid::as_u128(uuid::from_u128(128'd5598655898992676486791281108989324119)))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_u128_le(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=std::hex(uuid::to_u128_le(uuid::from_u128(128'd5598655898992676486791281108989324119)))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=("" ++ (std::__builtin_2string(uuid::is_nil(uuid::from_u128(128'd5598655898992676486791281108989324119))): string))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::from_u128(0))", .result=("" ++ (std::__builtin_2string(uuid::is_nil(uuid::from_u128(128'd0))): string))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::nil())", .result=("" ++ (std::__builtin_2string(uuid::is_nil(uuid::nil())): string))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespace=nsA And podSelector=\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), std::string_to_bytes("namespace=nsA And podSelector=")))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespaceSelector=foo3 In [bar3] And podSelector=foo2 In [bar2]\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), std::string_to_bytes("namespaceSelector=foo3 In [bar3] And podSelector=foo2 In [bar2]")))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespace=nsA And podSelector=group In [appliedTo] And role In [db app]\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), std::string_to_bytes("namespace=nsA And podSelector=group In [appliedTo] And role In [db app]")))}: uuid_test::UUID)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_new(192, 168, 0, 1)", .value=("" ++ (net::ipv4::to_string(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_u32('h0a0b0c0d)", .value=("" ++ (net::ipv4::to_string(net::ipv4::ipv4_from_u32(32'd168496141)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_str(10.10.10.101)", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv4::ipv4_from_str("10.10.10.101"), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_str(10.10.10.10.1)", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv4::ipv4_from_str("10.10.10.10.1"), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_octet_vec(ipv4_octet_vec(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv4::ipv4_from_octet_vec(net::ipv4::ipv4_octet_vec(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_LOCALHOST()", .value=("" ++ (net::ipv4::to_string(net::ipv4::iPV4_LOCALHOST()): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_UNSPECIFIED()", .value=("" ++ (net::ipv4::to_string(net::ipv4::iPV4_UNSPECIFIED()): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_BROADCAST()", .value=("" ++ (net::ipv4::to_string(net::ipv4::iPV4_BROADCAST()): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_octets(ipv4_new(192,168,0,1))", .value=(((var a: bit<8>), (var b: bit<8>), (var c: bit<8>), (var d: bit<8>)) = net::ipv4::ipv4_octets(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1));
                                                                                                    (((((((("(" ++ (std::__builtin_2string(a): string)) ++ ",") ++ (std::__builtin_2string(b): string)) ++ ",") ++ (std::__builtin_2string(c): string)) ++ ",") ++ (std::__builtin_2string(d): string)) ++ ")"))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_unspecified(iPV4_UNSPECIFIED())", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_unspecified(net::ipv4::iPV4_UNSPECIFIED())): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_unspecified(ipv4_new(10,0,0,0))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_unspecified(net::ipv4::ipv4_new(8'd10, 8'd0, 8'd0, 8'd0))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_loopback(ipv4_new(127,0,0,5))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_loopback(net::ipv4::ipv4_new(8'd127, 8'd0, 8'd0, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_loopback(ipv4_new(128,0,0,5))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_loopback(net::ipv4::ipv4_new(8'd128, 8'd0, 8'd0, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(127,0,0,5))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd127, 8'd0, 8'd0, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(193,5,5,5))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd193, 8'd5, 8'd5, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(10,10,10,101))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd10, 8'd10, 8'd10, 8'd101))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(172,16,1,2))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd172, 8'd16, 8'd1, 8'd2))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(192,168,10,12))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_link_local(ipv4_new(192,168,10,12))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_link_local(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_link_local(ipv4_new(169,254,1,1))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_link_local(net::ipv4::ipv4_new(8'd169, 8'd254, 8'd1, 8'd1))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_multicast(ipv4_new(173,10,10,12))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_multicast(net::ipv4::ipv4_new(8'd173, 8'd10, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_multicast(ipv4_new(230,254,1,1))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_multicast(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(iPV4_BROADCAST())", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_broadcast(net::ipv4::iPV4_BROADCAST())): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(ipv4_new(230,254,1,1))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_broadcast(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(ipv4_new(255,255,255,255))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_broadcast(net::ipv4::ipv4_new(8'd255, 8'd255, 8'd255, 8'd255))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(192,0,2,10))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(198,51,100,5))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(203,0,113,101))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(175,16,1,2))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(192,168,10,12))", .value=("" ++ (std::__builtin_2string(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(192,0,2,10))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(198,51,100,5))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(203,0,113,101))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(175,16,1,2))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(192,168,10,12))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(192,0,2,10))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(198,51,100,5))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(203,0,113,101))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(175,16,1,2))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(192,168,10,12))", .value=("" ++ (net::ipv6::to_string(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(192,0,2,10))", .value=("" ++ std::hex(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(198,51,100,5))", .value=("" ++ std::hex(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(203,0,113,101))", .value=("" ++ std::hex(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(175,16,1,2))", .value=("" ++ std::hex(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(192,168,10,12))", .value=("" ++ std::hex(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)", .value=("" ++ (net::ipv6::to_string(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV6_LOCALHOST()", .value=("" ++ (net::ipv6::to_string(net::ipv6::iPV6_LOCALHOST()): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV6_UNSPECIFIED()", .value=("" ++ (net::ipv6::to_string(net::ipv6::iPV6_UNSPECIFIED()): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_segment_vec(net::ipv6::ipv6_segment_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff, 'h10)))", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_segment_vec((std::vec_push_imm(net::ipv6::ipv6_segment_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), 16'd16): std::Vec<std::u16>)), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octets(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'hff, 'hff, 'hc0, 'h0a, 'h2, 'hff)", .value=("" ++ (net::ipv6::to_string(net::ipv6::ipv6_from_octets(8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd255, 8'd255, 8'd192, 8'd10, 8'd2, 8'd255)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octet_vec(ipv6_octet_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_octet_vec(net::ipv6::ipv6_octet_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_u128(128'h102030405060708090A0B0C0D0E0F00)", .value=("" ++ (net::ipv6::to_string(net::ipv6::ipv6_from_u128(128'd1339673755198158349044581307228491520)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(102:304:506:708:90a:b0c:d0e:f00)", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_str("102:304:506:708:90a:b0c:d0e:f00"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::ffff:192.10.2.255)", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::175.16.1.2)", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_str("::175.16.1.2"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(ffff:192.10.2.255)", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_str("ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::)", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_str("::"), net::ipv6::iPV6_LOCALHOST()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_u128(ipv6_from_str(::ffff:192.10.2.255))", .value=("" ++ std::hex(net::ipv6::ipv6_to_u128((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_segments(ipv6_from_str(::ffff:192.10.2.255))", .value=(((var a: bit<16>), (var b: bit<16>), (var c: bit<16>), (var d: bit<16>), (var e: bit<16>), (var f: bit<16>), (var g: bit<16>), (var h: bit<16>)) = net::ipv6::ipv6_segments((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr));
                                                                                                                   (((((((((((((((("(" ++ (std::__builtin_2string(a): string)) ++ ",") ++ (std::__builtin_2string(b): string)) ++ ",") ++ (std::__builtin_2string(c): string)) ++ ",") ++ (std::__builtin_2string(d): string)) ++ ",") ++ (std::__builtin_2string(e): string)) ++ ",") ++ (std::__builtin_2string(f): string)) ++ ",") ++ (std::__builtin_2string(g): string)) ++ ",") ++ (std::__builtin_2string(h): string)) ++ ")"))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_octets(ipv6_from_str(::ffff:192.10.2.255))", .value=(((var a: bit<8>), (var b: bit<8>), (var c: bit<8>), (var d: bit<8>), (var e: bit<8>), (var f: bit<8>), (var g: bit<8>), (var h: bit<8>), (var i: bit<8>), (var j: bit<8>), (var k: bit<8>), (var l: bit<8>), (var m: bit<8>), (var n: bit<8>), (var o: bit<8>), (var p: bit<8>)) = net::ipv6::ipv6_octets((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr));
                                                                                                                 (((((((((((((((((((((((((((((((("(" ++ (std::__builtin_2string(a): string)) ++ ",") ++ (std::__builtin_2string(b): string)) ++ ",") ++ (std::__builtin_2string(c): string)) ++ ",") ++ (std::__builtin_2string(d): string)) ++ ",") ++ (std::__builtin_2string(e): string)) ++ ",") ++ (std::__builtin_2string(f): string)) ++ ",") ++ (std::__builtin_2string(g): string)) ++ ",") ++ (std::__builtin_2string(h): string)) ++ ",") ++ (std::__builtin_2string(i): string)) ++ ",") ++ (std::__builtin_2string(j): string)) ++ ",") ++ (std::__builtin_2string(k): string)) ++ ",") ++ (std::__builtin_2string(l): string)) ++ ",") ++ (std::__builtin_2string(m): string)) ++ ",") ++ (std::__builtin_2string(n): string)) ++ ",") ++ (std::__builtin_2string(o): string)) ++ ",") ++ (std::__builtin_2string(p): string)) ++ ")"))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_from_str(::ffff:192.10.2.255)))", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_segment_vec(net::ipv6::ipv6_segment_vec((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr))), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octet_vec(ipv6_octet_vec(ipv6_from_str(::ffff:192.10.2.255)))", .value=("" ++ (net::ipv6::to_string((std::unwrap_or(net::ipv6::ipv6_from_octet_vec(net::ipv6::ipv6_octet_vec((std::unwrap_or(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr))), net::ipv6::iPV6_UNSPECIFIED()): net::ipv6::Ipv6Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_unspecified(iPV6_UNSPECIFIED())", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_unspecified(net::ipv6::iPV6_UNSPECIFIED())): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_unspecified(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_unspecified(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_loopback(iPV6_LOCALHOST())", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_loopback(net::ipv6::iPV6_LOCALHOST())): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_loopback(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_loopback(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_multicast(ipv6_new('hff01, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_multicast(net::ipv6::ipv6_new(16'd65281, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_multicast(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (std::__builtin_2string(net::ipv6::ipv6_is_multicast(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(192,0,2,10)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(198,51,100,5)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(203,0,113,101)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(175,16,1,2)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(192,168,10,12)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(192,0,2,10)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(198,51,100,5)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(203,0,113,101)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(175,16,1,2)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(192,168,10,12)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv6_new('h0a0b, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv4::to_string((std::unwrap_or(net::ipv6::ipv6_to_ipv4(net::ipv6::ipv6_new(16'd2571, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), net::ipv4::iPV4_UNSPECIFIED()): net::ipv4::Ipv4Addr)): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1))", .value=("" ++ (net::ipaddr::to_string(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (net::ipaddr::to_string(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv6(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv6(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv6(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv6(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv4addr(iPV4_UNSPECIFIED()))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::iPV4_UNSPECIFIED()))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv6addr(iPV6_UNSPECIFIED()))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::iPV6_UNSPECIFIED()))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv4addr(iPV4_LOCALHOST()))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::iPV4_LOCALHOST()))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv6addr(iPV6_LOCALHOST()))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::iPV6_LOCALHOST()))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv4addr(ipv4_new(230, 254, 1, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv6addr(ipv6_new('hff01, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd65281, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))): string))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (std::__builtin_2string(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))): string))}: net_test::NetChecks)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::boolStruct1()): std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::boolStruct2()): std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct3(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::boolStruct3()): std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::nestedStruct1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::nestedStruct1()): std::Result<json_test::Top,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::flattenedStruct1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::flattenedStruct1()): std::Result<json_test::TopFlat,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::array1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::array1()): std::Result<json_test::Array,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::map1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::map1()): std::Result<json_test::BoolMap,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::enum1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::enum1()): std::Result<json_test::Enum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::enum2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::enum2()): std::Result<json_test::Enum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::tenum1()): std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::tenum2()): std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum3(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::tenum3()): std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::scalar1()): std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::scalar2()): std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar3(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::scalar3()): std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar4(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::scalar4()): std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar5(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::scalar5()): std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::ODeserialized[x] :- json_test::Deserialized[(__json_test_deserialized0@ (x: json_test::TaggedEnum))], Inspect debug::debug_event((32'd173, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __json_test_deserialized0, x).
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::optional1()): std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::optional2()): std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional3(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::optional3()): std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional4(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::optional4()): std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::struct_with_map1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::struct_with_map1()): std::Result<json_test::StructWithMap,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::u64FromString1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::u64FromString1()): std::Result<json_test::U64FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::u64FromString2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::u64FromString2()): std::Result<json_test::U64FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::s32FromString1(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::s32FromString1()): std::Result<json_test::S32FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::s32FromString2(), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::s32FromString2()): std::Result<json_test::S32FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum1()), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::wenum1()): std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum2()), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::wenum2()): std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum3()), .value=json_test::to_json_string_or_default((json::from_json_string(json_test::wenum3()): std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum1()), .value=json_test::to_json_string_or_default((std::unwrap_or_default(json::to_json_value((json::from_json_string(json_test::wenum1()): std::Result<json_test::WrappedEnum,string>))): json::JsonValue))}: json_test::JsonTestValue)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum2()), .value=json_test::to_json_string_or_default((std::unwrap_or_default(json::to_json_value((json::from_json_string(json_test::wenum2()): std::Result<json_test::WrappedEnum,string>))): json::JsonValue))}: json_test::JsonTestValue)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum3()), .value=json_test::to_json_string_or_default((std::unwrap_or_default(json::to_json_value((json::from_json_string(json_test::wenum3()): std::Result<json_test::WrappedEnum,string>))): json::JsonValue))}: json_test::JsonTestValue)].
json_test::JsonTest[(json_test::JsonTest{.description="set_by_ptr test", .value=json_test::to_json_string_or_default(json_test::mutilate_jval())}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr(nested/z/10/b)", .value=(std::unwrap_or_default(json::to_json_string(json::get_by_ptr(json_test::mutilate_jval(), ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd4): std::Vec<json::JsonPtrItem>);
                                                                                                                                                                                     (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                      (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                       (std::push(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                                                                                                                                                                        (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("b"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                         __vec)))))))): string)}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr(nested/z/10/c)", .value=(std::unwrap_or_default(json::to_json_string(json::get_by_ptr(json_test::mutilate_jval(), ((var __vec: std::Vec<json::JsonPtrItem>) = (std::vec_with_capacity(64'd4): std::Vec<json::JsonPtrItem>);
                                                                                                                                                                                     (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("nested"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                      (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("z"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                       (std::push(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                                                                                                                                                                        (std::push(__vec, (json::JKeyPtr{.key=(internment::intern("c"): internment::Intern<string>)}: json::JsonPtrItem));
                                                                                                                                                                                         __vec)))))))): string)}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr([])", .value=(std::unwrap_or_default(json::to_json_string(json::get_by_ptr(json_test::mutilate_jval(), (std::vec_empty(): std::Vec<json::JsonPtrItem>)))): string)}: json_test::JsonTest)].
fp_test::F[(fp_test::F{.s="nan_f()", .d=fp::nan_f()}: fp_test::F)].
fp_test::F[(fp_test::F{.s="floor_f(32'f0.5)", .d=fp::floor_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="ceil_f(32'f0.5)", .d=fp::ceil_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="round_f(32'f0.5)", .d=fp::round_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="trunc_f(32'f0.5)", .d=fp::trunc_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="fract_f(32'f0.5)", .d=fp::fract_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="abs_f(32'f0.5)", .d=fp::abs_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="signum_f(32'f0.5)", .d=fp::signum_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sqrt_f(32'f0.5)", .d=fp::sqrt_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="exp_f(32'f0.5)", .d=fp::exp_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="exp2_f(32'f0.5)", .d=fp::exp2_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="ln_f(32'f0.5)", .d=fp::ln_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log2_f(32'f0.5)", .d=fp::log2_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log10_f(32'f0.5)", .d=fp::log10_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cbrt_f(32'f0.5)", .d=fp::cbrt_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sin_f(32'f0.5)", .d=fp::sin_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cos_f(32'f0.5)", .d=fp::cos_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="tan_f(32'f0.5)", .d=fp::tan_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="asin_f(32'f0.5)", .d=fp::asin_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="acos_f(32'f0.5)", .d=fp::acos_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atan_f(32'f0.5)", .d=fp::atan_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sinh_f(32'f0.5)", .d=fp::sinh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cosh_f(32'f0.5)", .d=fp::cosh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="tanh_f(32'f0.5)", .d=fp::tanh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="asinh_f(32'f0.5)", .d=fp::asinh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="acosh_f(32'f0.5)", .d=fp::acosh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atanh_f(32'f0.5)", .d=fp::atanh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="recip_f(32'f0.5)", .d=fp::recip_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="to_degrees_f(32'f0.5)", .d=fp::to_degrees_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="to_radians_f(32'f0.5)", .d=fp::to_radians_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atan2_f(32'f0.5, 32'f2.0)", .d=fp::atan2_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::BB[(fp_test::BB{.s="is_nan_f(32'f0.5)", .b=fp::is_nan_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_f(32'f0.5)", .b=fp::is_infinite_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_f(32'f0.5)", .b=fp::is_finite_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_nan_f(nan_f())", .b=fp::is_nan_f(fp::nan_f())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_f(nan_f())", .b=fp::is_infinite_f(fp::nan_f())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_f(nan_f())", .b=fp::is_finite_f(fp::nan_f())}: fp_test::BB)].
fp_test::F[(fp_test::F{.s="mul_add_f(32'f0.5, 32'f2.2, 32'f2.3)", .d=fp::mul_add_f(32'f0.5, 32'f2.2, 32'f2.3)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="powi_f(32'f0.5, 32'sd5)", .d=fp::powi_f(32'f0.5, 32'sd5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="powf_f(32'f0.5, 32f'5.0)", .d=fp::powf_f(32'f0.5, 32'f5.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log_f(32'f0.5, 32f'2.0)", .d=fp::log_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log_f(5E-1, 2.0)", .d=fp::log_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="result_unwrap_or_default(parse_f(\"0.02\"))", .d=(std::result_unwrap_or_default(fp::parse_f("0.02")): float)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="result_unwrap_or_default(parse_f(\"blah\"))", .d=(std::result_unwrap_or_default(fp::parse_f("blah")): float)}: fp_test::F)].
fp_test::D[(fp_test::D{.s="nan_d()", .d=fp::nan_d()}: fp_test::D)].
fp_test::D[(fp_test::D{.s="floor_d(64'f0.5)", .d=fp::floor_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="floor_d(0.6)", .d=fp::floor_d(64'f0.6)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="ceil_d(64'f0.5)", .d=fp::ceil_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="round_d(64'f0.5)", .d=fp::round_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="trunc_d(64'f0.5)", .d=fp::trunc_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="fract_d(64'f0.5)", .d=fp::fract_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="abs_d(64'f0.5)", .d=fp::abs_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="signum_d(64'f0.5)", .d=fp::signum_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sqrt_d(64'f0.5)", .d=fp::sqrt_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="exp_d(64'f0.5)", .d=fp::exp_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="exp2_d(64'f0.5)", .d=fp::exp2_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="ln_d(64'f0.5)", .d=fp::ln_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log2_d(64'f0.5)", .d=fp::log2_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log10_d(64'f0.5)", .d=fp::log10_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cbrt_d(64'f0.5)", .d=fp::cbrt_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sin_d(64'f0.5)", .d=fp::sin_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cos_d(64'f0.5)", .d=fp::cos_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="tan_d(64'f0.5)", .d=fp::tan_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="asin_d(64'f0.5)", .d=fp::asin_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="acos_d(64'f0.5)", .d=fp::acos_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atan_d(64'f0.5)", .d=fp::atan_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sinh_d(64'f0.5)", .d=fp::sinh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cosh_d(64'f0.5)", .d=fp::cosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cosh_d(5e-1)", .d=fp::cosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="tanh_d(64'f0.5)", .d=fp::tanh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="asinh_d(64'f0.5)", .d=fp::asinh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="acosh_d(64'f0.5)", .d=fp::acosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atanh_d(64'f0.5)", .d=fp::atanh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="recip_d(64'f0.5)", .d=fp::recip_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="to_degrees_d(64'f0.5)", .d=fp::to_degrees_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="to_radians_d(64'f0.5)", .d=fp::to_radians_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atan2_d(64'f0.5, 64'f2.0)", .d=fp::atan2_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::BB[(fp_test::BB{.s="is_nan_d(64'f0.5)", .b=fp::is_nan_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_d(64'f0.5)", .b=fp::is_infinite_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_d(64'f0.5)", .b=fp::is_finite_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_nan_d(nan_d())", .b=fp::is_nan_d(fp::nan_d())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_d(nan_d())", .b=fp::is_infinite_d(fp::nan_d())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_d(nan_d())", .b=fp::is_finite_d(fp::nan_d())}: fp_test::BB)].
fp_test::D[(fp_test::D{.s="mul_add_d(64'f0.5, 64'f2.2, 64'f2.3)", .d=fp::mul_add_d(64'f0.5, 64'f2.2, 64'f2.3)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="powi_d(64'f0.5, 32'sd5)", .d=fp::powi_d(64'f0.5, 32'sd5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="powf_d(64'f0.5, 32f'5.0)", .d=fp::powf_d(64'f0.5, 64'f5.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log_d(64'f0.5, 32f'2.0)", .d=fp::log_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log_d(0.5, 2.0)", .d=fp::log_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="result_unwrap_or_default(parse_d(\"0.02\"))", .d=(std::result_unwrap_or_default(fp::parse_d("0.02")): double)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="result_unwrap_or_default(parse_d(\"blah\"))", .d=(std::result_unwrap_or_default(fp::parse_d("blah")): double)}: fp_test::D)].
fp_test::OutFloatsFromRecord[x] :- fp_test::FloatsFromRecord[(__fp_test_floatsfromrecord0@ (x: fp_test::FloatsFromRecord))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __fp_test_floatsfromrecord0, x).
fp_test::OutDoublesFromRecord[x] :- fp_test::DoublesFromRecord[(__fp_test_doublesfromrecord0@ (x: fp_test::DoublesFromRecord))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __fp_test_doublesfromrecord0, x).
regex_test::RegexTestInput[(regex_test::RegexTestInput{.regex="\\d+", .text="a111b222c"}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.regex="\\b\\w{13}\\b", .text="I categorically deny having triskaidekaphobia."}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.regex="'([^']+)'\\s+\\((\\d{4})\\)", .text="Not my favorite movie: 'Citizen Kane' (1941)."}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.regex="[", .text="foo"}: regex_test::RegexTestInput)].
regex_test::RegexTestOutput[(regex_test::RegexTestOutput{.regex=regex, .text=text, .match_found=regex::regex_match(regex::regex(regex), text), .match_found_checked=regex::regex_match((std::unwrap_or(regex::regex_checked(regex), regex::regex("")): regex::Regex), text), .first_match=regex::regex_first_match(regex::regex(regex), text), .all_matches=regex::regex_all_matches(regex::regex(regex), text)}: regex_test::RegexTestOutput)] :- regex_test::RegexTestInput[(__regex_test_regextestinput0@ (regex_test::RegexTestInput{.regex=(regex: string), .text=(text: string)}: regex_test::RegexTestInput))], Inspect debug::debug_event((32'd289, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __regex_test_regextestinput0, (regex_test::RegexTestOutput{.regex=regex, .text=text, .match_found=regex::regex_match(regex::regex(regex), text), .match_found_checked=regex::regex_match((std::unwrap_or(regex::regex_checked(regex), regex::regex("")): regex::Regex), text), .first_match=regex::regex_first_match(regex::regex(regex), text), .all_matches=regex::regex_all_matches(regex::regex(regex), text)}: regex_test::RegexTestOutput)).
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern("static foo"): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern("ifoo"): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern("ibar"): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern(("ifoo" ++ (std::__builtin_2string(64'd25): string))): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern((("ifoo" ++ (std::__builtin_2string(64'd25): string)) ++ "!")): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern(("ibar" ++ (std::__builtin_2string((64'd2 + 64'd2)): string))): internment::Intern<string>)}: internment_test::StaticInternedString)].
internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)] :- internment_test::IInternedString[(__internment_test_iinternedstring0@ (internment_test::IInternedString{.ix=(ix: internment::Intern<string>)}: internment_test::IInternedString))], Inspect debug::debug_event((32'd296, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_iinternedstring0, (internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)).
internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)] :- internment_test::StaticInternedString[(__internment_test_staticinternedstring0@ (internment_test::StaticInternedString{.ix=(ix: internment::Intern<string>)}: internment_test::StaticInternedString))], Inspect debug::debug_event((32'd297, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_staticinternedstring0, (internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)).
internment_test::OInternedString[(internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event((32'd298, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_allinternedstring0, (internment_test::OInternedString{.x=(internment::ival(s): string), .ix=s}: internment_test::OInternedString)).
internment_test::OInternedString[(internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ " ") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ " ") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s1: internment::Intern<string>)}: internment_test::AllInternedString))], internment_test::AllInternedString[(__internment_test_allinternedstring1@ (internment_test::AllInternedString{.ix=(s2: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event_join((32'd299, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __internment_test_allinternedstring0, __internment_test_allinternedstring1, (internment_test::OInternedString{.x=(((internment::ival(s1): string) ++ " ") ++ (internment::ival(s2): string)), .ix=(internment::intern((((internment::ival(s1): string) ++ " ") ++ (internment::ival(s2): string))): internment::Intern<string>)}: internment_test::OInternedString)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=("x=" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)] :- internment_test::IStruct[(__internment_test_istruct0@ ((&(i: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd300, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_istruct0, (internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=("x=" ++ (std::__builtin_2string(i.x): string))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("t.0=" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd301, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("t.0=" ++ (std::__builtin_2string(i.t.0): string))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("t.1=" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd302, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("t.1=" ++ (std::__builtin_2string(i.t.1): string))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f1=" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd303, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f1=" ++ (std::__builtin_2string(f1): string))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f2=" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(t@ (internment_test::Tag2{.f2=(f2: bit<32>), .f3=(_: string)}: internment_test::IUnion))): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd304, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f2=" ++ (std::__builtin_2string(f2): string))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f3=" ++ f3)}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(t@ ((&(internment_test::Tag2{.f2=(_: bit<32>), .f3=(f3: string)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>)), .t=(_: internment::Intern<(std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd305, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival(i): internment_test::IStruct)), .p=("f3=" ++ f3)}: internment_test::Projections)).
tinyset_test::Sets[(tinyset_test::Sets{.setid=setid, .set=set}: tinyset_test::Sets)] :- tinyset_test::SetElement[(__tinyset_test_setelement0@ (tinyset_test::SetElement{.setid=(setid: string), .element=(v: bit<32>)}: tinyset_test::SetElement))], var __inputs_set = Aggregate(setid, __debug_306_1_tinyset::group_to_set((__tinyset_test_setelement0, v))), Inspect debug::debug_event((32'd306, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_set.0, (__inputs_set, setid)), (var set: tinyset::Set64<bit<32>>) = __inputs_set.1, Inspect debug::debug_event((32'd306, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_set, setid), (tinyset_test::Sets{.setid=setid, .set=set}: tinyset_test::Sets)).
tinyset_test::Intersects[(tinyset_test::Intersects{.setid1=setid1, .setid2=setid2, .set=set}: tinyset_test::Intersects)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd307, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (setid1, set1, setid2, set2)), (var set: tinyset::Set64<std::u32>) = ((var set: tinyset::Set64<std::u32>) = (tinyset::empty(): tinyset::Set64<std::u32>);
for (x in set1) {
if tinyset::contains(set2, x) {
tinyset::insert(set, x)
} else {

}
};
set)), Inspect debug::debug_event((32'd307, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (setid1, set1, setid2, set2), (tinyset_test::Intersects{.setid1=setid1, .setid2=setid2, .set=set}: tinyset_test::Intersects)).
tinyset_test::Intersects2[(tinyset_test::Intersects2{.setid1=setid1, .setid2=setid2, .set=(tinyset::intersection(set1, set2): tinyset::Set64<std::u32>)}: tinyset_test::Intersects2)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd308, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (tinyset_test::Intersects2{.setid1=setid1, .setid2=setid2, .set=(tinyset::intersection(set1, set2): tinyset::Set64<std::u32>)}: tinyset_test::Intersects2)).
tinyset_test::Diffs[(tinyset_test::Diffs{.setid1=setid1, .setid2=setid2, .set=(tinyset::difference(set1, set2): tinyset::Set64<std::u32>)}: tinyset_test::Diffs)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd309, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (tinyset_test::Diffs{.setid1=setid1, .setid2=setid2, .set=(tinyset::difference(set1, set2): tinyset::Set64<std::u32>)}: tinyset_test::Diffs)).
url_test::URLTest[(url_test::URLTest{.description="https://example.net", .val=url::to_string((std::unwrap_or_default(url::url_parse("https://example.net")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.net/a/b.html\".join(\"c.png\")", .val=url::to_string((std::unwrap_or_default(url::join((std::unwrap_or_default(url::url_parse("https://example.net/a/b.html")): url::Url), "c.png")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"file:///tmp/foo\".scheme()", .val=url::scheme((std::unwrap_or_default(url::url_parse("file:///tmp/foo")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".has_authority()", .val=std::to_string(url::has_authority((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".has_authority()", .val=std::to_string(url::has_authority((std::unwrap_or_default(url::url_parse("unix:/run/foo.socket")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".has_authority()", .val=std::to_string(url::has_authority((std::unwrap_or_default(url::url_parse("data:text/plain,Stuff")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".cannot_be_a_base()", .val=std::to_string(url::cannot_be_a_base((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".cannot_be_a_base()", .val=std::to_string(url::cannot_be_a_base((std::unwrap_or_default(url::url_parse("unix:/run/foo.socket")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".cannot_be_a_base()", .val=std::to_string(url::cannot_be_a_base((std::unwrap_or_default(url::url_parse("data:text/plain,Stuff")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".username()", .val=url::username((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://:secret123@example.com\".username()", .val=url::username((std::unwrap_or_default(url::url_parse("ftp://:secret123@example.com")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".username()", .val=url::username((std::unwrap_or_default(url::url_parse("https://example.com")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms:secret123@example.com\".password()", .val=(std::unwrap_or_default(url::password((std::unwrap_or_default(url::url_parse("ftp://rms:secret123@example.com")): url::Url))): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://:secret123@example.com\".password()", .val=(std::unwrap_or_default(url::password((std::unwrap_or_default(url::url_parse("ftp://:secret123@example.com")): url::Url))): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".password()", .val=(std::unwrap_or_default(url::password((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url))): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".password()", .val=(std::unwrap_or_default(url::password((std::unwrap_or_default(url::url_parse("https://example.com")): url::Url))): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".has_host()", .val=std::to_string(url::has_host((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".has_host()", .val=std::to_string(url::has_host((std::unwrap_or_default(url::url_parse("unix:/run/foo.socket")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".has_host()", .val=std::to_string(url::has_host((std::unwrap_or_default(url::url_parse("data:text/plain,Stuff")): url::Url)))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://127.0.0.1/index.html\".host_str()", .val=(std::unwrap_or(url::host_str((std::unwrap_or_default(url::url_parse("https://127.0.0.1/index.html")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".host_str()", .val=(std::unwrap_or(url::host_str((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".host_str()", .val=(std::unwrap_or(url::host_str((std::unwrap_or_default(url::url_parse("unix:/run/foo.socket")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".host_str()", .val=(std::unwrap_or(url::host_str((std::unwrap_or_default(url::url_parse("data:text/plain,Stuff")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://127.0.0.1/index.html\".domain()", .val=(std::unwrap_or(url::domain((std::unwrap_or_default(url::url_parse("https://127.0.0.1/index.html")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".domain()", .val=(std::unwrap_or(url::domain((std::unwrap_or_default(url::url_parse("ftp://rms@example.com")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".domain()", .val=(std::unwrap_or(url::domain((std::unwrap_or_default(url::url_parse("unix:/run/foo.socket")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".domain()", .val=(std::unwrap_or(url::domain((std::unwrap_or_default(url::url_parse("data:text/plain,Stuff")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".port()", .val=std::to_string((std::unwrap_or_default(url::port((std::unwrap_or_default(url::url_parse("https://example.com")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com:443/\".port()", .val=std::to_string((std::unwrap_or_default(url::port((std::unwrap_or_default(url::url_parse("https://example.com:443/")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ssh://example.com:22\".port()", .val=std::to_string((std::unwrap_or_default(url::port((std::unwrap_or_default(url::url_parse("ssh://example.com:22")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".port_or_known_default()", .val=std::to_string((std::unwrap_or_default(url::port_or_known_default((std::unwrap_or_default(url::url_parse("https://example.com")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com:443/\".port_or_known_default()", .val=std::to_string((std::unwrap_or_default(url::port_or_known_default((std::unwrap_or_default(url::url_parse("https://example.com:443/")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ssh://example.com:22\".port_or_known_default()", .val=std::to_string((std::unwrap_or_default(url::port_or_known_default((std::unwrap_or_default(url::url_parse("ssh://example.com:22")): url::Url))): bit<16>))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/api/versions?page=2\".path()", .val=url::path((std::unwrap_or_default(url::url_parse("https://example.com/api/versions?page=2")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".path()", .val=url::path((std::unwrap_or_default(url::url_parse("https://example.com")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/countries/vi\7879t nam\".path()", .val=url::path((std::unwrap_or_default(url::url_parse("https://example.com/countries/vi\7879t nam")): url::Url))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/products?page=2\".query()", .val=(std::unwrap_or(url::query((std::unwrap_or_default(url::url_parse("https://example.com/products?page=2")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/products\".query()", .val=(std::unwrap_or(url::query((std::unwrap_or_default(url::url_parse("https://example.com/products")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/?country=espa\241ol\".query()", .val=(std::unwrap_or(url::query((std::unwrap_or_default(url::url_parse("https://example.com/?country=espa\241ol")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/data.csv#row=4\".fragment()", .val=(std::unwrap_or(url::fragment((std::unwrap_or_default(url::url_parse("https://example.com/data.csv#row=4")): url::Url)), "<none>"): string)}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/data.csv#cell=4,1-6,2\".fragment()", .val=(std::unwrap_or(url::fragment((std::unwrap_or_default(url::url_parse("https://example.com/data.csv#cell=4,1-6,2")): url::Url)), "<none>"): string)}: url_test::URLTest)].

