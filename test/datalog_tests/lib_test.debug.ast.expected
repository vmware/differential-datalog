typedef ddlog_std::DDEpoch = ddlog_std::u64
typedef ddlog_std::DDIteration = ddlog_std::u64
typedef ddlog_std::DDNestedTS = ddlog_std::DDNestedTS{epoch: ddlog_std::DDEpoch, iter: ddlog_std::DDIteration}
typedef ddlog_std::DDWeight = ddlog_std::s64
typedef ddlog_std::Either<'A,'B> = ddlog_std::Left{l: 'A} |
                                   ddlog_std::Right{r: 'B}
extern type ddlog_std::Group<'K,'V>
extern type ddlog_std::Map<'K,'V>
#[rust = "serde(from=\"::std::option::Option<A>\", into=\"::std::option::Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
#[custom_from_record = true]
typedef ddlog_std::Option<'A> = ddlog_std::None{} |
                                ddlog_std::Some{x: 'A}
#[size = 8]
#[shared_ref = true]
extern type ddlog_std::Ref<'A>
typedef ddlog_std::Result<'V,'E> = ddlog_std::Ok{res: 'V} |
                                   ddlog_std::Err{err: 'E}
extern type ddlog_std::Set<'A>
extern type ddlog_std::Vec<'A>
#[alias = true]
typedef ddlog_std::isize = signed<64>
typedef ddlog_std::s128 = signed<128>
typedef ddlog_std::s16 = signed<16>
typedef ddlog_std::s32 = signed<32>
typedef ddlog_std::s64 = signed<64>
typedef ddlog_std::s8 = signed<8>
#[alias = true]
typedef ddlog_std::u128 = bit<128>
#[alias = true]
typedef ddlog_std::u16 = bit<16>
#[alias = true]
typedef ddlog_std::u32 = bit<32>
#[alias = true]
typedef ddlog_std::u64 = bit<64>
#[alias = true]
typedef ddlog_std::u8 = bit<8>
#[alias = true]
typedef ddlog_std::usize = bit<64>
typedef debug::DDlogOpId = (ddlog_std::u32, ddlog_std::u32, ddlog_std::u32)
typedef fp_test::BB = fp_test::BB{s: string, b: bool}
typedef fp_test::D = fp_test::D{s: string, d: double}
typedef fp_test::DoublesFromRecord = fp_test::DoublesFromRecord{s: string, d: double}
typedef fp_test::F = fp_test::F{s: string, d: float}
typedef fp_test::FloatsFromRecord = fp_test::FloatsFromRecord{s: string, f: float}
#[size = 8]
#[shared_ref = true]
extern type internment::Intern<'A>
typedef internment::istring = internment::Intern<string>
typedef internment_test::AllInternedString = internment_test::AllInternedString{ix: internment::istring}
typedef internment_test::IInternedString = internment_test::IInternedString{ix: internment::istring}
typedef internment_test::IStruct = internment_test::IStruct{u: internment::Intern<internment_test::IUnion>, t: internment::Intern<(ddlog_std::s32, double)>, x: bigint}
typedef internment_test::IUnion = internment_test::Tag1{f1: bool} |
                                  internment_test::Tag2{f2: ddlog_std::u32, f3: string}
typedef internment_test::OInternedString = internment_test::OInternedString{x: string, ix: internment::istring}
typedef internment_test::Projections = internment_test::Projections{inp: internment_test::Struct, p: string}
typedef internment_test::StaticInternedString = internment_test::StaticInternedString{ix: internment::istring}
typedef internment_test::Struct = internment_test::Struct{u: internment_test::IUnion, t: (ddlog_std::s32, double), x: bigint}
typedef json::JsonNum = json::JsonInt{i: ddlog_std::s128} |
                        json::JsonFloat{d: double}
typedef json::JsonPtr = ddlog_std::Vec<json::JsonPtrItem>
typedef json::JsonPtrItem = json::JKeyPtr{key: internment::istring} |
                            json::JIdxPtr{idx: ddlog_std::usize}
#[rust = "serde(from = \"ValueWrapper\", into = \"ValueWrapper\")"]
typedef json::JsonValue = json::JsonNull{} |
                          json::JsonBool{b: bool} |
                          json::JsonNumber{n: json::JsonNum} |
                          json::JsonString{s: internment::istring} |
                          json::JsonArray{a: ddlog_std::Vec<json::JsonValue>} |
                          json::JsonObject{o: ddlog_std::Map<internment::istring,json::JsonValue>}
#[custom_serde = true]
typedef json::JsonWrapper<'T> = json::JsonWrapper{x: 'T}
typedef json_test::Array = ddlog_std::Vec<json_test::BoolStruct>
typedef json_test::BoolMap = ddlog_std::Map<string,json_test::BoolStruct>
typedef json_test::BoolStruct = json_test::BoolStruct{b: bool}
typedef json_test::Enum = #[rust = "serde(rename = \"Variant1\")"]
                          json_test::Variant1{b: bool} |
                          #[rust = "serde(rename = \"Variant2\")"]
                          json_test::Variant2{u: ddlog_std::u32}
typedef json_test::JsonTest = json_test::JsonTest{description: string, value: string}
typedef json_test::JsonTestValue = json_test::JsonTestValue{description: string, value: string}
typedef json_test::Nested = json_test::Nested{x: string, z: ddlog_std::u64}
typedef json_test::Optional = json_test::Optional{s: ddlog_std::Option<string>, i: ddlog_std::Option<ddlog_std::u64>, v: ddlog_std::Option<json::JsonValue>}
typedef json_test::S32FromString = json_test::S32FromString{#[rust = "serde(with=\"crate::json::serde_string\")"] x: ddlog_std::s32}
typedef json_test::StructWithKey = json_test::StructWithKey{key: ddlog_std::u64, payload: string}
typedef json_test::StructWithMap = json_test::StructWithMap{#[deserialize_from_array = json_test::key_structWithKey()] f: ddlog_std::Map<ddlog_std::u64,json_test::StructWithKey>}
#[rust = "serde(tag = \"@type\")"]
typedef json_test::TaggedEnum = #[rust = "serde(rename = \"t.V1\")"]
                                json_test::TVariant1{b: bool} |
                                #[rust = "serde(rename = \"t.V2\")"]
                                json_test::TVariant2{u: ddlog_std::u32}
typedef json_test::Top = json_test::Top{t: string, id: string, nested: json_test::Nested}
typedef json_test::TopFlat = json_test::TopFlat{t: string, #[rust = "serde(rename=\"@id\")"] id: string, #[rust = "serde(flatten)"] nested: json_test::Nested}
typedef json_test::U64FromString = json_test::U64FromString{x: string, #[rust = "serde(with=\"crate::json::serde_string\")"] y: ddlog_std::u64}
typedef json_test::WrappedEnum = json::JsonWrapper<json_test::TaggedEnum>
typedef log::log_level_t = signed<32>
typedef log::module_t = signed<32>
typedef map_test::Foo = map_test::Foo{x: bigint}
typedef map_test::MapFolds = map_test::MapFolds{description: string, a: string}
typedef map_test::MapTransforms = map_test::MapTransforms{description: string, v: map_test::TestMap}
typedef map_test::TestMap = ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>
typedef net::ipaddr::IpAddr = net::ipaddr::IpAddrV4{addr4: net::ipv4::Ipv4Addr} |
                              net::ipaddr::IpAddrV6{addr6: net::ipv6::Ipv6Addr}
extern type net::ipv4::Ipv4Addr
extern type net::ipv6::Ipv6Addr
typedef net_test::NetChecks = net_test::NetChecks{description: string, value: string}
extern type regex::Regex
typedef regex_test::RegexTestInput = regex_test::RegexTestInput{re: string, text: string}
typedef regex_test::RegexTestOutput = regex_test::RegexTestOutput{re: string, text: string, match_found: bool, match_found_checked: bool, first_match: ddlog_std::Option<string>, all_matches: ddlog_std::Vec<string>}
typedef set_test::SetFolds = set_test::SetFolds{description: string, a: ddlog_std::s64}
typedef set_test::SetTransforms = set_test::SetTransforms{description: string, s: set_test::TestSet}
typedef set_test::TestSet = ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>
typedef std_test::Default = std_test::Default{descr: string, val: string}
typedef std_test::DefaultEnum = std_test::DEnum1{} |
                                std_test::DEnum2{x: ddlog_std::u32}
typedef std_test::IntVecTest = std_test::IntVecTest{descr: string, vec: ddlog_std::Vec<ddlog_std::s64>}
typedef std_test::MapDelete = std_test::MapDelete{descr: string, m: ddlog_std::Map<ddlog_std::usize,string>, s: ddlog_std::Option<string>}
typedef std_test::MapSizes = std_test::MapSizes{m: ddlog_std::Map<ddlog_std::u64,string>, size: ddlog_std::usize}
typedef std_test::Maps = std_test::Maps{m: ddlog_std::Map<ddlog_std::u64,string>}
typedef std_test::Pow = std_test::Pow{descr: string, val: string}
typedef std_test::SetDifference = std_test::SetDifference{s1: ddlog_std::Set<ddlog_std::u64>, s2: ddlog_std::Set<ddlog_std::u64>, diff: ddlog_std::Set<ddlog_std::u64>}
typedef std_test::SetPairs = std_test::SetPairs{s1: ddlog_std::Set<ddlog_std::u64>, s2: ddlog_std::Set<ddlog_std::u64>}
typedef std_test::SortedVector = std_test::SortedVector{v: ddlog_std::Vec<bigint>}
typedef std_test::SortedVectorInPlace = std_test::SortedVectorInPlace{v: ddlog_std::Vec<bigint>}
typedef std_test::Vector = std_test::Vector{v: ddlog_std::Vec<bigint>}
extern type tinyset::Set64<'X>
typedef tinyset_test::Diffs = tinyset_test::Diffs{setid1: string, setid2: string, set: tinyset::Set64<ddlog_std::u32>}
typedef tinyset_test::Intersects = tinyset_test::Intersects{setid1: string, setid2: string, set: tinyset::Set64<ddlog_std::u32>}
typedef tinyset_test::Intersects2 = tinyset_test::Intersects2{setid1: string, setid2: string, set: tinyset::Set64<ddlog_std::u32>}
typedef tinyset_test::SetElement = tinyset_test::SetElement{setid: string, element: ddlog_std::u32}
typedef tinyset_test::Sets = tinyset_test::Sets{setid: string, set: tinyset::Set64<ddlog_std::u32>}
extern type url::Url
typedef url_test::URLTest = url_test::URLTest{description: string, val: string}
typedef uuid::Error = string
extern type uuid::Uuid
typedef uuid_test::UUID = uuid_test::UUID{description: string, result: string}
typedef vec_test::CompareClosures = vec_test::CompareClosures{c1: string, c2: string, equal: bool}
typedef vec_test::Increments = vec_test::Increments{i: ddlog_std::s64}
typedef vec_test::IntClosures = vec_test::IntClosures{f: function(ddlog_std::s64):ddlog_std::s64}
typedef vec_test::IntVecClosures = vec_test::IntVecClosures{f: vec_test::vec_to_vec_t}
typedef vec_test::IntVecTransforms = vec_test::IntVecTransforms{description: string, v: ddlog_std::Vec<ddlog_std::s64>}
typedef vec_test::VecFolds = vec_test::VecFolds{description: string, a: ddlog_std::s64}
typedef vec_test::vec_to_vec_t = function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>
extern function ddlog_std::__builtin_2string (x: 'X): string
function ddlog_std::append (v: mut ddlog_std::Vec<'X>, other: ddlog_std::Vec<'X>): ()
{
    (ddlog_std::vec_append: function(mut ddlog_std::Vec<'X>, ddlog_std::Vec<'X>):())(v, other)
}
extern function ddlog_std::bigint_pow32 (base: bigint, exp: bit<32>): bigint
function ddlog_std::contains (s1: string, s2: string): bool
{
    ddlog_std::string_contains(s1, s2)
}
function ddlog_std::contains (v: ddlog_std::Vec<'X>, x: 'X): bool
{
    (ddlog_std::vec_contains: function(ddlog_std::Vec<'X>, 'X):bool)(v, x)
}
function ddlog_std::contains (s: ddlog_std::Set<'X>, v: 'X): bool
{
    (ddlog_std::set_contains: function(ddlog_std::Set<'X>, 'X):bool)(s, v)
}
function ddlog_std::contains_key (m: ddlog_std::Map<'K,'V>, k: 'K): bool
{
    (ddlog_std::map_contains_key: function(ddlog_std::Map<'K,'V>, 'K):bool)(m, k)
}
function ddlog_std::count (g: ddlog_std::Group<'K,'V>): ddlog_std::usize
{
    (ddlog_std::group_count: function(ddlog_std::Group<'K,'V>):bit<64>)(g)
}
extern function ddlog_std::default (): 'T
#[return_by_ref = true]
extern function ddlog_std::deref (x: ddlog_std::Ref<'A>): 'A
function ddlog_std::difference (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_difference: function(ddlog_std::Set<'X>, ddlog_std::Set<'X>):ddlog_std::Set<'X>)(s1, s2)
}
function ddlog_std::ends_with (s: string, suffix: string): bool
{
    ddlog_std::string_ends_with(s, suffix)
}
function ddlog_std::first (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_first: function(ddlog_std::Group<'K,'V>):'V)(g)
}
function ddlog_std::get (m: ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
{
    (ddlog_std::map_get: function(ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k)
}
extern function ddlog_std::group_count (g: ddlog_std::Group<'K,'V>): ddlog_std::usize
extern function ddlog_std::group_first (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_key (g: ddlog_std::Group<'K,'V>): 'K
extern function ddlog_std::group_max (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_min (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_nth (g: ddlog_std::Group<'K,'V>, n: ddlog_std::usize): ddlog_std::Option<'V>
extern function ddlog_std::group_set_unions (g: ddlog_std::Group<'K,ddlog_std::Set<'A>>): ddlog_std::Set<'A>
extern function ddlog_std::group_setref_unions (g: ddlog_std::Group<'K,ddlog_std::Ref<ddlog_std::Set<'A>>>): ddlog_std::Ref<ddlog_std::Set<'A>>
extern function ddlog_std::group_sum (g: ddlog_std::Group<'K,'V>): 'V
extern function ddlog_std::group_to_map (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,'V>
extern function ddlog_std::group_to_set (g: ddlog_std::Group<'K,'V>): ddlog_std::Set<'V>
extern function ddlog_std::group_to_setmap (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,ddlog_std::Set<'V>>
extern function ddlog_std::group_to_vec (g: ddlog_std::Group<'K,'V>): ddlog_std::Vec<'V>
function ddlog_std::group_unzip (g: ddlog_std::Group<'K,('X, 'Y)>): (ddlog_std::Vec<'X>, ddlog_std::Vec<'Y>)
{
    {(var xs: ddlog_std::Vec<'X>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<'X>)();
     {(var ys: ddlog_std::Vec<'Y>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<'Y>)();
      {for (v in g) {
           {((var x: 'X), (var y: 'Y)) = v;
            {(ddlog_std::vec_push: function(mut ddlog_std::Vec<'X>, 'X):())(xs, x);
             (ddlog_std::vec_push: function(mut ddlog_std::Vec<'Y>, 'Y):())(ys, y)}}
       };
       (xs, ys)}}}
}
extern function ddlog_std::hash128 (x: 'X): bit<128>
extern function ddlog_std::hash64 (x: 'X): bit<64>
extern function ddlog_std::hex (x: 'X): string
extern function ddlog_std::htonl (x: bit<32>): bit<32>
extern function ddlog_std::htons (x: bit<16>): bit<16>
function ddlog_std::insert (m: mut ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ()
{
    (ddlog_std::map_insert: function(mut ddlog_std::Map<'K,'V>, 'K, 'V):())(m, k, v)
}
function ddlog_std::insert (s: mut ddlog_std::Set<'X>, v: 'X): ()
{
    (ddlog_std::set_insert: function(mut ddlog_std::Set<'X>, 'X):())(s, v)
}
function ddlog_std::insert_imm (m: ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ddlog_std::Map<'K,'V>
{
    (ddlog_std::map_insert_imm: function(ddlog_std::Map<'K,'V>, 'K, 'V):ddlog_std::Map<'K,'V>)(m, k, v)
}
function ddlog_std::insert_imm (s: ddlog_std::Set<'X>, v: 'X): ddlog_std::Set<'X>
{
    (ddlog_std::set_insert_imm: function(ddlog_std::Set<'X>, 'X):ddlog_std::Set<'X>)(s, v)
}
function ddlog_std::intersection (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_intersection: function(ddlog_std::Set<'X>, ddlog_std::Set<'X>):ddlog_std::Set<'X>)(s1, s2)
}
function ddlog_std::is_empty (v: ddlog_std::Vec<'X>): bool
{
    (ddlog_std::vec_is_empty: function(ddlog_std::Vec<'X>):bool)(v)
}
function ddlog_std::is_empty (m: ddlog_std::Map<'K,'V>): bool
{
    (ddlog_std::map_is_empty: function(ddlog_std::Map<'K,'V>):bool)(m)
}
function ddlog_std::is_empty (s: ddlog_std::Set<'X>): bool
{
    (ddlog_std::set_is_empty: function(ddlog_std::Set<'X>):bool)(s)
}
function ddlog_std::is_err (res: ddlog_std::Result<'V,'E>): bool
{
    match (res) {
        (ddlog_std::Ok{.res=(_: 'V)}: ddlog_std::Result<'V,'E>) -> false,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> true
    }
}
function ddlog_std::is_none (x: ddlog_std::Option<'A>): bool
{
    match (x) {
        (ddlog_std::None{}: ddlog_std::Option<'A>) -> true,
        (_: ddlog_std::Option<'A>) -> false
    }
}
function ddlog_std::is_ok (res: ddlog_std::Result<'V,'E>): bool
{
    match (res) {
        (ddlog_std::Ok{.res=(_: 'V)}: ddlog_std::Result<'V,'E>) -> true,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> false
    }
}
function ddlog_std::is_some (x: ddlog_std::Option<'A>): bool
{
    match (x) {
        (ddlog_std::Some{.x=(_: 'A)}: ddlog_std::Option<'A>) -> true,
        (_: ddlog_std::Option<'A>) -> false
    }
}
function ddlog_std::join (strings: ddlog_std::Vec<string>, sep: string): string
{
    ddlog_std::string_join(strings, sep)
}
function ddlog_std::key (g: ddlog_std::Group<'K,'V>): 'K
{
    (ddlog_std::group_key: function(ddlog_std::Group<'K,'V>):'K)(g)
}
function ddlog_std::keys (m: ddlog_std::Map<'K,'V>): ddlog_std::Vec<'K>
{
    (ddlog_std::map_keys: function(ddlog_std::Map<'K,'V>):ddlog_std::Vec<'K>)(m)
}
function ddlog_std::len (s: string): ddlog_std::usize
{
    ddlog_std::string_len(s)
}
function ddlog_std::len (v: ddlog_std::Vec<'X>): ddlog_std::usize
{
    (ddlog_std::vec_len: function(ddlog_std::Vec<'X>):bit<64>)(v)
}
function ddlog_std::map (opt: ddlog_std::Option<'A>, f: function('A):'B): ddlog_std::Option<'B>
{
    match (opt) {
        (ddlog_std::None{}: ddlog_std::Option<'A>) -> (ddlog_std::None{}: ddlog_std::Option<'B>),
        (ddlog_std::Some{.x=(var x: 'A)}: ddlog_std::Option<'A>) -> (ddlog_std::Some{.x=f(x)}: ddlog_std::Option<'B>)
    }
}
function ddlog_std::map (res: ddlog_std::Result<'V1,'E>, f: function('V1):'V2): ddlog_std::Result<'V2,'E>
{
    match (res) {
        (ddlog_std::Err{.err=(var e: 'E)}: ddlog_std::Result<'V1,'E>) -> (ddlog_std::Err{.err=e}: ddlog_std::Result<'V2,'E>),
        (ddlog_std::Ok{.res=(var x: 'V1)}: ddlog_std::Result<'V1,'E>) -> (ddlog_std::Ok{.res=f(x)}: ddlog_std::Result<'V2,'E>)
    }
}
extern function ddlog_std::map_contains_key (m: ddlog_std::Map<'K,'V>, k: 'K): bool
extern function ddlog_std::map_empty (): ddlog_std::Map<'K,'V>
function ddlog_std::map_err (res: ddlog_std::Result<'V,'E1>, f: function('E1):'E2): ddlog_std::Result<'V,'E2>
{
    match (res) {
        (ddlog_std::Err{.err=(var e: 'E1)}: ddlog_std::Result<'V,'E1>) -> (ddlog_std::Err{.err=f(e)}: ddlog_std::Result<'V,'E2>),
        (ddlog_std::Ok{.res=(var x: 'V)}: ddlog_std::Result<'V,'E1>) -> (ddlog_std::Ok{.res=x}: ddlog_std::Result<'V,'E2>)
    }
}
extern function ddlog_std::map_get (m: ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
extern function ddlog_std::map_insert (m: mut ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ()
extern function ddlog_std::map_insert_imm (m: ddlog_std::Map<'K,'V>, k: 'K, v: 'V): ddlog_std::Map<'K,'V>
extern function ddlog_std::map_is_empty (m: ddlog_std::Map<'K,'V>): bool
extern function ddlog_std::map_keys (m: ddlog_std::Map<'K,'V>): ddlog_std::Vec<'K>
extern function ddlog_std::map_remove (m: mut ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
extern function ddlog_std::map_singleton (k: 'K, v: 'V): ddlog_std::Map<'K,'V>
extern function ddlog_std::map_size (m: ddlog_std::Map<'K,'V>): ddlog_std::usize
extern function ddlog_std::map_union (m1: ddlog_std::Map<'K,'V>, m2: ddlog_std::Map<'K,'V>): ddlog_std::Map<'K,'V>
function ddlog_std::max (x: 'A, y: 'A): 'A
{
    if (x > y) {
        x
    } else {
          y
      }
}
function ddlog_std::max (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_max: function(ddlog_std::Group<'K,'V>):'V)(g)
}
function ddlog_std::min (x: 'A, y: 'A): 'A
{
    if (x < y) {
        x
    } else {
          y
      }
}
function ddlog_std::min (g: ddlog_std::Group<'K,'V>): 'V
{
    (ddlog_std::group_min: function(ddlog_std::Group<'K,'V>):'V)(g)
}
function ddlog_std::nth (g: ddlog_std::Group<'K,'V>, n: ddlog_std::usize): ddlog_std::Option<'V>
{
    (ddlog_std::group_nth: function(ddlog_std::Group<'K,'V>, bit<64>):ddlog_std::Option<'V>)(g, n)
}
function ddlog_std::nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
{
    (ddlog_std::vec_nth: function(ddlog_std::Vec<'X>, bit<64>):ddlog_std::Option<'X>)(v, n)
}
function ddlog_std::nth (s: ddlog_std::Set<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
{
    (ddlog_std::set_nth: function(ddlog_std::Set<'X>, bit<64>):ddlog_std::Option<'X>)(s, n)
}
extern function ddlog_std::ntohl (x: bit<32>): bit<32>
extern function ddlog_std::ntohs (x: bit<16>): bit<16>
extern function ddlog_std::option_unwrap_or_default (opt: ddlog_std::Option<'A>): 'A
extern function ddlog_std::parse_dec_i64 (s: string): ddlog_std::Option<signed<64>>
extern function ddlog_std::parse_dec_u64 (s: string): ddlog_std::Option<bit<64>>
function ddlog_std::pow32 (base: ddlog_std::u8, exp: bit<32>): ddlog_std::u8
{
    ddlog_std::u8_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u16, exp: bit<32>): ddlog_std::u16
{
    ddlog_std::u16_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u32, exp: bit<32>): ddlog_std::u32
{
    ddlog_std::u32_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u64, exp: bit<32>): ddlog_std::u64
{
    ddlog_std::u64_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::u128, exp: bit<32>): ddlog_std::u128
{
    ddlog_std::u128_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s8, exp: bit<32>): ddlog_std::s8
{
    ddlog_std::s8_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s16, exp: bit<32>): ddlog_std::s16
{
    ddlog_std::s16_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s32, exp: bit<32>): ddlog_std::s32
{
    ddlog_std::s32_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s64, exp: bit<32>): ddlog_std::s64
{
    ddlog_std::s64_pow32(base, exp)
}
function ddlog_std::pow32 (base: ddlog_std::s128, exp: bit<32>): ddlog_std::s128
{
    ddlog_std::s128_pow32(base, exp)
}
function ddlog_std::pow32 (base: bigint, exp: bit<32>): bigint
{
    ddlog_std::bigint_pow32(base, exp)
}
function ddlog_std::push (v: mut ddlog_std::Vec<'X>, x: 'X): ()
{
    (ddlog_std::vec_push: function(mut ddlog_std::Vec<'X>, 'X):())(v, x)
}
function ddlog_std::push_imm (v: ddlog_std::Vec<'X>, x: 'X): ddlog_std::Vec<'X>
{
    (ddlog_std::vec_push_imm: function(ddlog_std::Vec<'X>, 'X):ddlog_std::Vec<'X>)(v, x)
}
extern function ddlog_std::range (from: 'A, to: 'A, step: 'A): ddlog_std::Vec<'A>
extern function ddlog_std::ref_new (x: 'A): ddlog_std::Ref<'A>
function ddlog_std::remove (m: mut ddlog_std::Map<'K,'V>, k: 'K): ddlog_std::Option<'V>
{
    (ddlog_std::map_remove: function(mut ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k)
}
function ddlog_std::replace (s: string, from: string, to: string): string
{
    ddlog_std::string_replace(s, from, to)
}
function ddlog_std::resize (v: mut ddlog_std::Vec<'X>, new_len: ddlog_std::usize, value: 'X): ()
{
    (ddlog_std::vec_resize: function(mut ddlog_std::Vec<'X>, bit<64>, 'X):())(v, new_len, value)
}
extern function ddlog_std::result_unwrap_or_default (res: ddlog_std::Result<'V,'E>): 'V
function ddlog_std::reverse (s: string): string
{
    ddlog_std::string_reverse(s)
}
extern function ddlog_std::s128_pow32 (base: ddlog_std::s128, exp: bit<32>): ddlog_std::s128
extern function ddlog_std::s16_pow32 (base: ddlog_std::s16, exp: bit<32>): ddlog_std::s16
extern function ddlog_std::s32_pow32 (base: ddlog_std::s32, exp: bit<32>): ddlog_std::s32
extern function ddlog_std::s64_pow32 (base: ddlog_std::s64, exp: bit<32>): ddlog_std::s64
extern function ddlog_std::s8_pow32 (base: ddlog_std::s8, exp: bit<32>): ddlog_std::s8
extern function ddlog_std::set_contains (s: ddlog_std::Set<'X>, v: 'X): bool
extern function ddlog_std::set_difference (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_empty (): ddlog_std::Set<'X>
extern function ddlog_std::set_insert (s: mut ddlog_std::Set<'X>, v: 'X): ()
extern function ddlog_std::set_insert_imm (s: ddlog_std::Set<'X>, v: 'X): ddlog_std::Set<'X>
extern function ddlog_std::set_intersection (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_is_empty (s: ddlog_std::Set<'X>): bool
extern function ddlog_std::set_nth (s: ddlog_std::Set<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
extern function ddlog_std::set_singleton (x: 'X): ddlog_std::Set<'X>
extern function ddlog_std::set_size (s: ddlog_std::Set<'X>): ddlog_std::usize
extern function ddlog_std::set_to_vec (s: ddlog_std::Set<'A>): ddlog_std::Vec<'A>
extern function ddlog_std::set_union (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
extern function ddlog_std::set_unions (sets: ddlog_std::Vec<ddlog_std::Set<'X>>): ddlog_std::Set<'X>
function ddlog_std::setref_unions (g: ddlog_std::Group<'K,ddlog_std::Ref<ddlog_std::Set<'A>>>): ddlog_std::Ref<ddlog_std::Set<'A>>
{
    (ddlog_std::group_setref_unions: function(ddlog_std::Group<'K,ddlog_std::Ref<ddlog_std::Set<'A>>>):ddlog_std::Ref<ddlog_std::Set<'A>>)(g)
}
function ddlog_std::size (m: ddlog_std::Map<'K,'V>): ddlog_std::usize
{
    (ddlog_std::map_size: function(ddlog_std::Map<'K,'V>):bit<64>)(m)
}
function ddlog_std::size (s: ddlog_std::Set<'X>): ddlog_std::usize
{
    (ddlog_std::set_size: function(ddlog_std::Set<'X>):bit<64>)(s)
}
function ddlog_std::sort (v: mut ddlog_std::Vec<'X>): ()
{
    (ddlog_std::vec_sort: function(mut ddlog_std::Vec<'X>):())(v)
}
function ddlog_std::sort_imm (v: ddlog_std::Vec<'X>): ddlog_std::Vec<'X>
{
    (ddlog_std::vec_sort_imm: function(ddlog_std::Vec<'X>):ddlog_std::Vec<'X>)(v)
}
function ddlog_std::split (s: string, sep: string): ddlog_std::Vec<string>
{
    ddlog_std::string_split(s, sep)
}
function ddlog_std::starts_with (s: string, prefix: string): bool
{
    ddlog_std::string_starts_with(s, prefix)
}
extern function ddlog_std::str_to_lower (s: string): string
extern function ddlog_std::string_contains (s1: string, s2: string): bool
extern function ddlog_std::string_ends_with (s: string, suffix: string): bool
extern function ddlog_std::string_join (strings: ddlog_std::Vec<string>, sep: string): string
extern function ddlog_std::string_len (s: string): ddlog_std::usize
extern function ddlog_std::string_replace (s: string, from: string, to: string): string
extern function ddlog_std::string_reverse (s: string): string
extern function ddlog_std::string_split (s: string, sep: string): ddlog_std::Vec<string>
extern function ddlog_std::string_starts_with (s: string, prefix: string): bool
extern function ddlog_std::string_substr (s: string, start: ddlog_std::usize, end: ddlog_std::usize): string
extern function ddlog_std::string_to_bytes (s: string): ddlog_std::Vec<ddlog_std::u8>
extern function ddlog_std::string_to_lowercase (s: string): string
extern function ddlog_std::string_to_uppercase (s: string): string
extern function ddlog_std::string_trim (s: string): string
function ddlog_std::substr (s: string, start: ddlog_std::usize, end: ddlog_std::usize): string
{
    ddlog_std::string_substr(s, start, end)
}
function ddlog_std::swap_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: mut 'X): bool
{
    (ddlog_std::vec_swap_nth: function(mut ddlog_std::Vec<'X>, bit<64>, mut 'X):bool)(v, idx, value)
}
function ddlog_std::to_bytes (s: string): ddlog_std::Vec<ddlog_std::u8>
{
    ddlog_std::string_to_bytes(s)
}
function ddlog_std::to_lowercase (s: string): string
{
    ddlog_std::string_to_lowercase(s)
}
function ddlog_std::to_map (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,'V>
{
    (ddlog_std::group_to_map: function(ddlog_std::Group<'K1,('K2, 'V)>):ddlog_std::Map<'K2,'V>)(g)
}
function ddlog_std::to_set (o: ddlog_std::Option<'X>): ddlog_std::Set<'X>
{
    match (o) {
        (ddlog_std::Some{.x=(var x: 'X)}: ddlog_std::Option<'X>) -> (ddlog_std::set_singleton: function('X):ddlog_std::Set<'X>)(x),
        (ddlog_std::None{}: ddlog_std::Option<'X>) -> (ddlog_std::set_empty: function():ddlog_std::Set<'X>)()
    }
}
function ddlog_std::to_set (g: ddlog_std::Group<'K,'V>): ddlog_std::Set<'V>
{
    (ddlog_std::group_to_set: function(ddlog_std::Group<'K,'V>):ddlog_std::Set<'V>)(g)
}
function ddlog_std::to_set (s: ddlog_std::Vec<'A>): ddlog_std::Set<'A>
{
    (ddlog_std::vec_to_set: function(ddlog_std::Vec<'A>):ddlog_std::Set<'A>)(s)
}
function ddlog_std::to_setmap (g: ddlog_std::Group<'K1,('K2, 'V)>): ddlog_std::Map<'K2,ddlog_std::Set<'V>>
{
    (ddlog_std::group_to_setmap: function(ddlog_std::Group<'K1,('K2, 'V)>):ddlog_std::Map<'K2,ddlog_std::Set<'V>>)(g)
}
function ddlog_std::to_string (ts: ddlog_std::DDNestedTS): string
{
    (((("(" ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(ts.epoch)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(ts.iter)) ++ ")")
}
function ddlog_std::to_string (x: bool): string
{
    (ddlog_std::__builtin_2string: function(bool):string)(x)
}
function ddlog_std::to_string (x: bigint): string
{
    (ddlog_std::__builtin_2string: function(bigint):string)(x)
}
function ddlog_std::to_string (x: float): string
{
    (ddlog_std::__builtin_2string: function(float):string)(x)
}
function ddlog_std::to_string (x: double): string
{
    (ddlog_std::__builtin_2string: function(double):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::s8): string
{
    (ddlog_std::__builtin_2string: function(signed<8>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::s16): string
{
    (ddlog_std::__builtin_2string: function(signed<16>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::s32): string
{
    (ddlog_std::__builtin_2string: function(signed<32>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::s64): string
{
    (ddlog_std::__builtin_2string: function(signed<64>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::s128): string
{
    (ddlog_std::__builtin_2string: function(signed<128>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::u8): string
{
    (ddlog_std::__builtin_2string: function(bit<8>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::u16): string
{
    (ddlog_std::__builtin_2string: function(bit<16>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::u32): string
{
    (ddlog_std::__builtin_2string: function(bit<32>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::u64): string
{
    (ddlog_std::__builtin_2string: function(bit<64>):string)(x)
}
function ddlog_std::to_string (x: ddlog_std::u128): string
{
    (ddlog_std::__builtin_2string: function(bit<128>):string)(x)
}
function ddlog_std::to_string (x: string): string
{
    (ddlog_std::__builtin_2string: function(string):string)(x)
}
function ddlog_std::to_uppercase (s: string): string
{
    ddlog_std::string_to_uppercase(s)
}
function ddlog_std::to_vec (o: ddlog_std::Option<'X>): ddlog_std::Vec<'X>
{
    match (o) {
        (ddlog_std::Some{.x=(var x: 'X)}: ddlog_std::Option<'X>) -> (ddlog_std::vec_singleton: function('X):ddlog_std::Vec<'X>)(x),
        (ddlog_std::None{}: ddlog_std::Option<'X>) -> (ddlog_std::vec_empty: function():ddlog_std::Vec<'X>)()
    }
}
function ddlog_std::to_vec (g: ddlog_std::Group<'K,'V>): ddlog_std::Vec<'V>
{
    (ddlog_std::group_to_vec: function(ddlog_std::Group<'K,'V>):ddlog_std::Vec<'V>)(g)
}
function ddlog_std::to_vec (s: ddlog_std::Set<'A>): ddlog_std::Vec<'A>
{
    (ddlog_std::set_to_vec: function(ddlog_std::Set<'A>):ddlog_std::Vec<'A>)(s)
}
function ddlog_std::trim (s: string): string
{
    ddlog_std::string_trim(s)
}
function ddlog_std::truncate (v: mut ddlog_std::Vec<'X>, len: ddlog_std::usize): ()
{
    (ddlog_std::vec_truncate: function(mut ddlog_std::Vec<'X>, bit<64>):())(v, len)
}
extern function ddlog_std::u128_pow32 (base: ddlog_std::u128, exp: bit<32>): ddlog_std::u128
extern function ddlog_std::u16_pow32 (base: ddlog_std::u16, exp: bit<32>): ddlog_std::u16
extern function ddlog_std::u32_pow32 (base: ddlog_std::u32, exp: bit<32>): ddlog_std::u32
extern function ddlog_std::u64_pow32 (base: ddlog_std::u64, exp: bit<32>): ddlog_std::u64
extern function ddlog_std::u8_pow32 (base: ddlog_std::u8, exp: bit<32>): ddlog_std::u8
function ddlog_std::union (m1: ddlog_std::Map<'K,'V>, m2: ddlog_std::Map<'K,'V>): ddlog_std::Map<'K,'V>
{
    (ddlog_std::map_union: function(ddlog_std::Map<'K,'V>, ddlog_std::Map<'K,'V>):ddlog_std::Map<'K,'V>)(m1, m2)
}
function ddlog_std::union (s1: ddlog_std::Set<'X>, s2: ddlog_std::Set<'X>): ddlog_std::Set<'X>
{
    (ddlog_std::set_union: function(ddlog_std::Set<'X>, ddlog_std::Set<'X>):ddlog_std::Set<'X>)(s1, s2)
}
function ddlog_std::unions (sets: ddlog_std::Vec<ddlog_std::Set<'X>>): ddlog_std::Set<'X>
{
    (ddlog_std::set_unions: function(ddlog_std::Vec<ddlog_std::Set<'X>>):ddlog_std::Set<'X>)(sets)
}
function ddlog_std::unwrap_or (x: ddlog_std::Option<'A>, def: 'A): 'A
{
    match (x) {
        (ddlog_std::Some{.x=(var v: 'A)}: ddlog_std::Option<'A>) -> v,
        (ddlog_std::None{}: ddlog_std::Option<'A>) -> def
    }
}
function ddlog_std::unwrap_or (res: ddlog_std::Result<'V,'E>, def: 'V): 'V
{
    match (res) {
        (ddlog_std::Ok{.res=(var v: 'V)}: ddlog_std::Result<'V,'E>) -> v,
        (ddlog_std::Err{.err=(_: 'E)}: ddlog_std::Result<'V,'E>) -> def
    }
}
function ddlog_std::unwrap_or_default (opt: ddlog_std::Option<'A>): 'A
{
    (ddlog_std::option_unwrap_or_default: function(ddlog_std::Option<'A>):'A)(opt)
}
function ddlog_std::unwrap_or_default (res: ddlog_std::Result<'V,'E>): 'V
{
    (ddlog_std::result_unwrap_or_default: function(ddlog_std::Result<'V,'E>):'V)(res)
}
function ddlog_std::update_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: 'X): bool
{
    (ddlog_std::vec_update_nth: function(mut ddlog_std::Vec<'X>, bit<64>, 'X):bool)(v, idx, value)
}
extern function ddlog_std::vec_append (v: mut ddlog_std::Vec<'X>, other: ddlog_std::Vec<'X>): ()
extern function ddlog_std::vec_contains (v: ddlog_std::Vec<'X>, x: 'X): bool
extern function ddlog_std::vec_empty (): ddlog_std::Vec<'A>
extern function ddlog_std::vec_is_empty (v: ddlog_std::Vec<'X>): bool
extern function ddlog_std::vec_len (v: ddlog_std::Vec<'X>): ddlog_std::usize
extern function ddlog_std::vec_nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize): ddlog_std::Option<'X>
extern function ddlog_std::vec_push (v: mut ddlog_std::Vec<'X>, x: 'X): ()
extern function ddlog_std::vec_push_imm (v: ddlog_std::Vec<'X>, x: 'X): ddlog_std::Vec<'X>
extern function ddlog_std::vec_resize (v: mut ddlog_std::Vec<'X>, new_len: ddlog_std::usize, value: 'X): ()
extern function ddlog_std::vec_set_nth (v: ddlog_std::Vec<'X>, n: ddlog_std::usize, value: 'X): ()
extern function ddlog_std::vec_singleton (x: 'X): ddlog_std::Vec<'X>
extern function ddlog_std::vec_sort (v: mut ddlog_std::Vec<'X>): ()
extern function ddlog_std::vec_sort_imm (v: ddlog_std::Vec<'X>): ddlog_std::Vec<'X>
extern function ddlog_std::vec_swap_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: mut 'X): bool
extern function ddlog_std::vec_to_set (s: ddlog_std::Vec<'A>): ddlog_std::Set<'A>
extern function ddlog_std::vec_truncate (v: mut ddlog_std::Vec<'X>, len: ddlog_std::usize): ()
extern function ddlog_std::vec_update_nth (v: mut ddlog_std::Vec<'X>, idx: ddlog_std::usize, value: 'X): bool
extern function ddlog_std::vec_with_capacity (len: ddlog_std::usize): ddlog_std::Vec<'A>
extern function ddlog_std::vec_with_length (len: ddlog_std::usize, x: 'A): ddlog_std::Vec<'A>
extern function debug::debug_event (operator_id: debug::DDlogOpId, w: ddlog_std::DDWeight, ts: 'T1, operator_type: string, input1: 'A1, out: 'A2): ()
extern function debug::debug_event_join (operator_id: debug::DDlogOpId, w: ddlog_std::DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()
extern function debug::debug_split_group (g: ddlog_std::Group<'K,('I, 'V)>): (ddlog_std::Vec<'I>, ddlog_std::Group<'K,'V>)
extern function fp::abs_d (f: double): double
extern function fp::abs_f (f: float): float
extern function fp::acos_d (f: double): double
extern function fp::acos_f (f: float): float
extern function fp::acosh_d (f: double): double
extern function fp::acosh_f (f: float): float
extern function fp::asin_d (f: double): double
extern function fp::asin_f (f: float): float
extern function fp::asinh_d (f: double): double
extern function fp::asinh_f (f: float): float
extern function fp::atan2_d (f: double, other: double): double
extern function fp::atan2_f (f: float, other: float): float
extern function fp::atan_d (f: double): double
extern function fp::atan_f (f: float): float
extern function fp::atanh_d (f: double): double
extern function fp::atanh_f (f: float): float
extern function fp::cbrt_d (f: double): double
extern function fp::cbrt_f (f: float): float
extern function fp::ceil_d (f: double): double
extern function fp::ceil_f (f: float): float
extern function fp::cos_d (f: double): double
extern function fp::cos_f (f: float): float
extern function fp::cosh_d (f: double): double
extern function fp::cosh_f (f: float): float
extern function fp::exp2_d (f: double): double
extern function fp::exp2_f (f: float): float
extern function fp::exp_d (f: double): double
extern function fp::exp_f (f: float): float
extern function fp::floor_d (f: double): double
extern function fp::floor_f (f: float): float
extern function fp::fract_d (f: double): double
extern function fp::fract_f (f: float): float
extern function fp::int_from_d (d: double): ddlog_std::Option<bigint>
extern function fp::int_from_f (f: float): ddlog_std::Option<bigint>
extern function fp::is_finite_d (f: double): bool
extern function fp::is_finite_f (f: float): bool
extern function fp::is_infinite_d (f: double): bool
extern function fp::is_infinite_f (f: float): bool
extern function fp::is_nan_d (f: double): bool
extern function fp::is_nan_f (f: float): bool
extern function fp::ln_d (f: double): double
extern function fp::ln_f (f: float): float
extern function fp::log10_d (f: double): double
extern function fp::log10_f (f: float): float
extern function fp::log2_d (f: double): double
extern function fp::log2_f (f: float): float
extern function fp::log_d (f: double, base: double): double
extern function fp::log_f (f: float, base: float): float
extern function fp::mul_add_d (a: double, b: double, c: double): double
extern function fp::mul_add_f (a: float, b: float, c: float): float
extern function fp::nan_d (): double
extern function fp::nan_f (): float
extern function fp::parse_d (s: string): ddlog_std::Result<double,string>
extern function fp::parse_f (s: string): ddlog_std::Result<float,string>
extern function fp::powf_d (f: double, exp: double): double
extern function fp::powf_f (f: float, exp: float): float
extern function fp::powi_d (f: double, exp: signed<32>): double
extern function fp::powi_f (f: float, exp: signed<32>): float
extern function fp::recip_d (f: double): double
extern function fp::recip_f (f: float): float
extern function fp::round_d (f: double): double
extern function fp::round_f (f: float): float
extern function fp::signum_d (f: double): double
extern function fp::signum_f (f: float): float
extern function fp::sin_d (f: double): double
extern function fp::sin_f (f: float): float
extern function fp::sinh_d (f: double): double
extern function fp::sinh_f (f: float): float
extern function fp::sqrt_d (f: double): double
extern function fp::sqrt_f (f: float): float
extern function fp::tan_d (f: double): double
extern function fp::tan_f (f: float): float
extern function fp::tanh_d (f: double): double
extern function fp::tanh_f (f: float): float
extern function fp::to_degrees_d (f: double): double
extern function fp::to_degrees_f (f: float): float
extern function fp::to_radians_d (f: double): double
extern function fp::to_radians_f (f: float): float
extern function fp::trunc_d (f: double): double
extern function fp::trunc_f (f: float): float
function internment::contains (s1: internment::istring, s2: string): bool
{
    internment::istring_contains(s1, s2)
}
function internment::ends_with (s: internment::istring, suffix: string): bool
{
    internment::istring_ends_with(s, suffix)
}
extern function internment::intern (s: 'A): internment::Intern<'A>
extern function internment::istring_contains (s1: internment::istring, s2: string): bool
extern function internment::istring_ends_with (s: internment::istring, suffix: string): bool
extern function internment::istring_join (strings: ddlog_std::Vec<internment::istring>, sep: string): string
extern function internment::istring_len (s: internment::istring): ddlog_std::usize
extern function internment::istring_replace (s: internment::istring, from: string, to: string): string
extern function internment::istring_reverse (s: internment::istring): string
extern function internment::istring_split (s: internment::istring, sep: string): ddlog_std::Vec<string>
extern function internment::istring_starts_with (s: internment::istring, prefix: string): bool
extern function internment::istring_substr (s: internment::istring, start: ddlog_std::usize, end: ddlog_std::usize): string
extern function internment::istring_to_bytes (s: internment::istring): ddlog_std::Vec<ddlog_std::u8>
extern function internment::istring_to_lowercase (s: internment::istring): string
extern function internment::istring_to_uppercase (s: internment::istring): string
extern function internment::istring_trim (s: internment::istring): string
#[return_by_ref = true]
extern function internment::ival (s: internment::Intern<'A>): 'A
function internment::join (strings: ddlog_std::Vec<internment::istring>, sep: string): string
{
    internment::istring_join(strings, sep)
}
function internment::len (s: internment::istring): ddlog_std::usize
{
    internment::istring_len(s)
}
function internment::replace (s: internment::istring, from: string, to: string): string
{
    internment::istring_replace(s, from, to)
}
function internment::reverse (s: internment::istring): string
{
    internment::istring_reverse(s)
}
function internment::split (s: internment::istring, sep: string): ddlog_std::Vec<string>
{
    internment::istring_split(s, sep)
}
function internment::starts_with (s: internment::istring, prefix: string): bool
{
    internment::istring_starts_with(s, prefix)
}
function internment::substr (s: internment::istring, start: ddlog_std::usize, end: ddlog_std::usize): string
{
    internment::istring_substr(s, start, end)
}
function internment::to_bytes (s: internment::istring): ddlog_std::Vec<ddlog_std::u8>
{
    internment::istring_to_bytes(s)
}
function internment::to_lowercase (s: internment::istring): string
{
    internment::istring_to_lowercase(s)
}
function internment::to_string (s: internment::istring): string
{
    (internment::ival: function(internment::Intern<string>):string)(s)
}
function internment::to_uppercase (s: internment::istring): string
{
    internment::istring_to_uppercase(s)
}
function internment::trim (s: internment::istring): string
{
    internment::istring_trim(s)
}
function internment_test::istruct2struct (i: internment_test::IStruct): internment_test::Struct
{
    (internment_test::Struct{.u=(internment::ival: function(internment::Intern<internment_test::IUnion>):internment_test::IUnion)(i.u), .t=(internment::ival: function(internment::Intern<(ddlog_std::s32, double)>):(ddlog_std::s32, double))(i.t), .x=i.x}: internment_test::Struct)
}
extern function json::from_json_string (json: string): ddlog_std::Result<'T,string>
extern function json::from_json_value (json_val: json::JsonValue): ddlog_std::Result<'T,string>
function json::get_by_ptr (jval: json::JsonValue, ptr: json::JsonPtr): ddlog_std::Option<json::JsonValue>
{
    json::get_by_ptr_(jval, ptr, 64'd0)
}
function json::get_by_ptr_ (jval: json::JsonValue, ptr: json::JsonPtr, idx: ddlog_std::usize): ddlog_std::Option<json::JsonValue>
{
    match ((ddlog_std::nth: function(ddlog_std::Vec<json::JsonPtrItem>, bit<64>):ddlog_std::Option<json::JsonPtrItem>)(ptr, idx)) {
        (ddlog_std::None{}: ddlog_std::Option<json::JsonPtrItem>) -> (ddlog_std::Some{.x=jval}: ddlog_std::Option<json::JsonValue>),
        (ddlog_std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> json::get_by_ptr_(match (json::jval_get(jval, key)) {
                                                                                                                                                                            (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>) -> ((return (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                            (ddlog_std::Some{.x=(var __x: json::JsonValue)}: ddlog_std::Option<json::JsonValue>) -> __x
                                                                                                                                                                        }, ptr, (idx + 64'd1)),
        (ddlog_std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> match (jval) {
                                                                                                                                     (json::JsonArray{.a=(var vals: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> json::get_by_ptr_(match ((ddlog_std::nth: function(ddlog_std::Vec<json::JsonValue>, bit<64>):ddlog_std::Option<json::JsonValue>)(vals, n)) {
                                                                                                                                                                                                                                                 (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>) -> ((return (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)): json::JsonValue),
                                                                                                                                                                                                                                                 (ddlog_std::Some{.x=(var __x: json::JsonValue)}: ddlog_std::Option<json::JsonValue>) -> __x
                                                                                                                                                                                                                                             }, ptr, (idx + 64'd1)),
                                                                                                                                     (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)
                                                                                                                                 }
    }
}
function json::jval_as_array (v: json::JsonValue): ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>
{
    match (v) {
        (json::JsonArray{.a=(var a: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> (ddlog_std::Some{.x=a}: ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<ddlog_std::Vec<json::JsonValue>>)
    }
}
function json::jval_as_array_or (v: json::JsonValue, def: ddlog_std::Vec<json::JsonValue>): ddlog_std::Vec<json::JsonValue>
{
    match (v) {
        (json::JsonArray{.a=(var a: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> a,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_bool (v: json::JsonValue): ddlog_std::Option<bool>
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> (ddlog_std::Some{.x=b}: ddlog_std::Option<bool>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<bool>)
    }
}
function json::jval_as_bool_or (v: json::JsonValue, def: bool): bool
{
    match (v) {
        (json::JsonBool{.b=(var b: bool)}: json::JsonValue) -> b,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_number (v: json::JsonValue): ddlog_std::Option<json::JsonNum>
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> (ddlog_std::Some{.x=n}: ddlog_std::Option<json::JsonNum>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonNum>)
    }
}
function json::jval_as_number_or (v: json::JsonValue, def: json::JsonNum): json::JsonNum
{
    match (v) {
        (json::JsonNumber{.n=(var n: json::JsonNum)}: json::JsonValue) -> n,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_object (v: json::JsonValue): ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::Some{.x=o}: ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<ddlog_std::Map<internment::istring,json::JsonValue>>)
    }
}
function json::jval_as_object_or (v: json::JsonValue, def: ddlog_std::Map<internment::istring,json::JsonValue>): ddlog_std::Map<internment::istring,json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> o,
        (_: json::JsonValue) -> def
    }
}
function json::jval_as_string (v: json::JsonValue): ddlog_std::Option<internment::istring>
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> (ddlog_std::Some{.x=s}: ddlog_std::Option<internment::Intern<string>>),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<internment::Intern<string>>)
    }
}
function json::jval_as_string_or (v: json::JsonValue, def: internment::istring): internment::istring
{
    match (v) {
        (json::JsonString{.s=(var s: internment::Intern<string>)}: json::JsonValue) -> s,
        (_: json::JsonValue) -> def
    }
}
function json::jval_get (v: json::JsonValue, attr: internment::istring): ddlog_std::Option<json::JsonValue>
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::map_get: function(ddlog_std::Map<internment::istring,json::JsonValue>, internment::Intern<string>):ddlog_std::Option<json::JsonValue>)(o, attr),
        (_: json::JsonValue) -> (ddlog_std::None{}: ddlog_std::Option<json::JsonValue>)
    }
}
function json::jval_get_or (v: json::JsonValue, attr: internment::istring, def: json::JsonValue): json::JsonValue
{
    match (v) {
        (json::JsonObject{.o=(var o: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> (ddlog_std::unwrap_or: function(ddlog_std::Option<json::JsonValue>, json::JsonValue):json::JsonValue)((ddlog_std::map_get: function(ddlog_std::Map<internment::istring,json::JsonValue>, internment::Intern<string>):ddlog_std::Option<json::JsonValue>)(o, attr), def),
        (_: json::JsonValue) -> def
    }
}
function json::set_by_ptr (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue): ddlog_std::Result<(),string>
{
    json::set_by_ptr_(jval, ptr, v, 64'd0)
}
function json::set_by_ptr_ (jval: mut json::JsonValue, ptr: json::JsonPtr, v: json::JsonValue, idx: ddlog_std::usize): ddlog_std::Result<(),string>
{
    match ((ddlog_std::nth: function(ddlog_std::Vec<json::JsonPtrItem>, bit<64>):ddlog_std::Option<json::JsonPtrItem>)(ptr, idx)) {
        (ddlog_std::None{}: ddlog_std::Option<json::JsonPtrItem>) -> {jval = v;
                                                                      (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)},
        (ddlog_std::Some{.x=(json::JKeyPtr{.key=(var key: internment::Intern<string>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> {if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                                                           jval = (json::JsonObject{.o=(ddlog_std::map_empty: function():ddlog_std::Map<internment::istring,json::JsonValue>)()}: json::JsonValue)
                                                                                                                                                       } else {
                                                                                                                                                             ()
                                                                                                                                                         };
                                                                                                                                                       match (jval) {
                                                                                                                                                           (json::JsonObject{.o=(var m: ddlog_std::Map<internment::istring,json::JsonValue>)}: json::JsonValue) -> {(var old: json::JsonValue) = (ddlog_std::unwrap_or: function(ddlog_std::Option<json::JsonValue>, json::JsonValue):json::JsonValue)((ddlog_std::remove: function(mut ddlog_std::Map<internment::istring,json::JsonValue>, internment::Intern<string>):ddlog_std::Option<json::JsonValue>)(m, key), (json::JsonNull{}: json::JsonValue));
                                                                                                                                                                                                                                                                    {json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                                                                                     {(ddlog_std::insert: function(mut ddlog_std::Map<internment::istring,json::JsonValue>, internment::Intern<string>, json::JsonValue):())(m, key, old);
                                                                                                                                                                                                                                                                      (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)}}},
                                                                                                                                                           (_: json::JsonValue) -> (ddlog_std::Err{.err="Not a JSON map"}: ddlog_std::Result<(),string>)
                                                                                                                                                       }},
        (ddlog_std::Some{.x=(json::JIdxPtr{.idx=(var n: bit<64>)}: json::JsonPtrItem)}: ddlog_std::Option<json::JsonPtrItem>) -> {if (jval == (json::JsonNull{}: json::JsonValue)) {
                                                                                                                                      jval = (json::JsonArray{.a=(ddlog_std::vec_empty: function():ddlog_std::Vec<json::JsonValue>)()}: json::JsonValue)
                                                                                                                                  } else {
                                                                                                                                        ()
                                                                                                                                    };
                                                                                                                                  match (jval) {
                                                                                                                                      (json::JsonArray{.a=(var xs: ddlog_std::Vec<json::JsonValue>)}: json::JsonValue) -> {(ddlog_std::resize: function(mut ddlog_std::Vec<json::JsonValue>, bit<64>, json::JsonValue):())(xs, (ddlog_std::max: function(bit<64>, bit<64>):bit<64>)((n + 64'd1), (ddlog_std::len: function(ddlog_std::Vec<json::JsonValue>):bit<64>)(xs)), (json::JsonNull{}: json::JsonValue));
                                                                                                                                                                                                                           {(var old: json::JsonValue) = (json::JsonNull{}: json::JsonValue);
                                                                                                                                                                                                                            {(ddlog_std::swap_nth: function(mut ddlog_std::Vec<json::JsonValue>, bit<64>, mut json::JsonValue):bool)(xs, n, old);
                                                                                                                                                                                                                             {json::set_by_ptr_(old, ptr, v, (idx + 64'd1));
                                                                                                                                                                                                                              {(ddlog_std::swap_nth: function(mut ddlog_std::Vec<json::JsonValue>, bit<64>, mut json::JsonValue):bool)(xs, n, old);
                                                                                                                                                                                                                               (ddlog_std::Ok{.res=()}: ddlog_std::Result<(),string>)}}}}},
                                                                                                                                      (_: json::JsonValue) -> (ddlog_std::Err{.err="Not a JSON array"}: ddlog_std::Result<(),string>)
                                                                                                                                  }}
    }
}
extern function json::to_json_string (x: 'T): ddlog_std::Result<string,string>
extern function json::to_json_value (x: 'T): ddlog_std::Result<json::JsonValue,string>
function json_test::array1 (): string
{
    "[{\"b\":true}, {\"b\":false}, {\"b\":true}, {\"b\":false}]"
}
function json_test::boolStruct1 (): string
{
    "{\"b\":true}"
}
function json_test::boolStruct2 (): string
{
    "{\"b\":true, \"foo\":\"bar\"}"
}
function json_test::boolStruct3 (): string
{
    "{\"foo\":\"bar\"}"
}
function json_test::enum1 (): string
{
    "{\"Variant1\": {\"b\": true}}"
}
function json_test::enum2 (): string
{
    "{\"Variant2\": {\"u\": 100}}"
}
function json_test::flattenedStruct1 (): string
{
    "{\"t\":\"foo\", \"@id\":\"1001001001\", \"x\": \"x\", \"z\": 100000}"
}
function json_test::key_structWithKey (x: json_test::StructWithKey): ddlog_std::u64
{
    x.key
}
function json_test::map1 (): string
{
    "{\"1\":{\"b\":true}, \"2\":{\"b\":false}, \"3\":{\"b\":true}, \"4\":{\"b\":false}}"
}
function json_test::mutilate_jval (): json::JsonValue
{
    {(var jval: json::JsonValue) = (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::nestedStruct1()));
     {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd2);
                              {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                               {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("x")}: json::JsonPtrItem));
                                __vec}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::boolStruct2())));
      {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd2);
                               {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("y")}: json::JsonPtrItem));
                                 __vec}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::boolStruct2())));
       {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd2);
                                {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                 {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                  __vec}}}, (json::JsonArray{.a={(var __vec: ddlog_std::Vec<json::JsonValue>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonValue>)(64'd2);
                                                                 {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonValue>, json::JsonValue):())(__vec, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::wenum1())));
                                                                  {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonValue>, json::JsonValue):())(__vec, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::wenum2())));
                                                                   __vec}}}}: json::JsonValue));
        {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd3);
                                 {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                  {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                   {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd1}: json::JsonPtrItem));
                                    __vec}}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::wenum3())));
         {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd4);
                                  {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                   {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                    {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd1}: json::JsonPtrItem));
                                     {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("b")}: json::JsonPtrItem));
                                      __vec}}}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::struct_with_map1())));
          {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd4);
                                   {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                    {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                     {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                      {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("b")}: json::JsonPtrItem));
                                       __vec}}}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::struct_with_map1())));
           {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd4);
                                    {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                     {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                      {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd9}: json::JsonPtrItem));
                                       {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("q")}: json::JsonPtrItem));
                                        __vec}}}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::struct_with_map1())));
            {json::set_by_ptr(jval, {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd2);
                                     {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("t")}: json::JsonPtrItem));
                                      {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                       __vec}}}, (ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::struct_with_map1())));
             jval}}}}}}}}}
}
function json_test::nestedStruct1 (): string
{
    "{\"t\":\"foo\", \"id\":\"1001001001\", \"nested\": {\"x\": \"x\", \"z\": 100000}}"
}
function json_test::optional1 (): string
{
    "{}"
}
function json_test::optional2 (): string
{
    "{\"s\": \"foo\"}"
}
function json_test::optional3 (): string
{
    "{\"s\": \"foo\", \"i\": 100000}"
}
function json_test::optional4 (): string
{
    "{\"s\": \"foo\", \"i\": 100000, \"v\": 2.5}"
}
function json_test::s32FromString1 (): string
{
    "{\"x\": \"-100000\"}"
}
function json_test::s32FromString2 (): string
{
    "{\"x\": \"100000000000\"}"
}
function json_test::scalar1 (): string
{
    "true"
}
function json_test::scalar2 (): string
{
    "100"
}
function json_test::scalar3 (): string
{
    "-100"
}
function json_test::scalar4 (): string
{
    "\"foo bar\""
}
function json_test::scalar5 (): string
{
    "2.99792458e8"
}
function json_test::struct_with_map1 (): string
{
    "{\"f\": [{\"key\": 100, \"payload\": \"foo\"}]}"
}
function json_test::tenum1 (): string
{
    "{\"@type\": \"t.V1\", \"b\": true}"
}
function json_test::tenum2 (): string
{
    "{\"@type\": \"t.V2\", \"u\": 100}"
}
function json_test::tenum3 (): string
{
    "{\"@type\": \"t.V2\", \"b\": false}"
}
function json_test::to_json_string_or_default (x: 'T): string
{
    (ddlog_std::unwrap_or_default: function(ddlog_std::Result<string,string>):string)((json::to_json_string: function('T):ddlog_std::Result<string,string>)(x))
}
function json_test::u64FromString1 (): string
{
    "{\"x\": \"x\", \"y\": \"100000\"}"
}
function json_test::u64FromString2 (): string
{
    "{\"x\": \"x\", \"y\": \"-100000\"}"
}
function json_test::wenum1 (): string
{
    "{\"@type\": \"t.V1\", \"b\": true}"
}
function json_test::wenum2 (): string
{
    "{\"@type\": \"t.V2\", \"u\": 100}"
}
function json_test::wenum3 (): string
{
    "{\"@type\": \"t.V2\", \"b\": false}"
}
#[has_side_effects = true]
extern function log::log (module: log::module_t, level: log::log_level_t, msg: string): ()
function map::filter (m: ddlog_std::Map<'K,'V>, f: function('V):bool): ddlog_std::Map<'K,'V>
{
    {(var res: ddlog_std::Map<'K,'V>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V>)();
     {for (kv in m) {
          if f(kv.1) {
              (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V>, 'K, 'V):())(res, kv.0, kv.1)
          } else {
                ()
            }
      };
      res}}
}
function map::filter (m: ddlog_std::Map<'K,'V>, f: function('K, 'V):bool): ddlog_std::Map<'K,'V>
{
    {(var res: ddlog_std::Map<'K,'V>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V>)();
     {for (kv in m) {
          if f(kv.0, kv.1) {
              (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V>, 'K, 'V):())(res, kv.0, kv.1)
          } else {
                ()
            }
      };
      res}}
}
function map::filter_map (m: ddlog_std::Map<'K,'V1>, f: function('V1):ddlog_std::Option<'V2>): ddlog_std::Map<'K,'V2>
{
    {(var res: ddlog_std::Map<'K,'V2>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V2>)();
     {for (kv in m) {
          match (f(kv.1)) {
              (ddlog_std::None{}: ddlog_std::Option<'V2>) -> (),
              (ddlog_std::Some{.x=(var v: 'V2)}: ddlog_std::Option<'V2>) -> (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V2>, 'K, 'V2):())(res, kv.0, v)
          }
      };
      res}}
}
function map::filter_map (m: ddlog_std::Map<'K,'V1>, f: function('K, 'V1):ddlog_std::Option<'V2>): ddlog_std::Map<'K,'V2>
{
    {(var res: ddlog_std::Map<'K,'V2>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V2>)();
     {for (kv in m) {
          match (f(kv.0, kv.1)) {
              (ddlog_std::None{}: ddlog_std::Option<'V2>) -> (),
              (ddlog_std::Some{.x=(var v: 'V2)}: ddlog_std::Option<'V2>) -> (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V2>, 'K, 'V2):())(res, kv.0, v)
          }
      };
      res}}
}
function map::fold (m: ddlog_std::Map<'K,'V>, f: function('A, 'V):'A, initializer: 'A): 'A
{
    {(var res: 'A) = initializer;
     {for (kv in m) {
          res = f(res, kv.1)
      };
      res}}
}
function map::fold (m: ddlog_std::Map<'K,'V>, f: function('A, 'K, 'V):'A, initializer: 'A): 'A
{
    {(var res: 'A) = initializer;
     {for (kv in m) {
          res = f(res, kv.0, kv.1)
      };
      res}}
}
function map::map (m: ddlog_std::Map<'K,'V1>, f: function('V1):'V2): ddlog_std::Map<'K,'V2>
{
    {(var res: ddlog_std::Map<'K,'V2>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V2>)();
     {for (kv in m) {
          (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V2>, 'K, 'V2):())(res, kv.0, f(kv.1))
      };
      res}}
}
function map::map (m: ddlog_std::Map<'K,'V1>, f: function('K, 'V1):'V2): ddlog_std::Map<'K,'V2>
{
    {(var res: ddlog_std::Map<'K,'V2>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K,'V2>)();
     {for (kv in m) {
          (ddlog_std::insert: function(mut ddlog_std::Map<'K,'V2>, 'K, 'V2):())(res, kv.0, f(kv.0, kv.1))
      };
      res}}
}
function map::map_in_place (m: mut ddlog_std::Map<'K,'V>, f: function('K, mut 'V):()): ()
{
    (map::map_map_in_place: function(mut ddlog_std::Map<'K,'V>, function('K, mut 'V):()):())(m, f)
}
function map::map_keys (m: ddlog_std::Map<'K1,'V>, f: function('K1):'K2): ddlog_std::Map<'K2,'V>
{
    {(var res: ddlog_std::Map<'K2,'V>) = (ddlog_std::map_empty: function():ddlog_std::Map<'K2,'V>)();
     {for (kv in m) {
          (ddlog_std::insert: function(mut ddlog_std::Map<'K2,'V>, 'K2, 'V):())(res, f(kv.0), kv.1)
      };
      res}}
}
extern function map::map_map_in_place (m: mut ddlog_std::Map<'K,'V>, f: function('K, mut 'V):()): ()
function map::retain (m: mut ddlog_std::Map<'K,'V>, f: function('V):bool): ()
{
    {(var keys: ddlog_std::Vec<'K>) = (ddlog_std::keys: function(ddlog_std::Map<'K,'V>):ddlog_std::Vec<'K>)(m);
     {for (k in keys) {
          match ((ddlog_std::get: function(ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k)) {
              (ddlog_std::Some{.x=(var v: 'V)}: ddlog_std::Option<'V>) -> if (not f(v)) {
                                                                              {(ddlog_std::remove: function(mut ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k);
                                                                               ()}
                                                                          } else {
                                                                                ()
                                                                            },
              (ddlog_std::None{}: ddlog_std::Option<'V>) -> ()
          }
      };
      ()}}
}
function map::retain (m: mut ddlog_std::Map<'K,'V>, f: function('K, 'V):bool): ()
{
    {(var keys: ddlog_std::Vec<'K>) = (ddlog_std::keys: function(ddlog_std::Map<'K,'V>):ddlog_std::Vec<'K>)(m);
     {for (k in keys) {
          match ((ddlog_std::get: function(ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k)) {
              (ddlog_std::Some{.x=(var v: 'V)}: ddlog_std::Option<'V>) -> if (not f(k, v)) {
                                                                              {(ddlog_std::remove: function(mut ddlog_std::Map<'K,'V>, 'K):ddlog_std::Option<'V>)(m, k);
                                                                               ()}
                                                                          } else {
                                                                                ()
                                                                            },
              (ddlog_std::None{}: ddlog_std::Option<'V>) -> ()
          }
      };
      ()}}
}
function map_test::test_map (): ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>
{
    {(var __map: ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>) = (ddlog_std::map_empty: function():ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)();
     {(ddlog_std::insert: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, (signed<64>, string), map_test::Foo):())(__map, (64'sd0, "0"), (map_test::Foo{.x=0}: map_test::Foo));
      {(ddlog_std::insert: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, (signed<64>, string), map_test::Foo):())(__map, (64'sd1, "1"), (map_test::Foo{.x=1}: map_test::Foo));
       {(ddlog_std::insert: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, (signed<64>, string), map_test::Foo):())(__map, (64'sd2, "2"), (map_test::Foo{.x=2}: map_test::Foo));
        __map}}}}
}
function net::ipaddr::ipaddr_from_ipv4addr (ipv4: net::ipv4::Ipv4Addr): net::ipaddr::IpAddr
{
    (net::ipaddr::IpAddrV4{.addr4=ipv4}: net::ipaddr::IpAddr)
}
function net::ipaddr::ipaddr_from_ipv6addr (ipv6: net::ipv6::Ipv6Addr): net::ipaddr::IpAddr
{
    (net::ipaddr::IpAddrV6{.addr6=ipv6}: net::ipaddr::IpAddr)
}
function net::ipaddr::ipaddr_is_ipv4 (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(_: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> true,
        (net::ipaddr::IpAddrV6{.addr6=(_: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> false
    }
}
function net::ipaddr::ipaddr_is_ipv6 (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(_: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> false,
        (net::ipaddr::IpAddrV6{.addr6=(_: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> true
    }
}
function net::ipaddr::ipaddr_is_loopback (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_loopback(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_loopback(a)
    }
}
function net::ipaddr::ipaddr_is_multicast (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_multicast(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_multicast(a)
    }
}
function net::ipaddr::ipaddr_is_unspecified (addr: net::ipaddr::IpAddr): bool
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::ipv4_is_unspecified(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::ipv6_is_unspecified(a)
    }
}
function net::ipaddr::to_string (addr: net::ipaddr::IpAddr): string
{
    match (addr) {
        (net::ipaddr::IpAddrV4{.addr4=(var a: net::ipv4::Ipv4Addr)}: net::ipaddr::IpAddr) -> net::ipv4::to_string(a),
        (net::ipaddr::IpAddrV6{.addr6=(var a: net::ipv6::Ipv6Addr)}: net::ipaddr::IpAddr) -> net::ipv6::to_string(a)
    }
}
extern function net::ipv4::iPV4_BROADCAST (): net::ipv4::Ipv4Addr
extern function net::ipv4::iPV4_LOCALHOST (): net::ipv4::Ipv4Addr
extern function net::ipv4::iPV4_UNSPECIFIED (): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4Addr2string (addr: net::ipv4::Ipv4Addr): string
extern function net::ipv4::ipv4_from_octet_vec (octets: ddlog_std::Vec<ddlog_std::u8>): ddlog_std::Option<net::ipv4::Ipv4Addr>
extern function net::ipv4::ipv4_from_str (s: string): ddlog_std::Result<net::ipv4::Ipv4Addr,string>
extern function net::ipv4::ipv4_from_u32 (ip: ddlog_std::u32): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4_is_broadcast (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_documentation (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_link_local (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_loopback (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_multicast (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_private (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_is_unspecified (addr: net::ipv4::Ipv4Addr): bool
extern function net::ipv4::ipv4_new (a: ddlog_std::u8, b: ddlog_std::u8, c: ddlog_std::u8, d: ddlog_std::u8): net::ipv4::Ipv4Addr
extern function net::ipv4::ipv4_octet_vec (addr: net::ipv4::Ipv4Addr): ddlog_std::Vec<ddlog_std::u8>
extern function net::ipv4::ipv4_octets (addr: net::ipv4::Ipv4Addr): (ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8)
extern function net::ipv4::ipv4_to_ipv6_compatible (addr: net::ipv4::Ipv4Addr): net::ipv6::Ipv6Addr
extern function net::ipv4::ipv4_to_ipv6_mapped (addr: net::ipv4::Ipv4Addr): net::ipv6::Ipv6Addr
extern function net::ipv4::ipv4_to_u32 (addr: net::ipv4::Ipv4Addr): ddlog_std::u32
function net::ipv4::to_string (addr: net::ipv4::Ipv4Addr): string
{
    net::ipv4::ipv4Addr2string(addr)
}
extern function net::ipv6::iPV6_LOCALHOST (): net::ipv6::Ipv6Addr
extern function net::ipv6::iPV6_UNSPECIFIED (): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6Addr2string (addr: net::ipv6::Ipv6Addr): string
extern function net::ipv6::ipv6_from_octet_vec (octets: ddlog_std::Vec<ddlog_std::u8>): ddlog_std::Option<net::ipv6::Ipv6Addr>
extern function net::ipv6::ipv6_from_octets (b0: ddlog_std::u8, b1: ddlog_std::u8, b2: ddlog_std::u8, b3: ddlog_std::u8, b4: ddlog_std::u8, b5: ddlog_std::u8, b6: ddlog_std::u8, b7: ddlog_std::u8, b8: ddlog_std::u8, b9: ddlog_std::u8, b10: ddlog_std::u8, b11: ddlog_std::u8, b12: ddlog_std::u8, b13: ddlog_std::u8, b14: ddlog_std::u8, b15: ddlog_std::u8): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_from_segment_vec (segments: ddlog_std::Vec<ddlog_std::u16>): ddlog_std::Option<net::ipv6::Ipv6Addr>
extern function net::ipv6::ipv6_from_str (s: string): ddlog_std::Result<net::ipv6::Ipv6Addr,string>
extern function net::ipv6::ipv6_from_u128 (ip: ddlog_std::u128): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_is_loopback (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_is_multicast (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_is_unspecified (addr: net::ipv6::Ipv6Addr): bool
extern function net::ipv6::ipv6_new (a: ddlog_std::u16, b: ddlog_std::u16, c: ddlog_std::u16, d: ddlog_std::u16, e: ddlog_std::u16, f: ddlog_std::u16, g: ddlog_std::u16, h: ddlog_std::u16): net::ipv6::Ipv6Addr
extern function net::ipv6::ipv6_octet_vec (addr: net::ipv6::Ipv6Addr): ddlog_std::Vec<ddlog_std::u8>
extern function net::ipv6::ipv6_octets (addr: net::ipv6::Ipv6Addr): (ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8, ddlog_std::u8)
extern function net::ipv6::ipv6_segment_vec (addr: net::ipv6::Ipv6Addr): ddlog_std::Vec<ddlog_std::u16>
extern function net::ipv6::ipv6_segments (addr: net::ipv6::Ipv6Addr): (ddlog_std::u16, ddlog_std::u16, ddlog_std::u16, ddlog_std::u16, ddlog_std::u16, ddlog_std::u16, ddlog_std::u16, ddlog_std::u16)
extern function net::ipv6::ipv6_to_ipv4 (addr: net::ipv6::Ipv6Addr): ddlog_std::Option<net::ipv4::Ipv4Addr>
extern function net::ipv6::ipv6_to_u128 (addr: net::ipv6::Ipv6Addr): ddlog_std::u128
function net::ipv6::to_string (addr: net::ipv6::Ipv6Addr): string
{
    net::ipv6::ipv6Addr2string(addr)
}
extern function regex::regex (pattern: string): regex::Regex
extern function regex::regex_all_matches (regex: regex::Regex, text: string): ddlog_std::Vec<string>
extern function regex::regex_checked (pattern: string): ddlog_std::Result<regex::Regex,string>
extern function regex::regex_first_match (regex: regex::Regex, text: string): ddlog_std::Option<string>
extern function regex::regex_match (regex: regex::Regex, text: string): bool
function set::all (s: ddlog_std::Set<'A>, f: function('A):bool): bool
{
    {for (x in s) {
         if (not f(x)) {
             ((return false): ())
         } else {
               ()
           }
     };
     true}
}
function set::any (s: ddlog_std::Set<'A>, f: function('A):bool): bool
{
    {for (x in s) {
         if f(x) {
             ((return true): ())
         } else {
               ()
           }
     };
     false}
}
function set::filter (s: ddlog_std::Set<'A>, f: function('A):bool): ddlog_std::Set<'A>
{
    {(var res: ddlog_std::Set<'A>) = (ddlog_std::set_empty: function():ddlog_std::Set<'A>)();
     {for (x in s) {
          if f(x) {
              (ddlog_std::insert: function(mut ddlog_std::Set<'A>, 'A):())(res, x)
          } else {
                ()
            }
      };
      res}}
}
function set::filter_map (s: ddlog_std::Set<'A>, f: function('A):ddlog_std::Option<'B>): ddlog_std::Set<'B>
{
    {(var res: ddlog_std::Set<'B>) = (ddlog_std::set_empty: function():ddlog_std::Set<'B>)();
     {for (x in s) {
          match (f(x)) {
              (ddlog_std::None{}: ddlog_std::Option<'B>) -> (),
              (ddlog_std::Some{.x=(var y: 'B)}: ddlog_std::Option<'B>) -> (ddlog_std::insert: function(mut ddlog_std::Set<'B>, 'B):())(res, y)
          }
      };
      res}}
}
function set::find (s: ddlog_std::Set<'A>, f: function('A):bool): ddlog_std::Option<'A>
{
    {for (x in s) {
         if f(x) {
             ((return (ddlog_std::Some{.x=x}: ddlog_std::Option<'A>)): ())
         } else {
               ()
           }
     };
     (ddlog_std::None{}: ddlog_std::Option<'A>)}
}
function set::fold (s: ddlog_std::Set<'A>, f: function('B, 'A):'B, initializer: 'B): 'B
{
    {(var res: 'B) = initializer;
     {for (x in s) {
          res = f(res, x)
      };
      res}}
}
function set::map (s: ddlog_std::Set<'A>, f: function('A):'B): ddlog_std::Set<'B>
{
    {(var res: ddlog_std::Set<'B>) = (ddlog_std::set_empty: function():ddlog_std::Set<'B>)();
     {for (x in s) {
          (ddlog_std::insert: function(mut ddlog_std::Set<'B>, 'B):())(res, f(x))
      };
      res}}
}
function set::max_by (s: ddlog_std::Set<'A>, f: function('A):'B): ddlog_std::Option<'A>
{
    (set::set_max_by: function(ddlog_std::Set<'A>, function('A):'B):ddlog_std::Option<'A>)(s, f)
}
function set::min_by (s: ddlog_std::Set<'A>, f: function('A):'B): ddlog_std::Option<'A>
{
    (set::set_min_by: function(ddlog_std::Set<'A>, function('A):'B):ddlog_std::Option<'A>)(s, f)
}
extern function set::set_max_by (s: ddlog_std::Set<'A>, f: function('A):'B): ddlog_std::Option<'A>
extern function set::set_min_by (s: ddlog_std::Set<'A>, f: function('A):'B): ddlog_std::Option<'A>
function set_test::test_set (): set_test::TestSet
{
    (ddlog_std::to_set: function(ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)({(var __vec: ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>)(64'd5);
                                                                                                                                                              {(ddlog_std::push: function(mut ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>, (signed<64>, ddlog_std::Vec<signed<64>>)):())(__vec, (64'sd0, {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                       {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd0);
                                                                                                                                                                                                                                                                                                                        {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd1);
                                                                                                                                                                                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd2);
                                                                                                                                                                                                                                                                                                                          __vec}}}}));
                                                                                                                                                               {(ddlog_std::push: function(mut ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>, (signed<64>, ddlog_std::Vec<signed<64>>)):())(__vec, (64'sd1, {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                        {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd2);
                                                                                                                                                                                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd3);
                                                                                                                                                                                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd4);
                                                                                                                                                                                                                                                                                                                           __vec}}}}));
                                                                                                                                                                {(ddlog_std::push: function(mut ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>, (signed<64>, ddlog_std::Vec<signed<64>>)):())(__vec, (64'sd2, {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd4);
                                                                                                                                                                                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd5);
                                                                                                                                                                                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd6);
                                                                                                                                                                                                                                                                                                                            __vec}}}}));
                                                                                                                                                                 {(ddlog_std::push: function(mut ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>, (signed<64>, ddlog_std::Vec<signed<64>>)):())(__vec, (64'sd3, {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd6);
                                                                                                                                                                                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd7);
                                                                                                                                                                                                                                                                                                                            {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd8);
                                                                                                                                                                                                                                                                                                                             __vec}}}}));
                                                                                                                                                                  {(ddlog_std::push: function(mut ddlog_std::Vec<(signed<64>, ddlog_std::Vec<signed<64>>)>, (signed<64>, ddlog_std::Vec<signed<64>>)):())(__vec, (64'sd4, {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd8);
                                                                                                                                                                                                                                                                                                                            {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd9);
                                                                                                                                                                                                                                                                                                                             {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd10);
                                                                                                                                                                                                                                                                                                                              __vec}}}}));
                                                                                                                                                                   __vec}}}}}})
}
function std_test::alphabet_map (): ddlog_std::Map<ddlog_std::usize,string>
{
    {(var __map: ddlog_std::Map<ddlog_std::usize,string>) = (ddlog_std::map_empty: function():ddlog_std::Map<ddlog_std::usize,string>)();
     {(ddlog_std::insert: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>, string):())(__map, 64'd0, "a");
      {(ddlog_std::insert: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>, string):())(__map, 64'd1, "b");
       {(ddlog_std::insert: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>, string):())(__map, 64'd2, "c");
        {(ddlog_std::insert: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>, string):())(__map, 64'd3, "d");
         {(ddlog_std::insert: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>, string):())(__map, 64'd4, "e");
          __map}}}}}}
}
function std_test::to_string (e: std_test::DefaultEnum): string
{
    match (e) {
        (std_test::DEnum1{}: std_test::DefaultEnum) -> "DEnum1",
        (std_test::DEnum2{.x=(var e: bit<32>)}: std_test::DefaultEnum) -> (("DEnum2{" ++ (ddlog_std::__builtin_2string: function(bit<32>):string)(e)) ++ "}")
    }
}
function std_test::vec0 (): ddlog_std::Vec<ddlog_std::s64>
{
    {(var __vec: ddlog_std::Vec<ddlog_std::s64>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<ddlog_std::s64>)(64'd6);
     {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd0);
      {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd1);
       {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd2);
        {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd3);
         {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd4);
          {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(__vec, 64'sd5);
           __vec}}}}}}}
}
function tinyset::__debug_306_1_group_to_set (g: ddlog_std::Group<string,('I, bit<32>)>): (ddlog_std::Vec<'I>, tinyset::Set64<bit<32>>)
{
    {((var inputs: ddlog_std::Vec<'I>), (var original_group: ddlog_std::Group<string,bit<32>>)) = debug::debug_split_group(g);
     (inputs, tinyset::group_to_set(original_group))}
}
extern function tinyset::contains (s: tinyset::Set64<'X>, v: 'X): bool
extern function tinyset::difference (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::empty (): tinyset::Set64<'X>
extern function tinyset::group_set_unions (g: ddlog_std::Group<'K,tinyset::Set64<'V>>): tinyset::Set64<'V>
extern function tinyset::group_setref_unions (g: ddlog_std::Group<'K,ddlog_std::Ref<tinyset::Set64<'V>>>): ddlog_std::Ref<tinyset::Set64<'V>>
extern function tinyset::group_to_set (g: ddlog_std::Group<'K,'V>): tinyset::Set64<'V>
extern function tinyset::insert (s: mut tinyset::Set64<'X>, v: 'X): ()
extern function tinyset::insert_imm (s: tinyset::Set64<'X>, v: 'X): tinyset::Set64<'X>
extern function tinyset::intersection (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::is_empty (s: tinyset::Set64<'X>): bool
extern function tinyset::nth (s: tinyset::Set64<'X>, n: bit<64>): ddlog_std::Option<bit<64>>
extern function tinyset::singleton (x: 'X): tinyset::Set64<'X>
extern function tinyset::size (s: tinyset::Set64<'X>): bit<64>
extern function tinyset::union (s1: tinyset::Set64<'X>, s2: tinyset::Set64<'X>): tinyset::Set64<'X>
extern function tinyset::unions (sets: ddlog_std::Vec<tinyset::Set64<'X>>): tinyset::Set64<'X>
extern function url::cannot_be_a_base (url: url::Url): bool
extern function url::domain (url: url::Url): ddlog_std::Option<string>
extern function url::fragment (url: url::Url): ddlog_std::Option<string>
extern function url::has_authority (url: url::Url): bool
extern function url::has_host (url: url::Url): bool
extern function url::host_str (url: url::Url): ddlog_std::Option<string>
extern function url::join (url: url::Url, other: string): ddlog_std::Result<url::Url,string>
extern function url::password (url: url::Url): ddlog_std::Option<string>
extern function url::path (url: url::Url): string
extern function url::port (url: url::Url): ddlog_std::Option<ddlog_std::u16>
extern function url::port_or_known_default (url: url::Url): ddlog_std::Option<ddlog_std::u16>
extern function url::query (url: url::Url): ddlog_std::Option<string>
extern function url::scheme (url: url::Url): string
function url::to_string (url: url::Url): string
{
    url::url_to_string(url)
}
extern function url::url_parse (url: string): ddlog_std::Result<url::Url,string>
extern function url::url_to_string (url: url::Url): string
extern function url::username (url: url::Url): string
extern function uuid::as_u128 (uuid: uuid::Uuid): ddlog_std::u128
extern function uuid::from_bytes (b: ddlog_std::Vec<ddlog_std::u8>): ddlog_std::Result<uuid::Uuid,uuid::Error>
extern function uuid::from_u128 (v: ddlog_std::u128): uuid::Uuid
extern function uuid::from_u128_le (v: ddlog_std::u128): uuid::Uuid
extern function uuid::is_nil (uuid: uuid::Uuid): bool
extern function uuid::nAMESPACE_DNS (): uuid::Uuid
extern function uuid::nAMESPACE_OID (): uuid::Uuid
extern function uuid::nAMESPACE_URL (): uuid::Uuid
extern function uuid::nAMESPACE_X500 (): uuid::Uuid
extern function uuid::new_v5 (namespace: uuid::Uuid, name: ddlog_std::Vec<ddlog_std::u8>): uuid::Uuid
extern function uuid::nil (): uuid::Uuid
extern function uuid::parse_str (str: string): ddlog_std::Result<uuid::Uuid,uuid::Error>
extern function uuid::to_hyphenated_lower (uuid: uuid::Uuid): string
extern function uuid::to_hyphenated_upper (uuid: uuid::Uuid): string
extern function uuid::to_simple_lower (uuid: uuid::Uuid): string
extern function uuid::to_simple_upper (uuid: uuid::Uuid): string
extern function uuid::to_u128_le (uuid: uuid::Uuid): ddlog_std::u128
extern function uuid::to_urn_lower (uuid: uuid::Uuid): string
extern function uuid::to_urn_upper (uuid: uuid::Uuid): string
function uuid_test::test_uuid_from_bytes (): uuid::Uuid
{
    {(var bytes: ddlog_std::Vec<bit<8>>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<bit<8>>)();
     {for (i in (ddlog_std::range: function(bit<8>, bit<8>, bit<8>):ddlog_std::Vec<bit<8>>)((8'd0: bit<8>), (8'd15: bit<8>), (8'd1: bit<8>))) {
          (ddlog_std::vec_push: function(mut ddlog_std::Vec<bit<8>>, bit<8>):())(bytes, (i as bit<8>))
      };
      (ddlog_std::unwrap_or: function(ddlog_std::Result<uuid::Uuid,uuid::Error>, uuid::Uuid):uuid::Uuid)(uuid::from_bytes(bytes), uuid::nil())}}
}
function uuid_test::uuid_parse_or_nil (str: string): uuid::Uuid
{
    (ddlog_std::unwrap_or: function(ddlog_std::Result<uuid::Uuid,uuid::Error>, uuid::Uuid):uuid::Uuid)(uuid::parse_str(str), uuid::nil())
}
function vec::all (v: ddlog_std::Vec<'A>, f: function('A):bool): bool
{
    {for (x in v) {
         if (not f(x)) {
             ((return false): ())
         } else {
               ()
           }
     };
     true}
}
function vec::any (v: ddlog_std::Vec<'A>, f: function('A):bool): bool
{
    {for (x in v) {
         if f(x) {
             ((return true): ())
         } else {
               ()
           }
     };
     false}
}
function vec::count (v: ddlog_std::Vec<'A>, f: function('A):bool): ddlog_std::usize
{
    {(var cnt: bit<64>) = 64'd0;
     {for (x in v) {
          if f(x) {
              cnt = (cnt + 64'd1)
          } else {
                ()
            }
      };
      cnt}}
}
function vec::filter (v: ddlog_std::Vec<'A>, f: function('A):bool): ddlog_std::Vec<'A>
{
    {(var res: ddlog_std::Vec<'A>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<'A>)();
     {for (x in v) {
          if f(x) {
              (ddlog_std::push: function(mut ddlog_std::Vec<'A>, 'A):())(res, x)
          } else {
                ()
            }
      };
      res}}
}
function vec::filter_map (v: ddlog_std::Vec<'A>, f: function('A):ddlog_std::Option<'B>): ddlog_std::Vec<'B>
{
    {(var res: ddlog_std::Vec<'B>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<'B>)();
     {for (x in v) {
          match (f(x)) {
              (ddlog_std::None{}: ddlog_std::Option<'B>) -> (),
              (ddlog_std::Some{.x=(var y: 'B)}: ddlog_std::Option<'B>) -> (ddlog_std::push: function(mut ddlog_std::Vec<'B>, 'B):())(res, y)
          }
      };
      res}}
}
function vec::find (v: ddlog_std::Vec<'A>, f: function('A):bool): ddlog_std::Option<'A>
{
    {for (x in v) {
         if f(x) {
             ((return (ddlog_std::Some{.x=x}: ddlog_std::Option<'A>)): ())
         } else {
               ()
           }
     };
     (ddlog_std::None{}: ddlog_std::Option<'A>)}
}
function vec::flatmap (v: ddlog_std::Vec<'A>, f: function('A):ddlog_std::Vec<'B>): ddlog_std::Vec<'B>
{
    {(var res: ddlog_std::Vec<'B>) = (ddlog_std::vec_empty: function():ddlog_std::Vec<'B>)();
     {for (x in v) {
          (ddlog_std::append: function(mut ddlog_std::Vec<'B>, ddlog_std::Vec<'B>):())(res, f(x))
      };
      res}}
}
function vec::fold (v: ddlog_std::Vec<'A>, f: function('B, 'A):'B, initializer: 'B): 'B
{
    {(var res: 'B) = initializer;
     {for (x in v) {
          res = f(res, x)
      };
      res}}
}
function vec::map (v: ddlog_std::Vec<'A>, f: function('A):'B): ddlog_std::Vec<'B>
{
    {(var res: ddlog_std::Vec<'B>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<'B>)((ddlog_std::len: function(ddlog_std::Vec<'A>):bit<64>)(v));
     {for (x in v) {
          (ddlog_std::push: function(mut ddlog_std::Vec<'B>, 'B):())(res, f(x))
      };
      res}}
}
function vec::max_by (v: ddlog_std::Vec<'A>, f: function('A):'B): ddlog_std::Option<'A>
{
    (vec::vec_max_by: function(ddlog_std::Vec<'A>, function('A):'B):ddlog_std::Option<'A>)(v, f)
}
function vec::min_by (v: ddlog_std::Vec<'A>, f: function('A):'B): ddlog_std::Option<'A>
{
    (vec::vec_min_by: function(ddlog_std::Vec<'A>, function('A):'B):ddlog_std::Option<'A>)(v, f)
}
function vec::retain (v: mut ddlog_std::Vec<'A>, f: function('A):bool): ()
{
    {(var del: ddlog_std::s64) = 64'sd0;
     {(var len: bit<64>) = (ddlog_std::len: function(ddlog_std::Vec<'A>):bit<64>)(v);
      {for (i in (ddlog_std::range: function(signed<64>, signed<64>, signed<64>):ddlog_std::Vec<signed<64>>)(64'sd0, ((len as ddlog_std::isize) - 64'sd1), 64'sd1)) {
           {(var x: 'A) = (ddlog_std::unwrap_or_default: function(ddlog_std::Option<'A>):'A)((ddlog_std::nth: function(ddlog_std::Vec<'A>, bit<64>):ddlog_std::Option<'A>)(v, (i as ddlog_std::usize)));
            if (not f(x)) {
                del = (del + 64'sd1)
            } else {
                  if (del > 64'sd0) {
                      {(ddlog_std::update_nth: function(mut ddlog_std::Vec<'A>, bit<64>, 'A):bool)(v, ((i - del) as ddlog_std::usize), x);
                       ()}
                  } else {
                        ()
                    }
              }}
       };
       if (del > 64'sd0) {
           {(ddlog_std::truncate: function(mut ddlog_std::Vec<'A>, bit<64>):())(v, (len - (del as ddlog_std::usize)));
            ()}
       } else {
             ()
         }}}}
}
function vec::sort_by (v: mut ddlog_std::Vec<'A>, f: function('A):'B): ()
{
    (vec::vec_sort_by: function(mut ddlog_std::Vec<'A>, function('A):'B):())(v, f)
}
extern function vec::vec_max_by (v: ddlog_std::Vec<'A>, f: function('A):'B): ddlog_std::Option<'A>
extern function vec::vec_min_by (v: ddlog_std::Vec<'A>, f: function('A):'B): ddlog_std::Option<'A>
extern function vec::vec_sort_by (v: mut ddlog_std::Vec<'A>, f: function('A):'B): ()
function vec_test::int_vec (): ddlog_std::Vec<ddlog_std::s64>
{
    (ddlog_std::range: function(signed<64>, signed<64>, signed<64>):ddlog_std::Vec<ddlog_std::s64>)((- 64'sd10), 64'sd10, 64'sd1)
}
function vec_test::is_even (x: ddlog_std::s64): bool
{
    ((x % 64'sd2) == 64'sd0)
}
output relation fp_test::BB [fp_test::BB]
output relation fp_test::D [fp_test::D]
input relation fp_test::DoublesFromRecord [fp_test::DoublesFromRecord]
output relation fp_test::F [fp_test::F]
input relation fp_test::FloatsFromRecord [fp_test::FloatsFromRecord]
output relation fp_test::OutDoublesFromRecord [fp_test::DoublesFromRecord]
output relation fp_test::OutFloatsFromRecord [fp_test::FloatsFromRecord]
relation internment_test::AllInternedString [internment_test::AllInternedString]
input relation internment_test::IInternedString [internment_test::IInternedString]
input relation internment_test::IStruct [internment::Intern<internment_test::IStruct>]
output relation internment_test::OInternedString [internment_test::OInternedString]
output relation internment_test::Projections [internment_test::Projections]
relation internment_test::StaticInternedString [internment_test::StaticInternedString]
input relation json_test::Deserialized [json_test::TaggedEnum]
output relation json_test::JsonTest [json_test::JsonTest]
output relation json_test::JsonTestValue [json_test::JsonTestValue]
output relation json_test::ODeserialized [json_test::TaggedEnum]
output relation map_test::MapFolds [map_test::MapFolds]
output relation map_test::MapTransforms [map_test::MapTransforms]
output relation net_test::NetChecks [net_test::NetChecks]
relation regex_test::RegexTestInput [regex_test::RegexTestInput]
output relation regex_test::RegexTestOutput [regex_test::RegexTestOutput]
output relation set_test::SetFolds [set_test::SetFolds]
output relation set_test::SetTransforms [set_test::SetTransforms]
output relation std_test::Default [std_test::Default]
output relation std_test::IntVecTest [std_test::IntVecTest]
output relation std_test::MapDelete [std_test::MapDelete]
output relation std_test::MapSizes [std_test::MapSizes]
input relation std_test::Maps [std_test::Maps]
output relation std_test::Pow [std_test::Pow]
output relation std_test::SetDifference [std_test::SetDifference]
input relation std_test::SetPairs [std_test::SetPairs]
output relation std_test::SortedVector [std_test::SortedVector]
output relation std_test::SortedVectorInPlace [std_test::SortedVectorInPlace]
input relation std_test::Vector [std_test::Vector]
output relation tinyset_test::Diffs [tinyset_test::Diffs]
output relation tinyset_test::Intersects [tinyset_test::Intersects]
output relation tinyset_test::Intersects2 [tinyset_test::Intersects2]
input relation tinyset_test::SetElement [tinyset_test::SetElement]
output relation tinyset_test::Sets [tinyset_test::Sets]
output relation url_test::URLTest [url_test::URLTest]
output relation uuid_test::UUID [uuid_test::UUID]
output relation vec_test::CompareClosures [vec_test::CompareClosures]
relation vec_test::Increments [vec_test::Increments]
relation vec_test::IntClosures [vec_test::IntClosures]
relation vec_test::IntVecClosures [vec_test::IntVecClosures]
output relation vec_test::IntVecTransforms [vec_test::IntVecTransforms]
output relation vec_test::VecFolds [vec_test::VecFolds]
std_test::SortedVector[(std_test::SortedVector{.v=sorted}: std_test::SortedVector)] :- std_test::Vector[(__std_test_vector0@ (std_test::Vector{.v=(v: ddlog_std::Vec<bigint>)}: std_test::Vector))], (var sorted: ddlog_std::Vec<bigint>) = (ddlog_std::sort_imm: function(ddlog_std::Vec<bigint>):ddlog_std::Vec<bigint>)(v), Inspect debug::debug_event((32'd0, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __std_test_vector0, (std_test::SortedVector{.v=sorted}: std_test::SortedVector)).
std_test::SortedVectorInPlace[(std_test::SortedVectorInPlace{.v=sorted}: std_test::SortedVectorInPlace)] :- std_test::Vector[(__std_test_vector0@ (std_test::Vector{.v=(v: ddlog_std::Vec<bigint>)}: std_test::Vector))], (var sorted: ddlog_std::Vec<bigint>) = {(var v2: ddlog_std::Vec<bigint>) = v;
                                                                                                                                                                                                                                                                  {(ddlog_std::sort: function(mut ddlog_std::Vec<bigint>):())(v2);
                                                                                                                                                                                                                                                                   v2}}, Inspect debug::debug_event((32'd1, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __std_test_vector0, (std_test::SortedVectorInPlace{.v=sorted}: std_test::SortedVectorInPlace)).
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0", .vec=std_test::vec0()}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.resize(10,-100)", .vec={(var v: ddlog_std::Vec<ddlog_std::s64>) = std_test::vec0();
                                                                                {(ddlog_std::resize: function(mut ddlog_std::Vec<ddlog_std::s64>, bit<64>, signed<64>):())(v, 64'd10, (- 64'sd100));
                                                                                 v}}}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.update_nth(10, -1)", .vec={(var v: ddlog_std::Vec<ddlog_std::s64>) = std_test::vec0();
                                                                                   {(ddlog_std::update_nth: function(mut ddlog_std::Vec<ddlog_std::s64>, bit<64>, signed<64>):bool)(v, 64'd10, (- 64'sd1));
                                                                                    v}}}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.update_nth(1, -1)", .vec={(var v: ddlog_std::Vec<ddlog_std::s64>) = std_test::vec0();
                                                                                  {(ddlog_std::update_nth: function(mut ddlog_std::Vec<ddlog_std::s64>, bit<64>, signed<64>):bool)(v, 64'd1, (- 64'sd1));
                                                                                   v}}}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.swap_nth(10, -1)", .vec={(var v: ddlog_std::Vec<ddlog_std::s64>) = std_test::vec0();
                                                                                 {(var val: signed<64>) = (- 64'sd1);
                                                                                  {(ddlog_std::swap_nth: function(mut ddlog_std::Vec<ddlog_std::s64>, bit<64>, mut signed<64>):bool)(v, 64'd10, val);
                                                                                   {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(v, val);
                                                                                    v}}}}}: std_test::IntVecTest)].
std_test::IntVecTest[(std_test::IntVecTest{.descr="vec0.swap_nth(5, -1)", .vec={(var v: ddlog_std::Vec<ddlog_std::s64>) = std_test::vec0();
                                                                                {(var val: signed<64>) = (- 64'sd1);
                                                                                 {(ddlog_std::swap_nth: function(mut ddlog_std::Vec<ddlog_std::s64>, bit<64>, mut signed<64>):bool)(v, 64'd5, val);
                                                                                  {(ddlog_std::push: function(mut ddlog_std::Vec<ddlog_std::s64>, signed<64>):())(v, val);
                                                                                   v}}}}}: std_test::IntVecTest)].
std_test::SetDifference[(std_test::SetDifference{.s1=s1, .s2=s2, .diff=(ddlog_std::set_difference: function(ddlog_std::Set<ddlog_std::u64>, ddlog_std::Set<ddlog_std::u64>):ddlog_std::Set<ddlog_std::u64>)(s1, s2)}: std_test::SetDifference)] :- std_test::SetPairs[(__std_test_setpairs0@ (std_test::SetPairs{.s1=(s1: ddlog_std::Set<ddlog_std::u64>), .s2=(s2: ddlog_std::Set<ddlog_std::u64>)}: std_test::SetPairs))], Inspect debug::debug_event((32'd8, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_setpairs0, (std_test::SetDifference{.s1=s1, .s2=s2, .diff=(ddlog_std::set_difference: function(ddlog_std::Set<ddlog_std::u64>, ddlog_std::Set<ddlog_std::u64>):ddlog_std::Set<ddlog_std::u64>)(s1, s2)}: std_test::SetDifference)).
std_test::SetDifference[(std_test::SetDifference{.s1=s2, .s2=s1, .diff=(ddlog_std::set_difference: function(ddlog_std::Set<ddlog_std::u64>, ddlog_std::Set<ddlog_std::u64>):ddlog_std::Set<ddlog_std::u64>)(s2, s1)}: std_test::SetDifference)] :- std_test::SetPairs[(__std_test_setpairs0@ (std_test::SetPairs{.s1=(s1: ddlog_std::Set<ddlog_std::u64>), .s2=(s2: ddlog_std::Set<ddlog_std::u64>)}: std_test::SetPairs))], Inspect debug::debug_event((32'd9, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_setpairs0, (std_test::SetDifference{.s1=s2, .s2=s1, .diff=(ddlog_std::set_difference: function(ddlog_std::Set<ddlog_std::u64>, ddlog_std::Set<ddlog_std::u64>):ddlog_std::Set<ddlog_std::u64>)(s2, s1)}: std_test::SetDifference)).
std_test::MapSizes[(std_test::MapSizes{.m=m, .size=(ddlog_std::size: function(ddlog_std::Map<ddlog_std::u64,string>):bit<64>)(m)}: std_test::MapSizes)] :- std_test::Maps[(__std_test_maps0@ (std_test::Maps{.m=(m: ddlog_std::Map<ddlog_std::u64,string>)}: std_test::Maps))], Inspect debug::debug_event((32'd10, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __std_test_maps0, (std_test::MapSizes{.m=m, .size=(ddlog_std::size: function(ddlog_std::Map<ddlog_std::u64,string>):bit<64>)(m)}: std_test::MapSizes)).
std_test::Pow[(std_test::Pow{.descr="pow32(2: u32, 32)", .val=("" ++ (ddlog_std::__builtin_2string: function(bit<32>):string)((ddlog_std::pow32: function(bit<32>, bit<32>):bit<32>)((32'd2: ddlog_std::u32), 32'd32)))}: std_test::Pow)].
std_test::Pow[(std_test::Pow{.descr="$pow32(2: u64, 32)", .val=("" ++ (ddlog_std::__builtin_2string: function(bit<64>):string)((ddlog_std::pow32: function(bit<64>, bit<32>):bit<64>)((64'd2: ddlog_std::u64), 32'd32)))}: std_test::Pow)].
std_test::Default[(std_test::Default{.descr="u32", .val=("" ++ (ddlog_std::__builtin_2string: function(bit<32>):string)(((ddlog_std::default: function():bit<32>)(): ddlog_std::u32)))}: std_test::Default)].
std_test::Default[(std_test::Default{.descr="DefaultEnum", .val=("" ++ (std_test::to_string: function(std_test::DefaultEnum):string)(((ddlog_std::default: function():std_test::DefaultEnum)(): std_test::DefaultEnum)))}: std_test::Default)].
std_test::MapDelete[(std_test::MapDelete{.descr="alphabet", .m=std_test::alphabet_map(), .s=(ddlog_std::None{}: ddlog_std::Option<string>)}: std_test::MapDelete)].
std_test::MapDelete[(std_test::MapDelete{.descr=((("" ++ d) ++ "\\") ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(((ddlog_std::size: function(ddlog_std::Map<ddlog_std::usize,string>):bit<64>)(m) - 64'd1))), .m=m2, .s=s}: std_test::MapDelete)] :- std_test::MapDelete[(__std_test_mapdelete0@ (std_test::MapDelete{.descr=(d: string), .m=(m: ddlog_std::Map<ddlog_std::usize,string>), .s=(_: ddlog_std::Option<string>)}: std_test::MapDelete))], ((ddlog_std::size: function(ddlog_std::Map<ddlog_std::usize,string>):bit<64>)(m) > 64'd0), ((var m2: ddlog_std::Map<ddlog_std::usize,string>), (var s: ddlog_std::Option<string>)) = {(var m2: ddlog_std::Map<ddlog_std::usize,string>) = m;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             {(var s: ddlog_std::Option<string>) = (ddlog_std::remove: function(mut ddlog_std::Map<ddlog_std::usize,string>, bit<64>):ddlog_std::Option<string>)(m2, ((ddlog_std::size: function(ddlog_std::Map<ddlog_std::usize,string>):bit<64>)(m) - 64'd1));
m2, s)}}, Inspect debug::debug_event((32'd16, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (d, m), (std_test::MapDelete{.descr=((("" ++ d) ++ "\\") ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(((ddlog_std::size: function(ddlog_std::Map<ddlog_std::usize,string>):bit<64>)(m) - 64'd1))), .m=m2, .s=s}: std_test::MapDelete)).
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::nil())", .result=uuid::to_hyphenated_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::nil())", .result=uuid::to_hyphenated_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::nil())", .result=uuid::to_simple_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::nil())", .result=uuid::to_simple_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::nil())", .result=uuid::to_urn_lower(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::nil())", .result=uuid::to_urn_upper(uuid::nil())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_lower(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_upper(uuid::from_u128(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_hyphenated_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_simple_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_lower(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid::from_u128_le('h0436430c_2b02_624c_2032_570501212b57))", .result=uuid::to_urn_upper(uuid::from_u128_le(128'd5598655898992676486791281108989324119))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(test_uuid_from_bytes())", .result=uuid::to_hyphenated_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(test_uuid_from_bytes())", .result=uuid::to_hyphenated_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(test_uuid_from_bytes())", .result=uuid::to_simple_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(test_uuid_from_bytes())", .result=uuid::to_simple_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(test_uuid_from_bytes())", .result=uuid::to_urn_lower(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(test_uuid_from_bytes())", .result=uuid::to_urn_upper(uuid_test::test_uuid_from_bytes())}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_hyphenated_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_hyphenated_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_hyphenated_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_simple_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_simple_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_simple_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_lower(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_urn_lower(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_urn_upper(uuid_parse_or_nil(\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"))", .result=uuid::to_urn_upper(uuid_test::uuid_parse_or_nil("936DA01F-9ABD-4D9D-80C7-02AF85C822A8"))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::as_u128(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=(ddlog_std::hex: function(bit<128>):string)(uuid::as_u128(uuid::from_u128(128'd5598655898992676486791281108989324119)))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::to_u128_le(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=(ddlog_std::hex: function(bit<128>):string)(uuid::to_u128_le(uuid::from_u128(128'd5598655898992676486791281108989324119)))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::from_u128('h0436430c_2b02_624c_2032_570501212b57))", .result=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(uuid::is_nil(uuid::from_u128(128'd5598655898992676486791281108989324119))))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::from_u128(0))", .result=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(uuid::is_nil(uuid::from_u128(128'd0))))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::is_nil(uuid::nil())", .result=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(uuid::is_nil(uuid::nil())))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespace=nsA And podSelector=\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), ddlog_std::string_to_bytes("namespace=nsA And podSelector=")))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespaceSelector=foo3 In [bar3] And podSelector=foo2 In [bar2]\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), ddlog_std::string_to_bytes("namespaceSelector=foo3 In [bar3] And podSelector=foo2 In [bar2]")))}: uuid_test::UUID)].
uuid_test::UUID[(uuid_test::UUID{.description="uuid::new_v5(\"5a5e7dd9-e3fb-49bb-b263-9bab25c95841\", \"namespace=nsA And podSelector=group In [appliedTo] And role In [db app]\")", .result=uuid::to_hyphenated_lower(uuid::new_v5(uuid_test::uuid_parse_or_nil("5a5e7dd9-e3fb-49bb-b263-9bab25c95841"), ddlog_std::string_to_bytes("namespace=nsA And podSelector=group In [appliedTo] And role In [db app]")))}: uuid_test::UUID)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_new(192, 168, 0, 1)", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_u32('h0a0b0c0d)", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)(net::ipv4::ipv4_from_u32(32'd168496141)))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_str(10.10.10.101)", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv4::Ipv4Addr,string>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv4::ipv4_from_str("10.10.10.101"), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_str(10.10.10.10.1)", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv4::Ipv4Addr,string>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv4::ipv4_from_str("10.10.10.10.1"), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_from_octet_vec(ipv4_octet_vec(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv4::ipv4_from_octet_vec(net::ipv4::ipv4_octet_vec(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_LOCALHOST()", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)(net::ipv4::iPV4_LOCALHOST()))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_UNSPECIFIED()", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)(net::ipv4::iPV4_UNSPECIFIED()))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV4_BROADCAST()", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)(net::ipv4::iPV4_BROADCAST()))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_octets(ipv4_new(192,168,0,1))", .value={((var a: bit<8>), (var b: bit<8>), (var c: bit<8>), (var d: bit<8>)) = net::ipv4::ipv4_octets(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1));
                                                                                                    (((((((("(" ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(a)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(b)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(c)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(d)) ++ ")")}}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_unspecified(iPV4_UNSPECIFIED())", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_unspecified(net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_unspecified(ipv4_new(10,0,0,0))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_unspecified(net::ipv4::ipv4_new(8'd10, 8'd0, 8'd0, 8'd0))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_loopback(ipv4_new(127,0,0,5))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_loopback(net::ipv4::ipv4_new(8'd127, 8'd0, 8'd0, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_loopback(ipv4_new(128,0,0,5))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_loopback(net::ipv4::ipv4_new(8'd128, 8'd0, 8'd0, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(127,0,0,5))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd127, 8'd0, 8'd0, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(193,5,5,5))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd193, 8'd5, 8'd5, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(10,10,10,101))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd10, 8'd10, 8'd10, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(172,16,1,2))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd172, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_private(ipv4_new(192,168,10,12))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_private(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_link_local(ipv4_new(192,168,10,12))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_link_local(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_link_local(ipv4_new(169,254,1,1))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_link_local(net::ipv4::ipv4_new(8'd169, 8'd254, 8'd1, 8'd1))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_multicast(ipv4_new(173,10,10,12))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_multicast(net::ipv4::ipv4_new(8'd173, 8'd10, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_multicast(ipv4_new(230,254,1,1))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_multicast(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(iPV4_BROADCAST())", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_broadcast(net::ipv4::iPV4_BROADCAST())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(ipv4_new(230,254,1,1))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_broadcast(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_broadcast(ipv4_new(255,255,255,255))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_broadcast(net::ipv4::ipv4_new(8'd255, 8'd255, 8'd255, 8'd255))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(192,0,2,10))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(198,51,100,5))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(203,0,113,101))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(175,16,1,2))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_is_documentation(ipv4_new(192,168,10,12))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv4::ipv4_is_documentation(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(192,0,2,10))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(198,51,100,5))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(203,0,113,101))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(175,16,1,2))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_compatible(ipv4_new(192,168,10,12))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(192,0,2,10))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(198,51,100,5))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(203,0,113,101))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(175,16,1,2))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_ipv6_mapped(ipv4_new(192,168,10,12))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(192,0,2,10))", .value=("" ++ (ddlog_std::hex: function(bit<32>):string)(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(198,51,100,5))", .value=("" ++ (ddlog_std::hex: function(bit<32>):string)(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(203,0,113,101))", .value=("" ++ (ddlog_std::hex: function(bit<32>):string)(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(175,16,1,2))", .value=("" ++ (ddlog_std::hex: function(bit<32>):string)(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv4_to_u32(ipv4_new(192,168,10,12))", .value=("" ++ (ddlog_std::hex: function(bit<32>):string)(net::ipv4::ipv4_to_u32(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV6_LOCALHOST()", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv6::iPV6_LOCALHOST()))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="iPV6_UNSPECIFIED()", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv6::iPV6_UNSPECIFIED()))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv6::Ipv6Addr>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_segment_vec(net::ipv6::ipv6_segment_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff, 'h10)))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv6::Ipv6Addr>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_segment_vec((ddlog_std::vec_push_imm: function(ddlog_std::Vec<ddlog_std::u16>, bit<16>):ddlog_std::Vec<bit<16>>)(net::ipv6::ipv6_segment_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), 16'd16)), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octets(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'hff, 'hff, 'hc0, 'h0a, 'h2, 'hff)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv6::ipv6_from_octets(8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd0, 8'd255, 8'd255, 8'd192, 8'd10, 8'd2, 8'd255)))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octet_vec(ipv6_octet_vec(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv6::Ipv6Addr>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_octet_vec(net::ipv6::ipv6_octet_vec(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_u128(128'h102030405060708090A0B0C0D0E0F00)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)(net::ipv6::ipv6_from_u128(128'd1339673755198158349044581307228491520)))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(102:304:506:708:90a:b0c:d0e:f00)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("102:304:506:708:90a:b0c:d0e:f00"), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::ffff:192.10.2.255)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::175.16.1.2)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::175.16.1.2"), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(ffff:192.10.2.255)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_str(::)", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::"), net::ipv6::iPV6_LOCALHOST())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_u128(ipv6_from_str(::ffff:192.10.2.255))", .value=("" ++ (ddlog_std::hex: function(bit<128>):string)(net::ipv6::ipv6_to_u128((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_segments(ipv6_from_str(::ffff:192.10.2.255))", .value={((var a: bit<16>), (var b: bit<16>), (var c: bit<16>), (var d: bit<16>), (var e: bit<16>), (var f: bit<16>), (var g: bit<16>), (var h: bit<16>)) = net::ipv6::ipv6_segments((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()));
                                                                                                                   (((((((((((((((("(" ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(a)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(b)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(c)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(d)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(e)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(f)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(g)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<16>):string)(h)) ++ ")")}}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_octets(ipv6_from_str(::ffff:192.10.2.255))", .value={((var a: bit<8>), (var b: bit<8>), (var c: bit<8>), (var d: bit<8>), (var e: bit<8>), (var f: bit<8>), (var g: bit<8>), (var h: bit<8>), (var i: bit<8>), (var j: bit<8>), (var k: bit<8>), (var l: bit<8>), (var m: bit<8>), (var n: bit<8>), (var o: bit<8>), (var p: bit<8>)) = net::ipv6::ipv6_octets((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()));
                                                                                                                 (((((((((((((((((((((((((((((((("(" ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(a)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(b)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(c)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(d)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(e)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(f)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(g)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(h)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(i)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(j)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(k)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(l)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(m)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(n)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(o)) ++ ",") ++ (ddlog_std::__builtin_2string: function(bit<8>):string)(p)) ++ ")")}}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_segment_vec(ipv6_segment_vec(ipv6_from_str(::ffff:192.10.2.255)))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv6::Ipv6Addr>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_segment_vec(net::ipv6::ipv6_segment_vec((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()))), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_from_octet_vec(ipv6_octet_vec(ipv6_from_str(::ffff:192.10.2.255)))", .value=("" ++ (net::ipv6::to_string: function(net::ipv6::Ipv6Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv6::Ipv6Addr>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_octet_vec(net::ipv6::ipv6_octet_vec((ddlog_std::unwrap_or: function(ddlog_std::Result<net::ipv6::Ipv6Addr,string>, net::ipv6::Ipv6Addr):net::ipv6::Ipv6Addr)(net::ipv6::ipv6_from_str("::ffff:192.10.2.255"), net::ipv6::iPV6_UNSPECIFIED()))), net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_unspecified(iPV6_UNSPECIFIED())", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_unspecified(net::ipv6::iPV6_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_unspecified(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_unspecified(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_loopback(iPV6_LOCALHOST())", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_loopback(net::ipv6::iPV6_LOCALHOST())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_loopback(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_loopback(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_multicast(ipv6_new('hff01, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_multicast(net::ipv6::ipv6_new(16'd65281, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_is_multicast(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipv6::ipv6_is_multicast(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(192,0,2,10)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(198,51,100,5)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(203,0,113,101)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(175,16,1,2)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_compatible(ipv4_new(192,168,10,12)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_compatible(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(192,0,2,10)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd0, 8'd2, 8'd10))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(198,51,100,5)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd198, 8'd51, 8'd100, 8'd5))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(203,0,113,101)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd203, 8'd0, 8'd113, 8'd101))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(175,16,1,2)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd175, 8'd16, 8'd1, 8'd2))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv4_to_ipv6_mapped(ipv4_new(192,168,10,12)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv4::ipv4_to_ipv6_mapped(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd10, 8'd12))), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipv6_to_ipv4(ipv6_new('h0a0b, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (net::ipv4::to_string: function(net::ipv4::Ipv4Addr):string)((ddlog_std::unwrap_or: function(ddlog_std::Option<net::ipv4::Ipv4Addr>, net::ipv4::Ipv4Addr):net::ipv4::Ipv4Addr)(net::ipv6::ipv6_to_ipv4(net::ipv6::ipv6_new(16'd2571, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)), net::ipv4::iPV4_UNSPECIFIED())))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1))", .value=("" ++ (net::ipaddr::to_string: function(net::ipaddr::IpAddr):string)(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff))", .value=("" ++ (net::ipaddr::to_string: function(net::ipaddr::IpAddr):string)(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv6(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv6(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv6(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv6(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv4addr(iPV4_UNSPECIFIED()))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::iPV4_UNSPECIFIED()))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_unspecified(ipaddr_from_ipv6addr(iPV6_UNSPECIFIED()))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_unspecified(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::iPV6_UNSPECIFIED()))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv4addr(iPV4_LOCALHOST()))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::iPV4_LOCALHOST()))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_loopback(ipaddr_from_ipv6addr(iPV6_LOCALHOST()))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_loopback(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::iPV6_LOCALHOST()))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv4addr(ipv4_new(230, 254, 1, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd230, 8'd254, 8'd1, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_multicast(ipaddr_from_ipv6addr(ipv6_new('hff01, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_multicast(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd65281, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv4addr(ipv4_new(192, 168, 0, 1)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv4addr(net::ipv4::ipv4_new(8'd192, 8'd168, 8'd0, 8'd1)))))}: net_test::NetChecks)].
net_test::NetChecks[(net_test::NetChecks{.description="ipaddr_is_ipv4(ipaddr_from_ipv6addr(ipv6_new(0, 0, 0, 0, 0, 'hffff, 'hc00a, 'h2ff)))", .value=("" ++ (ddlog_std::__builtin_2string: function(bool):string)(net::ipaddr::ipaddr_is_ipv4(net::ipaddr::ipaddr_from_ipv6addr(net::ipv6::ipv6_new(16'd0, 16'd0, 16'd0, 16'd0, 16'd0, 16'd65535, 16'd49162, 16'd767)))))}: net_test::NetChecks)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::BoolStruct,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::BoolStruct,string>)(json_test::boolStruct1()): ddlog_std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::BoolStruct,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::BoolStruct,string>)(json_test::boolStruct2()): ddlog_std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::boolStruct3(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::BoolStruct,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::BoolStruct,string>)(json_test::boolStruct3()): ddlog_std::Result<json_test::BoolStruct,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::nestedStruct1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Top,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Top,string>)(json_test::nestedStruct1()): ddlog_std::Result<json_test::Top,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::flattenedStruct1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::TopFlat,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::TopFlat,string>)(json_test::flattenedStruct1()): ddlog_std::Result<json_test::TopFlat,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::array1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Array,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Array,string>)(json_test::array1()): ddlog_std::Result<json_test::Array,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::map1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::BoolMap,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::BoolMap,string>)(json_test::map1()): ddlog_std::Result<json_test::BoolMap,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::enum1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Enum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Enum,string>)(json_test::enum1()): ddlog_std::Result<json_test::Enum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::enum2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Enum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Enum,string>)(json_test::enum2()): ddlog_std::Result<json_test::Enum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::TaggedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::TaggedEnum,string>)(json_test::tenum1()): ddlog_std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::TaggedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::TaggedEnum,string>)(json_test::tenum2()): ddlog_std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::tenum3(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::TaggedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::TaggedEnum,string>)(json_test::tenum3()): ddlog_std::Result<json_test::TaggedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json::JsonValue,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::scalar1()): ddlog_std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json::JsonValue,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::scalar2()): ddlog_std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar3(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json::JsonValue,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::scalar3()): ddlog_std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar4(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json::JsonValue,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::scalar4()): ddlog_std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::scalar5(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json::JsonValue,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json::JsonValue,string>)(json_test::scalar5()): ddlog_std::Result<json::JsonValue,string>))}: json_test::JsonTest)].
json_test::ODeserialized[x] :- json_test::Deserialized[(__json_test_deserialized0@ (x: json_test::TaggedEnum))], Inspect debug::debug_event((32'd173, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __json_test_deserialized0, x).
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Optional,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Optional,string>)(json_test::optional1()): ddlog_std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Optional,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Optional,string>)(json_test::optional2()): ddlog_std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional3(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Optional,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Optional,string>)(json_test::optional3()): ddlog_std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::optional4(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::Optional,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::Optional,string>)(json_test::optional4()): ddlog_std::Result<json_test::Optional,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::struct_with_map1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::StructWithMap,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::StructWithMap,string>)(json_test::struct_with_map1()): ddlog_std::Result<json_test::StructWithMap,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::u64FromString1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::U64FromString,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::U64FromString,string>)(json_test::u64FromString1()): ddlog_std::Result<json_test::U64FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::u64FromString2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::U64FromString,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::U64FromString,string>)(json_test::u64FromString2()): ddlog_std::Result<json_test::U64FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::s32FromString1(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::S32FromString,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::S32FromString,string>)(json_test::s32FromString1()): ddlog_std::Result<json_test::S32FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=json_test::s32FromString2(), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::S32FromString,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::S32FromString,string>)(json_test::s32FromString2()): ddlog_std::Result<json_test::S32FromString,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum1()), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::WrappedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum1()): ddlog_std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum2()), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::WrappedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum2()): ddlog_std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description=("wrapped " ++ json_test::wenum3()), .value=(json_test::to_json_string_or_default: function(ddlog_std::Result<json_test::WrappedEnum,string>):string)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum3()): ddlog_std::Result<json_test::WrappedEnum,string>))}: json_test::JsonTest)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum1()), .value=(json_test::to_json_string_or_default: function(json::JsonValue):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::to_json_value: function(ddlog_std::Result<json_test::WrappedEnum,string>):ddlog_std::Result<json::JsonValue,string>)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum1()): ddlog_std::Result<json_test::WrappedEnum,string>))))}: json_test::JsonTestValue)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum2()), .value=(json_test::to_json_string_or_default: function(json::JsonValue):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::to_json_value: function(ddlog_std::Result<json_test::WrappedEnum,string>):ddlog_std::Result<json::JsonValue,string>)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum2()): ddlog_std::Result<json_test::WrappedEnum,string>))))}: json_test::JsonTestValue)].
json_test::JsonTestValue[(json_test::JsonTestValue{.description=("wrapped " ++ json_test::wenum3()), .value=(json_test::to_json_string_or_default: function(json::JsonValue):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Result<json::JsonValue,string>):json::JsonValue)((json::to_json_value: function(ddlog_std::Result<json_test::WrappedEnum,string>):ddlog_std::Result<json::JsonValue,string>)(((json::from_json_string: function(string):ddlog_std::Result<json_test::WrappedEnum,string>)(json_test::wenum3()): ddlog_std::Result<json_test::WrappedEnum,string>))))}: json_test::JsonTestValue)].
json_test::JsonTest[(json_test::JsonTest{.description="set_by_ptr test", .value=(json_test::to_json_string_or_default: function(json::JsonValue):string)(json_test::mutilate_jval())}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr(nested/z/10/b)", .value=(ddlog_std::unwrap_or_default: function(ddlog_std::Result<string,string>):string)((json::to_json_string: function(ddlog_std::Option<json::JsonValue>):ddlog_std::Result<string,string>)(json::get_by_ptr(json_test::mutilate_jval(), {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd4);
                                                                                                                                                                                                                                                                                                                                {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                 {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                  {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                   {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("b")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                    __vec}}}}})))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr(nested/z/10/c)", .value=(ddlog_std::unwrap_or_default: function(ddlog_std::Result<string,string>):string)((json::to_json_string: function(ddlog_std::Option<json::JsonValue>):ddlog_std::Result<string,string>)(json::get_by_ptr(json_test::mutilate_jval(), {(var __vec: ddlog_std::Vec<json::JsonPtrItem>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<json::JsonPtrItem>)(64'd4);
                                                                                                                                                                                                                                                                                                                                {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("nested")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                 {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("z")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                  {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JIdxPtr{.idx=64'd10}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                   {(ddlog_std::push: function(mut ddlog_std::Vec<json::JsonPtrItem>, json::JsonPtrItem):())(__vec, (json::JKeyPtr{.key=(internment::intern: function(string):internment::Intern<string>)("c")}: json::JsonPtrItem));
                                                                                                                                                                                                                                                                                                                                    __vec}}}}})))}: json_test::JsonTest)].
json_test::JsonTest[(json_test::JsonTest{.description="get_by_ptr([])", .value=(ddlog_std::unwrap_or_default: function(ddlog_std::Result<string,string>):string)((json::to_json_string: function(ddlog_std::Option<json::JsonValue>):ddlog_std::Result<string,string>)(json::get_by_ptr(json_test::mutilate_jval(), (ddlog_std::vec_empty: function():ddlog_std::Vec<json::JsonPtrItem>)())))}: json_test::JsonTest)].
fp_test::F[(fp_test::F{.s="nan_f()", .d=fp::nan_f()}: fp_test::F)].
fp_test::F[(fp_test::F{.s="floor_f(32'f0.5)", .d=fp::floor_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="ceil_f(32'f0.5)", .d=fp::ceil_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="round_f(32'f0.5)", .d=fp::round_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="trunc_f(32'f0.5)", .d=fp::trunc_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="fract_f(32'f0.5)", .d=fp::fract_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="abs_f(32'f0.5)", .d=fp::abs_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="signum_f(32'f0.5)", .d=fp::signum_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sqrt_f(32'f0.5)", .d=fp::sqrt_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="exp_f(32'f0.5)", .d=fp::exp_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="exp2_f(32'f0.5)", .d=fp::exp2_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="ln_f(32'f0.5)", .d=fp::ln_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log2_f(32'f0.5)", .d=fp::log2_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log10_f(32'f0.5)", .d=fp::log10_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cbrt_f(32'f0.5)", .d=fp::cbrt_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sin_f(32'f0.5)", .d=fp::sin_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cos_f(32'f0.5)", .d=fp::cos_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="tan_f(32'f0.5)", .d=fp::tan_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="asin_f(32'f0.5)", .d=fp::asin_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="acos_f(32'f0.5)", .d=fp::acos_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atan_f(32'f0.5)", .d=fp::atan_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="sinh_f(32'f0.5)", .d=fp::sinh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="cosh_f(32'f0.5)", .d=fp::cosh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="tanh_f(32'f0.5)", .d=fp::tanh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="asinh_f(32'f0.5)", .d=fp::asinh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="acosh_f(32'f0.5)", .d=fp::acosh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atanh_f(32'f0.5)", .d=fp::atanh_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="recip_f(32'f0.5)", .d=fp::recip_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="to_degrees_f(32'f0.5)", .d=fp::to_degrees_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="to_radians_f(32'f0.5)", .d=fp::to_radians_f(32'f0.5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="atan2_f(32'f0.5, 32'f2.0)", .d=fp::atan2_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::BB[(fp_test::BB{.s="is_nan_f(32'f0.5)", .b=fp::is_nan_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_f(32'f0.5)", .b=fp::is_infinite_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_f(32'f0.5)", .b=fp::is_finite_f(32'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_nan_f(nan_f())", .b=fp::is_nan_f(fp::nan_f())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_f(nan_f())", .b=fp::is_infinite_f(fp::nan_f())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_f(nan_f())", .b=fp::is_finite_f(fp::nan_f())}: fp_test::BB)].
fp_test::F[(fp_test::F{.s="mul_add_f(32'f0.5, 32'f2.2, 32'f2.3)", .d=fp::mul_add_f(32'f0.5, 32'f2.2, 32'f2.3)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="powi_f(32'f0.5, 32'sd5)", .d=fp::powi_f(32'f0.5, 32'sd5)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="powf_f(32'f0.5, 32f'5.0)", .d=fp::powf_f(32'f0.5, 32'f5.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log_f(32'f0.5, 32f'2.0)", .d=fp::log_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="log_f(5E-1, 2.0)", .d=fp::log_f(32'f0.5, 32'f2.0)}: fp_test::F)].
fp_test::F[(fp_test::F{.s="result_unwrap_or_default(parse_f(\"0.02\"))", .d=(ddlog_std::result_unwrap_or_default: function(ddlog_std::Result<float,string>):float)(fp::parse_f("0.02"))}: fp_test::F)].
fp_test::F[(fp_test::F{.s="result_unwrap_or_default(parse_f(\"blah\"))", .d=(ddlog_std::result_unwrap_or_default: function(ddlog_std::Result<float,string>):float)(fp::parse_f("blah"))}: fp_test::F)].
fp_test::D[(fp_test::D{.s="nan_d()", .d=fp::nan_d()}: fp_test::D)].
fp_test::D[(fp_test::D{.s="floor_d(64'f0.5)", .d=fp::floor_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="floor_d(0.6)", .d=fp::floor_d(64'f0.6)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="ceil_d(64'f0.5)", .d=fp::ceil_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="round_d(64'f0.5)", .d=fp::round_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="trunc_d(64'f0.5)", .d=fp::trunc_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="fract_d(64'f0.5)", .d=fp::fract_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="abs_d(64'f0.5)", .d=fp::abs_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="signum_d(64'f0.5)", .d=fp::signum_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sqrt_d(64'f0.5)", .d=fp::sqrt_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="exp_d(64'f0.5)", .d=fp::exp_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="exp2_d(64'f0.5)", .d=fp::exp2_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="ln_d(64'f0.5)", .d=fp::ln_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log2_d(64'f0.5)", .d=fp::log2_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log10_d(64'f0.5)", .d=fp::log10_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cbrt_d(64'f0.5)", .d=fp::cbrt_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sin_d(64'f0.5)", .d=fp::sin_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cos_d(64'f0.5)", .d=fp::cos_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="tan_d(64'f0.5)", .d=fp::tan_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="asin_d(64'f0.5)", .d=fp::asin_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="acos_d(64'f0.5)", .d=fp::acos_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atan_d(64'f0.5)", .d=fp::atan_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="sinh_d(64'f0.5)", .d=fp::sinh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cosh_d(64'f0.5)", .d=fp::cosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="cosh_d(5e-1)", .d=fp::cosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="tanh_d(64'f0.5)", .d=fp::tanh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="asinh_d(64'f0.5)", .d=fp::asinh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="acosh_d(64'f0.5)", .d=fp::acosh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atanh_d(64'f0.5)", .d=fp::atanh_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="recip_d(64'f0.5)", .d=fp::recip_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="to_degrees_d(64'f0.5)", .d=fp::to_degrees_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="to_radians_d(64'f0.5)", .d=fp::to_radians_d(64'f0.5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="atan2_d(64'f0.5, 64'f2.0)", .d=fp::atan2_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::BB[(fp_test::BB{.s="is_nan_d(64'f0.5)", .b=fp::is_nan_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_d(64'f0.5)", .b=fp::is_infinite_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_d(64'f0.5)", .b=fp::is_finite_d(64'f0.5)}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_nan_d(nan_d())", .b=fp::is_nan_d(fp::nan_d())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_infinite_d(nan_d())", .b=fp::is_infinite_d(fp::nan_d())}: fp_test::BB)].
fp_test::BB[(fp_test::BB{.s="is_finite_d(nan_d())", .b=fp::is_finite_d(fp::nan_d())}: fp_test::BB)].
fp_test::D[(fp_test::D{.s="mul_add_d(64'f0.5, 64'f2.2, 64'f2.3)", .d=fp::mul_add_d(64'f0.5, 64'f2.2, 64'f2.3)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="powi_d(64'f0.5, 32'sd5)", .d=fp::powi_d(64'f0.5, 32'sd5)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="powf_d(64'f0.5, 32f'5.0)", .d=fp::powf_d(64'f0.5, 64'f5.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log_d(64'f0.5, 32f'2.0)", .d=fp::log_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="log_d(0.5, 2.0)", .d=fp::log_d(64'f0.5, 64'f2.0)}: fp_test::D)].
fp_test::D[(fp_test::D{.s="result_unwrap_or_default(parse_d(\"0.02\"))", .d=(ddlog_std::result_unwrap_or_default: function(ddlog_std::Result<double,string>):double)(fp::parse_d("0.02"))}: fp_test::D)].
fp_test::D[(fp_test::D{.s="result_unwrap_or_default(parse_d(\"blah\"))", .d=(ddlog_std::result_unwrap_or_default: function(ddlog_std::Result<double,string>):double)(fp::parse_d("blah"))}: fp_test::D)].
fp_test::OutFloatsFromRecord[x] :- fp_test::FloatsFromRecord[(__fp_test_floatsfromrecord0@ (x: fp_test::FloatsFromRecord))], Inspect debug::debug_event((32'd283, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __fp_test_floatsfromrecord0, x).
fp_test::OutDoublesFromRecord[x] :- fp_test::DoublesFromRecord[(__fp_test_doublesfromrecord0@ (x: fp_test::DoublesFromRecord))], Inspect debug::debug_event((32'd284, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __fp_test_doublesfromrecord0, x).
regex_test::RegexTestInput[(regex_test::RegexTestInput{.re="\\d+", .text="a111b222c"}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.re="\\b\\w{13}\\b", .text="I categorically deny having triskaidekaphobia."}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.re="'([^']+)'\\s+\\((\\d{4})\\)", .text="Not my favorite movie: 'Citizen Kane' (1941)."}: regex_test::RegexTestInput)].
regex_test::RegexTestInput[(regex_test::RegexTestInput{.re="[", .text="foo"}: regex_test::RegexTestInput)].
regex_test::RegexTestOutput[(regex_test::RegexTestOutput{.re=re, .text=text, .match_found=regex::regex_match(regex::regex(re), text), .match_found_checked=regex::regex_match((ddlog_std::unwrap_or: function(ddlog_std::Result<regex::Regex,string>, regex::Regex):regex::Regex)(regex::regex_checked(re), regex::regex("")), text), .first_match=regex::regex_first_match(regex::regex(re), text), .all_matches=regex::regex_all_matches(regex::regex(re), text)}: regex_test::RegexTestOutput)] :- regex_test::RegexTestInput[(__regex_test_regextestinput0@ (regex_test::RegexTestInput{.re=(re: string), .text=(text: string)}: regex_test::RegexTestInput))], Inspect debug::debug_event((32'd289, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __regex_test_regextestinput0, (regex_test::RegexTestOutput{.re=re, .text=text, .match_found=regex::regex_match(regex::regex(re), text), .match_found_checked=regex::regex_match((ddlog_std::unwrap_or: function(ddlog_std::Result<regex::Regex,string>, regex::Regex):regex::Regex)(regex::regex_checked(re), regex::regex("")), text), .first_match=regex::regex_first_match(regex::regex(re), text), .all_matches=regex::regex_all_matches(regex::regex(re), text)}: regex_test::RegexTestOutput)).
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)("static foo")}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)("ifoo")}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)("ibar")}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)(("ifoo" ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(64'd25)))}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)((("ifoo" ++ (ddlog_std::__builtin_2string: function(bit<64>):string)(64'd25)) ++ "!"))}: internment_test::StaticInternedString)].
internment_test::StaticInternedString[(internment_test::StaticInternedString{.ix=(internment::intern: function(string):internment::Intern<string>)(("ibar" ++ (ddlog_std::__builtin_2string: function(bit<64>):string)((64'd2 + 64'd2))))}: internment_test::StaticInternedString)].
internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)] :- internment_test::IInternedString[(__internment_test_iinternedstring0@ (internment_test::IInternedString{.ix=(ix: internment::Intern<string>)}: internment_test::IInternedString))], Inspect debug::debug_event((32'd296, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_iinternedstring0, (internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)).
internment_test::AllInternedString[(internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)] :- internment_test::StaticInternedString[(__internment_test_staticinternedstring0@ (internment_test::StaticInternedString{.ix=(ix: internment::Intern<string>)}: internment_test::StaticInternedString))], Inspect debug::debug_event((32'd297, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_staticinternedstring0, (internment_test::AllInternedString{.ix=ix}: internment_test::AllInternedString)).
internment_test::OInternedString[(internment_test::OInternedString{.x=(internment::ival: function(internment::Intern<string>):string)(s), .ix=s}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event((32'd298, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_allinternedstring0, (internment_test::OInternedString{.x=(internment::ival: function(internment::Intern<string>):string)(s), .ix=s}: internment_test::OInternedString)).
internment_test::OInternedString[(internment_test::OInternedString{.x=(((internment::ival: function(internment::Intern<string>):string)(s1) ++ " ") ++ (internment::ival: function(internment::Intern<string>):string)(s2)), .ix=(internment::intern: function(string):internment::Intern<string>)((((internment::ival: function(internment::Intern<string>):string)(s1) ++ " ") ++ (internment::ival: function(internment::Intern<string>):string)(s2)))}: internment_test::OInternedString)] :- internment_test::AllInternedString[(__internment_test_allinternedstring0@ (internment_test::AllInternedString{.ix=(s1: internment::Intern<string>)}: internment_test::AllInternedString))], internment_test::AllInternedString[(__internment_test_allinternedstring1@ (internment_test::AllInternedString{.ix=(s2: internment::Intern<string>)}: internment_test::AllInternedString))], Inspect debug::debug_event_join((32'd299, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __internment_test_allinternedstring0, __internment_test_allinternedstring1, (internment_test::OInternedString{.x=(((internment::ival: function(internment::Intern<string>):string)(s1) ++ " ") ++ (internment::ival: function(internment::Intern<string>):string)(s2)), .ix=(internment::intern: function(string):internment::Intern<string>)((((internment::ival: function(internment::Intern<string>):string)(s1) ++ " ") ++ (internment::ival: function(internment::Intern<string>):string)(s2)))}: internment_test::OInternedString)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=("x=" ++ (ddlog_std::__builtin_2string: function(bigint):string)(i.x))}: internment_test::Projections)] :- internment_test::IStruct[(__internment_test_istruct0@ ((&(i: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd300, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __internment_test_istruct0, (internment_test::Projections{.inp=internment_test::istruct2struct(i), .p=("x=" ++ (ddlog_std::__builtin_2string: function(bigint):string)(i.x))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("t.0=" ++ (ddlog_std::__builtin_2string: function(signed<32>):string)(i.t.0))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(ddlog_std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd301, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("t.0=" ++ (ddlog_std::__builtin_2string: function(signed<32>):string)(i.t.0))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("t.1=" ++ (ddlog_std::__builtin_2string: function(double):string)(i.t.1))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(_: internment::Intern<internment_test::IUnion>), .t=((&((_: signed<32>), (d: double))): internment::Intern<(ddlog_std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd302, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("t.1=" ++ (ddlog_std::__builtin_2string: function(double):string)(i.t.1))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f1=" ++ (ddlog_std::__builtin_2string: function(bool):string)(f1))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(internment_test::Tag1{.f1=(f1: bool)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(ddlog_std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd303, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f1=" ++ (ddlog_std::__builtin_2string: function(bool):string)(f1))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f2=" ++ (ddlog_std::__builtin_2string: function(bit<32>):string)(f2))}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=((&(t@ (internment_test::Tag2{.f2=(f2: bit<32>), .f3=(_: string)}: internment_test::IUnion))): internment::Intern<internment_test::IUnion>), .t=(_: internment::Intern<(ddlog_std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd304, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f2=" ++ (ddlog_std::__builtin_2string: function(bit<32>):string)(f2))}: internment_test::Projections)).
internment_test::Projections[(internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f3=" ++ f3)}: internment_test::Projections)] :- internment_test::IStruct[(i@ ((&(internment_test::IStruct{.u=(t@ ((&(internment_test::Tag2{.f2=(_: bit<32>), .f3=(f3: string)}: internment_test::IUnion)): internment::Intern<internment_test::IUnion>)), .t=(_: internment::Intern<(ddlog_std::s32, double)>), .x=(_: bigint)}: internment_test::IStruct)): internment::Intern<internment_test::IStruct>))], Inspect debug::debug_event((32'd305, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", i, (internment_test::Projections{.inp=internment_test::istruct2struct((internment::ival: function(internment::Intern<internment_test::IStruct>):internment_test::IStruct)(i)), .p=("f3=" ++ f3)}: internment_test::Projections)).
tinyset_test::Sets[(tinyset_test::Sets{.setid=setid, .set=set}: tinyset_test::Sets)] :- tinyset_test::SetElement[(__tinyset_test_setelement0@ (tinyset_test::SetElement{.setid=(setid: string), .element=(v: bit<32>)}: tinyset_test::SetElement))], var __inputs_set = Aggregate(setid, tinyset::__debug_306_1_group_to_set((__tinyset_test_setelement0, v))), Inspect debug::debug_event((32'd306, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_set.0, (__inputs_set, setid)), (var set: tinyset::Set64<bit<32>>) = __inputs_set.1, Inspect debug::debug_event((32'd306, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_set, setid), (tinyset_test::Sets{.setid=setid, .set=set}: tinyset_test::Sets)).
tinyset_test::Intersects[(tinyset_test::Intersects{.setid1=setid1, .setid2=setid2, .set=set}: tinyset_test::Intersects)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd307, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (setid1, set1, setid2, set2)), (var set: tinyset::Set64<ddlog_std::u32>) = {(var set: tinyset::Set64<ddlog_std::u32>) = (tinyset::empty: function():tinyset::Set64<ddlog_std::u32>)();
{for (x in set1) {
if (tinyset::contains: function(tinyset::Set64<ddlog_std::u32>, bit<32>):bool)(set2, x) {
tinyset::insert: function(mut tinyset::Set64<ddlog_std::u32>, bit<32>):())(set, x)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         } else {

}
};
set}}, Inspect debug::debug_event((32'd307, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (setid1, set1, setid2, set2), (tinyset_test::Intersects{.setid1=setid1, .setid2=setid2, .set=set}: tinyset_test::Intersects)).
tinyset_test::Intersects2[(tinyset_test::Intersects2{.setid1=setid1, .setid2=setid2, .set=(tinyset::intersection: function(tinyset::Set64<ddlog_std::u32>, tinyset::Set64<ddlog_std::u32>):tinyset::Set64<ddlog_std::u32>)(set1, set2)}: tinyset_test::Intersects2)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd308, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (tinyset_test::Intersects2{.setid1=setid1, .setid2=setid2, .set=(tinyset::intersection: function(tinyset::Set64<ddlog_std::u32>, tinyset::Set64<ddlog_std::u32>):tinyset::Set64<ddlog_std::u32>)(set1, set2)}: tinyset_test::Intersects2)).
tinyset_test::Diffs[(tinyset_test::Diffs{.setid1=setid1, .setid2=setid2, .set=(tinyset::difference: function(tinyset::Set64<ddlog_std::u32>, tinyset::Set64<ddlog_std::u32>):tinyset::Set64<ddlog_std::u32>)(set1, set2)}: tinyset_test::Diffs)] :- tinyset_test::Sets[(__tinyset_test_sets0@ (tinyset_test::Sets{.setid=(setid1: string), .set=(set1: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], tinyset_test::Sets[(__tinyset_test_sets1@ (tinyset_test::Sets{.setid=(setid2: string), .set=(set2: tinyset::Set64<ddlog_std::u32>)}: tinyset_test::Sets))], Inspect debug::debug_event_join((32'd309, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __tinyset_test_sets0, __tinyset_test_sets1, (tinyset_test::Diffs{.setid1=setid1, .setid2=setid2, .set=(tinyset::difference: function(tinyset::Set64<ddlog_std::u32>, tinyset::Set64<ddlog_std::u32>):tinyset::Set64<ddlog_std::u32>)(set1, set2)}: tinyset_test::Diffs)).
url_test::URLTest[(url_test::URLTest{.description="https://example.net", .val=url::to_string((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.net")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.net/a/b.html\".join(\"c.png\")", .val=url::to_string((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::join((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.net/a/b.html")), "c.png")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"file:///tmp/foo\".scheme()", .val=url::scheme((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("file:///tmp/foo")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".has_authority()", .val=(ddlog_std::to_string: function(bool):string)(url::has_authority((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".has_authority()", .val=(ddlog_std::to_string: function(bool):string)(url::has_authority((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("unix:/run/foo.socket"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".has_authority()", .val=(ddlog_std::to_string: function(bool):string)(url::has_authority((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("data:text/plain,Stuff"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".cannot_be_a_base()", .val=(ddlog_std::to_string: function(bool):string)(url::cannot_be_a_base((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".cannot_be_a_base()", .val=(ddlog_std::to_string: function(bool):string)(url::cannot_be_a_base((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("unix:/run/foo.socket"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".cannot_be_a_base()", .val=(ddlog_std::to_string: function(bool):string)(url::cannot_be_a_base((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("data:text/plain,Stuff"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".username()", .val=url::username((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://:secret123@example.com\".username()", .val=url::username((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://:secret123@example.com")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".username()", .val=url::username((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms:secret123@example.com\".password()", .val=(ddlog_std::unwrap_or_default: function(ddlog_std::Option<string>):string)(url::password((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms:secret123@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://:secret123@example.com\".password()", .val=(ddlog_std::unwrap_or_default: function(ddlog_std::Option<string>):string)(url::password((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://:secret123@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".password()", .val=(ddlog_std::unwrap_or_default: function(ddlog_std::Option<string>):string)(url::password((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".password()", .val=(ddlog_std::unwrap_or_default: function(ddlog_std::Option<string>):string)(url::password((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".has_host()", .val=(ddlog_std::to_string: function(bool):string)(url::has_host((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".has_host()", .val=(ddlog_std::to_string: function(bool):string)(url::has_host((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("unix:/run/foo.socket"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".has_host()", .val=(ddlog_std::to_string: function(bool):string)(url::has_host((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("data:text/plain,Stuff"))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://127.0.0.1/index.html\".host_str()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::host_str((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://127.0.0.1/index.html"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".host_str()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::host_str((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".host_str()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::host_str((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("unix:/run/foo.socket"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".host_str()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::host_str((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("data:text/plain,Stuff"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://127.0.0.1/index.html\".domain()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::domain((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://127.0.0.1/index.html"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ftp://rms@example.com\".domain()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::domain((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ftp://rms@example.com"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"unix:/run/foo.socket\".domain()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::domain((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("unix:/run/foo.socket"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"data:text/plain,Stuff\".domain()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::domain((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("data:text/plain,Stuff"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".port()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com:443/\".port()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com:443/")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ssh://example.com:22\".port()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ssh://example.com:22")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".port_or_known_default()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port_or_known_default((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com:443/\".port_or_known_default()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port_or_known_default((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com:443/")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"ssh://example.com:22\".port_or_known_default()", .val=(ddlog_std::to_string: function(bit<16>):string)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<ddlog_std::u16>):bit<16>)(url::port_or_known_default((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("ssh://example.com:22")))))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/api/versions?page=2\".path()", .val=url::path((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/api/versions?page=2")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com\".path()", .val=url::path((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/countries/vi\7879t nam\".path()", .val=url::path((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/countries/vi\7879t nam")))}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/products?page=2\".query()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::query((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/products?page=2"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/products\".query()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::query((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/products"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/?country=espa\241ol\".query()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::query((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/?country=espa\241ol"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/data.csv#row=4\".fragment()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::fragment((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/data.csv#row=4"))), "<none>")}: url_test::URLTest)].
url_test::URLTest[(url_test::URLTest{.description="\"https://example.com/data.csv#cell=4,1-6,2\".fragment()", .val=(ddlog_std::unwrap_or: function(ddlog_std::Option<string>, string):string)(url::fragment((ddlog_std::unwrap_or_default: function(ddlog_std::Result<url::Url,string>):url::Url)(url::url_parse("https://example.com/data.csv#cell=4,1-6,2"))), "<none>")}: url_test::URLTest)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="odds", .v=(vec::filter: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):ddlog_std::Vec<ddlog_std::s64>)(vec_test::int_vec(), (function(x: signed<64>):bool{((x % 64'sd2) != 64'sd0)}))}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="evens", .v=(vec::filter: function(ddlog_std::Vec<ddlog_std::s64>, function(ddlog_std::s64):bool):ddlog_std::Vec<ddlog_std::s64>)(vec_test::int_vec(), vec_test::is_even)}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="+100", .v=(vec::map: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):ddlog_std::Vec<ddlog_std::s64>)(vec_test::int_vec(), (function(x: signed<64>):signed<64>{(x + 64'sd100)}))}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="(0,5]", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                 {(vec::retain: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):())(res, (function(x: signed<64>):bool{((x > 64'sd0) and (x <= 64'sd5))}));
                                                                                  res}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description=">3", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                              {(var threshold: signed<64>) = 64'sd3;
                                                                               {(vec::retain: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):())(res, (function(x: signed<64>):bool{(x > threshold)}));
                                                                                res}}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="not in [-5, 0, 7]", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                             {(var exclude: ddlog_std::Vec<signed<64>>) = {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd2);
                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, (- 64'sd5));
                                                                                                                                            {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd0);
                                                                                                                                             __vec}}};
                                                                                              {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(exclude, 64'sd7);
                                                                                               {(vec::retain: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):())(res, (function(x: signed<64>):bool{(ddlog_std::is_none: function(ddlog_std::Option<signed<64>>):bool)((vec::find: function(ddlog_std::Vec<signed<64>>, function(signed<64>):bool):ddlog_std::Option<signed<64>>)(exclude, (function(y: signed<64>):bool{(y == x)})))}));
                                                                                                res}}}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="not in [-5, 0, 100] uaing 'all'", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                                           {(var exclude: ddlog_std::Vec<signed<64>>) = {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, (- 64'sd5));
                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd0);
                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd100);
                                                                                                                                                            __vec}}}};
                                                                                                            {(vec::retain: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):())(res, (function(x: signed<64>):bool{(vec::all: function(ddlog_std::Vec<signed<64>>, function(signed<64>):bool):bool)(exclude, (function(y: signed<64>):bool{(y != x)}))}));
                                                                                                             res}}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="not in [-5, 0, 100] using 'any'", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                                           {(var exclude: ddlog_std::Vec<signed<64>>) = {(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, (- 64'sd5));
                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd0);
                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd100);
                                                                                                                                                            __vec}}}};
                                                                                                            {(vec::retain: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):())(res, (function(x: signed<64>):bool{(not (vec::any: function(ddlog_std::Vec<signed<64>>, function(signed<64>):bool):bool)(exclude, (function(y: signed<64>):bool{(y == x)})))}));
                                                                                                             res}}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="sort_by(identity)", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                             {(vec::sort_by: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):())(res, (function(x: signed<64>):signed<64>{x}));
                                                                                              res}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="sort_by(-x)", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                       {(vec::sort_by: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):())(res, (function(x: signed<64>):signed<64>{(- x)}));
                                                                                        res}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="sort_by(to_string)", .v={(var res: ddlog_std::Vec<ddlog_std::s64>) = vec_test::int_vec();
                                                                                              {(vec::sort_by: function(mut ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):string):())(res, (ddlog_std::to_string: function(signed<64>):string));
                                                                                               res}}}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="min_by(x*x)", .v=(ddlog_std::vec_singleton: function(signed<64>):ddlog_std::Vec<ddlog_std::s64>)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<signed<64>>):signed<64>)((vec::min_by: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):ddlog_std::Option<signed<64>>)(vec_test::int_vec(), (function(x: signed<64>):signed<64>{(x * x)}))))}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="max_by(to_string)", .v=(ddlog_std::vec_singleton: function(signed<64>):ddlog_std::Vec<ddlog_std::s64>)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<signed<64>>):signed<64>)((vec::max_by: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):string):ddlog_std::Option<signed<64>>)(vec_test::int_vec(), (ddlog_std::to_string: function(signed<64>):string))))}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="filter_map(if (x < 0){None} else {Some{x+1000}})", .v=(vec::filter_map: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):ddlog_std::Option<signed<64>>):ddlog_std::Vec<ddlog_std::s64>)(vec_test::int_vec(), (function(x: signed<64>):ddlog_std::Option<signed<64>>{if (x < 64'sd0) {
                                                                                                                                                                                                                                                                                                                                                          (ddlog_std::None{}: ddlog_std::Option<signed<64>>)
                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                            (ddlog_std::Some{.x=(x + 64'sd1000)}: ddlog_std::Option<signed<64>>)
                                                                                                                                                                                                                                                                                                                                                        }}))}: vec_test::IntVecTransforms)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description="flatmap(|x| [x, x + delta1, x + delta2])", .v={(var delta1: signed<64>) = (- 64'sd1000);
                                                                                                                    {(var delta2: signed<64>) = (delta1 - 64'sd1000);
                                                                                                                     (vec::flatmap: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):ddlog_std::Vec<signed<64>>):ddlog_std::Vec<ddlog_std::s64>)(vec_test::int_vec(), (function(x: signed<64>):ddlog_std::Vec<signed<64>>{{(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd3);
                                                                                                                                                                                                                                                                                                                                        {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, x);
                                                                                                                                                                                                                                                                                                                                         {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, (x + delta1));
                                                                                                                                                                                                                                                                                                                                          {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, (x + delta2));
                                                                                                                                                                                                                                                                                                                                           __vec}}}}}))}}}: vec_test::IntVecTransforms)].
vec_test::Increments[(vec_test::Increments{.i=64'sd100}: vec_test::Increments)].
vec_test::Increments[(vec_test::Increments{.i=64'sd200}: vec_test::Increments)].
vec_test::IntClosures[(vec_test::IntClosures{.f=(function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)})}: vec_test::IntClosures)] :- vec_test::Increments[(__vec_test_increments0@ (vec_test::Increments{.i=(inc: signed<64>)}: vec_test::Increments))], Inspect debug::debug_event((32'd368, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __vec_test_increments0, (vec_test::IntClosures{.f=(function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)})}: vec_test::IntClosures)).
vec_test::IntClosures[(vec_test::IntClosures{.f=(function(x: ddlog_std::s64):ddlog_std::s64{(x * x)})}: vec_test::IntClosures)].
vec_test::IntVecClosures[(vec_test::IntVecClosures{.f=(function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map: function(ddlog_std::Vec<ddlog_std::s64>, function(ddlog_std::s64):ddlog_std::s64):ddlog_std::Vec<ddlog_std::s64>)(v, f)})}: vec_test::IntVecClosures)] :- vec_test::IntClosures[(__vec_test_intclosures0@ (vec_test::IntClosures{.f=(f: function(ddlog_std::s64):ddlog_std::s64)}: vec_test::IntClosures))], Inspect debug::debug_event((32'd370, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __vec_test_intclosures0, (vec_test::IntVecClosures{.f=(function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map: function(ddlog_std::Vec<ddlog_std::s64>, function(ddlog_std::s64):ddlog_std::s64):ddlog_std::Vec<ddlog_std::s64>)(v, f)})}: vec_test::IntVecClosures)).
vec_test::IntVecClosures[(vec_test::IntVecClosures{.f=(function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map: function(ddlog_std::Vec<ddlog_std::Ref<signed<64>>>, function(ddlog_std::Ref<signed<64>>):signed<64>):ddlog_std::Vec<ddlog_std::s64>)((vec::map: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):ddlog_std::Ref<signed<64>>):ddlog_std::Vec<ddlog_std::Ref<signed<64>>>)(v, (ddlog_std::ref_new: function(signed<64>):ddlog_std::Ref<signed<64>>)), (ddlog_std::deref: function(ddlog_std::Ref<signed<64>>):signed<64>))})}: vec_test::IntVecClosures)].
vec_test::IntVecTransforms[(vec_test::IntVecTransforms{.description=("closure " ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(f)), .v=f(vec_test::int_vec())}: vec_test::IntVecTransforms)] :- vec_test::IntVecClosures[(__vec_test_intvecclosures0@ (vec_test::IntVecClosures{.f=(f: function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>)}: vec_test::IntVecClosures))], Inspect debug::debug_event((32'd372, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __vec_test_intvecclosures0, (vec_test::IntVecTransforms{.description=("closure " ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(f)), .v=f(vec_test::int_vec())}: vec_test::IntVecTransforms)).
vec_test::CompareClosures[(vec_test::CompareClosures{.c1=("" ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(c1)), .c2=("" ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(c2)), .equal=(c1 == c2)}: vec_test::CompareClosures)] :- vec_test::IntVecClosures[(__vec_test_intvecclosures0@ (vec_test::IntVecClosures{.f=(c1: function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>)}: vec_test::IntVecClosures))], vec_test::IntVecClosures[(__vec_test_intvecclosures1@ (vec_test::IntVecClosures{.f=(c2: function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>)}: vec_test::IntVecClosures))], Inspect debug::debug_event_join((32'd373, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __vec_test_intvecclosures0, __vec_test_intvecclosures1, (vec_test::CompareClosures{.c1=("" ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(c1)), .c2=("" ++ (ddlog_std::__builtin_2string: function(function(ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>):string)(c2)), .equal=(c1 == c2)}: vec_test::CompareClosures)).
vec_test::VecFolds[(vec_test::VecFolds{.description="1+2+3+4+5", .a=(vec::fold: function(ddlog_std::Vec<signed<64>>, function(signed<64>, signed<64>):signed<64>, signed<64>):signed<64>)({(var __vec: ddlog_std::Vec<signed<64>>) = (ddlog_std::vec_with_capacity: function(bit<64>):ddlog_std::Vec<signed<64>>)(64'd5);
                                                                                                                                                                                           {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd1);
                                                                                                                                                                                            {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd2);
                                                                                                                                                                                             {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd3);
                                                                                                                                                                                              {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd4);
                                                                                                                                                                                               {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(__vec, 64'sd5);
                                                                                                                                                                                                __vec}}}}}}, (function(a: signed<64>, x: signed<64>):signed<64>{(a + x)}), 64'sd0)}: vec_test::VecFolds)].
map_test::MapTransforms[(map_test::MapTransforms{.description="map(+10)", .v={(var delta: bigint) = 10;
                                                                              (map::map: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(map_test::Foo):map_test::Foo):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(foo: map_test::Foo):map_test::Foo{(map_test::Foo{.x=(foo.x + delta)}: map_test::Foo)}))}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="map_with_key(+key+10)", .v={(var delta1: bigint) = 5;
                                                                                           {(var delta2: map_test::Foo) = (map_test::Foo{.x=5}: map_test::Foo);
                                                                                            (map::map: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string), map_test::Foo):map_test::Foo):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(k: (ddlog_std::s64, string), v: map_test::Foo):map_test::Foo{(map_test::Foo{.x=((((k.0 as bigint) + v.x) + delta1) + delta2.x)}: map_test::Foo)}))}}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="map_keys(/2)", .v={(var div: signed<64>) = 64'sd2;
                                                                                  (map::map_keys: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string)):(signed<64>, string)):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(k: (ddlog_std::s64, string)):(signed<64>, string){((k.0 / div), k.1)}))}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="map_in_place(+10)", .v={(var delta: bigint) = 10;
                                                                                       {(var m: ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>) = map_test::test_map();
                                                                                        {(map::map_in_place: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string), mut map_test::Foo):()):())(m, (function(k: (ddlog_std::s64, string), v: mut map_test::Foo):(){v.x = (v.x + delta)}));
                                                                                         m}}}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="filter(>1)", .v=(map::filter: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(map_test::Foo):bool):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(v: map_test::Foo):bool{(v.x > 1)}))}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="filter_with_key(k<=1 and v.x>1)", .v=(map::filter: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string), map_test::Foo):bool):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(k: (ddlog_std::s64, string), v: map_test::Foo):bool{((k.0 <= 64'sd1) and (v.x > 1))}))}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="filter_map(k<=1, +10)", .v={(var delta: bigint) = 10;
                                                                                           (map::filter_map: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(map_test::Foo):ddlog_std::Option<map_test::Foo>):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(v: map_test::Foo):ddlog_std::Option<map_test::Foo>{if (v.x <= 1) {
                                                                                                                                                                                                                                                                                                                                                                                       (ddlog_std::None{}: ddlog_std::Option<map_test::Foo>)
                                                                                                                                                                                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                                                                                                                                                                                         (ddlog_std::Some{.x=(map_test::Foo{.x=(v.x + delta)}: map_test::Foo)}: ddlog_std::Option<map_test::Foo>)
                                                                                                                                                                                                                                                                                                                                                                                     }}))}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="filter_map_with_key(k<=1, +10)", .v={(var delta: bigint) = 10;
                                                                                                    (map::filter_map: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string), map_test::Foo):ddlog_std::Option<map_test::Foo>):ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>)(map_test::test_map(), (function(k: (ddlog_std::s64, string), v: map_test::Foo):ddlog_std::Option<map_test::Foo>{if (k.0 <= 64'sd1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                       (ddlog_std::None{}: ddlog_std::Option<map_test::Foo>)
                                                                                                                                                                                                                                                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (ddlog_std::Some{.x=(map_test::Foo{.x=(v.x + delta)}: map_test::Foo)}: ddlog_std::Option<map_test::Foo>)
                                                                                                                                                                                                                                                                                                                                                                                                                                                     }}))}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="retain(!=1)", .v={(var exclude: bigint) = 1;
                                                                                 {(var m: ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>) = map_test::test_map();
                                                                                  {(map::retain: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(map_test::Foo):bool):())(m, (function(v: map_test::Foo):bool{(v.x != exclude)}));
                                                                                   m}}}}: map_test::MapTransforms)].
map_test::MapTransforms[(map_test::MapTransforms{.description="retain_with_key(!=1)", .v={(var exclude: string) = "1";
                                                                                          {(var m: ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>) = map_test::test_map();
                                                                                           {(map::retain: function(mut ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function((ddlog_std::s64, string), map_test::Foo):bool):())(m, (function(k: (ddlog_std::s64, string), v: map_test::Foo):bool{(k.1 != exclude)}));
                                                                                            m}}}}: map_test::MapTransforms)].
map_test::MapFolds[(map_test::MapFolds{.description="concatenate values", .a=(map::fold: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(string, map_test::Foo):string, string):string)(map_test::test_map(), (function(a: string, x: map_test::Foo):string{((a ++ " ") ++ (ddlog_std::__builtin_2string: function(bigint):string)(x.x))}), "")}: map_test::MapFolds)].
map_test::MapFolds[(map_test::MapFolds{.description="concatenate key-value pairs", .a=(map::fold: function(ddlog_std::Map<(ddlog_std::s64, string),map_test::Foo>, function(string, (ddlog_std::s64, string), map_test::Foo):string, string):string)(map_test::test_map(), (function(a: string, k: (ddlog_std::s64, string), v: map_test::Foo):string{((((("" ++ a) ++ " ") ++ (ddlog_std::__builtin_2string: function(signed<64>):string)(k.0)) ++ ":") ++ (ddlog_std::__builtin_2string: function(bigint):string)(v.x))}), "")}: map_test::MapFolds)].
set_test::SetTransforms[(set_test::SetTransforms{.description="map(push 100)", .s=(set::map: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>){{(var y: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)) = x;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {(ddlog_std::push: function(mut ddlog_std::Vec<signed<64>>, signed<64>):())(y.1, 64'sd100);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               y}}}))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="filter(contains 2)", .s=(set::filter: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool{(vec::any: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):bool)(x.1, (function(y: signed<64>):bool{(y == 64'sd2)}))}))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="filter_map(==1, :=100)", .s=(set::filter_map: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>{if (x.0 == 64'sd1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (ddlog_std::Some{.x={(var y: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)) = x;
{y.0 = 64'sd100;
y}}}: ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (ddlog_std::None{}: ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)
}}))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="min_by(min)", .s=(ddlog_std::set_singleton: function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>):(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>))((set::min_by: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<signed<64>>):ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<signed<64>>{(vec::min_by: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):ddlog_std::Option<signed<64>>)(x.1, (function(x: signed<64>):signed<64>{x}))}))))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="max_by(max)", .s=(ddlog_std::set_singleton: function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)((ddlog_std::unwrap_or_default: function(ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>):(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>))((set::max_by: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<signed<64>>):ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):ddlog_std::Option<signed<64>>{(vec::max_by: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):signed<64>):ddlog_std::Option<signed<64>>)(x.1, (function(x: signed<64>):signed<64>{x}))}))))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="find(contains(3))", .s=(ddlog_std::to_set: function(ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>):ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)((set::find: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool):ddlog_std::Option<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool{(vec::any: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):bool)(x.1, (function(y: signed<64>):bool{(y == 64'sd3)}))})))}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="any(contains(3))", .s=if (set::any: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool):bool)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool{(vec::any: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):bool)(x.1, (function(y: signed<64>):bool{(y == 64'sd3)}))})) {
                                                                                         set_test::test_set()
                                                                                     } else {
                                                                                           (ddlog_std::set_empty: function():ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)()
                                                                                       }}: set_test::SetTransforms)].
set_test::SetTransforms[(set_test::SetTransforms{.description="all(contains(3))", .s=if (set::all: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function((ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool):bool)(set_test::test_set(), (function(x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):bool{(vec::any: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>):bool):bool)(x.1, (function(y: signed<64>):bool{(y == 64'sd3)}))})) {
                                                                                         set_test::test_set()
                                                                                     } else {
                                                                                           (ddlog_std::set_empty: function():ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>)()
                                                                                       }}: set_test::SetTransforms)].
set_test::SetFolds[(set_test::SetFolds{.description="fold(+)", .a=(set::fold: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function(signed<64>, (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):signed<64>, signed<64>):signed<64>)(set_test::test_set(), (function(a: signed<64>, x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):signed<64>{(a + x.0)}), 64'sd0)}: set_test::SetFolds)].
set_test::SetFolds[(set_test::SetFolds{.description="fold(fold(+))", .a=(set::fold: function(ddlog_std::Set<(ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)>, function(signed<64>, (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):signed<64>, signed<64>):signed<64>)(set_test::test_set(), (function(a: signed<64>, x: (ddlog_std::s64, ddlog_std::Vec<ddlog_std::s64>)):signed<64>{(a + (vec::fold: function(ddlog_std::Vec<ddlog_std::s64>, function(signed<64>, signed<64>):signed<64>, signed<64>):signed<64>)(x.1, (function(b: signed<64>, y: signed<64>):signed<64>{(b + y)}), 64'sd0))}), 64'sd0)}: set_test::SetFolds)].

