typedef Address = Address{addr: ip_addr_t}
typedef Aggregate1 = Aggregate1{x: string, cnt: bit<64>}
typedef Aggregate2 = Aggregate2{x: string, set: std.Set<string>}
typedef Aggregate3 = Aggregate3{x: string, vec: std.Vec<string>}
typedef Aggregate4 = Aggregate4{x: string, map: std.Map<string,string>}
typedef AggregateMe1 = AggregateMe1{x: string, y: string}
typedef Allocated = Allocated{name: string, xs: std.Set<bit<32>>}
typedef Allocation = Allocation{name: string, id: string, x: bit<32>}
typedef Alt = C0{x: bit<32>} | C1{x: bit<32>}
typedef Answer = Answer{x: station}
typedef Blacklist = Blacklist{addr: ip_addr_t}
typedef C = C{f1: string, f2: string}
typedef Disaggregate = Disaggregate{x: string, y: string}
typedef ExternalId = ExternalId{host: bit<64>, id: (string, string)}
typedef ExternalIds = ExternalIds{host: bit<64>, ids: std.Map<string,string>}
typedef FooStruct = Option1{f1: bigint, f2: IPAddr, f3: (bool, string)} | Option2{f4: bit<32>, f5: IPAddr}
typedef Gangster = Gangster{nickname: string, name: string}
typedef HostAddress = HostAddress{host: bit<64>, addr: string}
typedef HostAddresses = HostAddresses{host: bit<64>, addrs: std.Set<string>}
typedef Human = Human{h: person}
typedef IP4Addr = bit<32>
typedef IP4Subnet = IP4Subnet{addr: IP4Addr, mask: bit<32>}
typedef IP6Addr = bit<128>
typedef IPAddr = IP4{ip4: IP4Addr} | IP6{ip6: IP6Addr}
typedef Innocent = Innocent{name: string}
typedef Links = Links{l: line, s1: station, s2: station}
typedef Parent = Parent{child: person, parent: person}
typedef R1 = bigint
typedef R3 = R3{f1: bigint, f2: bool}
typedef R6 = R6{f: bigint}
typedef R7 = R7{f1: bigint, f2: bit<16>} | R7Other{}
typedef Reach = Reach{s1: station, s2: station}
typedef Realized = Realized{name: string, id: string, x: bit<32>}
typedef Rel1 = Rel1{x: bigint, y: IPAddr}
typedef Rel2 = Rel2{x: bigint, z: FooStruct}
typedef Rel3 = Rel3{x: bigint, y: IPAddr, z: FooStruct}
typedef Rel4 = Rel4{x: bigint, y: IPAddr, b: bool}
typedef Request = Request{name: string, id: string}
typedef S = S{f1: (bool, bool), f2: bit<32>}
typedef Sib = Sib{s1: person, s2: person}
typedef Strings = Strings{s: string}
typedef Suspect = Suspect{name: string}
typedef T = T{x: bigint, y: string}
typedef T1 = C11{f1: bigint, f2: (bigint, string)} | C12{f3: bit<32>, f4: (bool, bool, bool)}
typedef T16 = t15
typedef T17 = bigint
typedef T2 = C21{f1: T1, f2: bigint} | C22{f3: (bool, T1)}
typedef T3 = C31{f1: T1, f2: bigint, s: string, b: bit<32>} | C32{f3: ((bool, (bool, bool, bool)), T1)}
typedef Table1 = Table1{id: bit<64>, name: string}
typedef Table12 = Table12{id: bit<128>, name: string, f3: S}
typedef Table2 = Table2{name: string, f2: bigint, f3: S}
typedef ToAllocate = ToAllocate{name: string, ids: std.Vec<string>}
typedef ValidDestination = ValidDestination{addr: ip_addr_t}
typedef W = W{f1: bigint, f2: bigint, f3: bigint}
typedef WithKey = WithKey{key: bit<128>, val: string}
typedef WithKeyDbg = WithKeyDbg{key: bit<128>, val: string}
typedef X = X{field: bigint}
typedef XX = XX{b: bigint, c: R3, d: R1}
typedef Y = Y{b: bigint, e: string}
typedef Z = Z{field: bigint}
typedef ZZ = ZZ{x: bigint, y: R3}
typedef ip_addr_t = IPAddr{b3: bit<8>, b2: bit<8>, b1: bit<8>, b0: bit<8>}
typedef line = bigint
typedef nested_t = N{field: C}
typedef option_t<'A> = None{} | Some{value: 'A}
typedef person = string
typedef serializable_t = ConsInt{x: bigint} | ConsBit{y: bit<32>} | ConsBool{z: bool} | Cons0{}
typedef station = string
extern type std.Group<'A>
extern type std.Map<'K,'V>
extern type std.Set<'A>
extern type std.Vec<'A>
typedef string_syn = string
typedef t00 = bigint
typedef t01 = bool
typedef t02 = string
typedef t03 = bit<32>
typedef t04 = bigint
typedef t05 = (bigint, bigint)
typedef t06 = (bigint, bigint, bigint)
typedef t07 = ()
typedef t08 = ((), (), ())
typedef t09 = (bigint, (), bigint)
typedef t10 = (bigint, bool, string, bit<32>)
typedef t11 = (bigint, (bool, (string, bit<32>)))
typedef t12 = t11
typedef t13 = (t00, t01, t02, t03)
typedef t14 = (t04, t04)
typedef t15 = Const15{f: bigint}
typedef t18 = Const18{f0: bigint, f1: string, f2: t00}
typedef t19 = C000{f0: bigint} | C111{f0: bigint} | C222{f0: bigint}
function a0 (): bigint =
    1
function a1 (): bigint =
    (1 + 2)
function a2 (): bit<32> =
    (32'd0 + 32'd1)
function a3 (): bit<32> =
    (32'd0: bit<32>)
function a4 (): bit<32> =
    (64'd0: bit<64>)[40:9]
function a5 (a: bit<32>, b: bit<32>): bit<32> =
    ((((((a & b) | (a | b)) | (~ a)) | (a << 32'd5)) | (a >> 32'd5)) | (a[15:0] ++ a[31:16]))
function a6 (a: bit<16>, b: bit<16>): bit<16> =
    (((((a + b) + (a - b)) + (a / b)) + (a * b)) + (a % b))
function a7 (a: bit<16>, b: bit<16>): bool =
    (((((((a < b) or (a > b)) or (a <= b)) or (a >= b)) or (a == b)) or (a != b)) or (a < b))
function a8 (): bit<32> =
    (((32'd125 | 32'd255) | 32'd511) | 32'd683)
function a9 (): bit<32> =
    (((32'd125 | 32'd255) | 32'd511) | 32'd683)
extern function allocate_u32 (allocated: std.Set<bit<32>>, toallocate: std.Vec<'B>, max_val: bit<32>): std.Vec<('B, bit<32>)>
function b0 (): bool =
    (true and false)
function b1 (a: bool): bool =
    ((((a and true) or (a or false)) or (a => false)) or (not a))
function c0 (a: bit<32>, b: bit<16>): bit<16> =
    (a;
     b)
function dummy (x: string): string =
    (x ++ " dummy")
extern function f (): bigint
function f1 (x: T1, y: T2, q: T3): bool =
    (match (x) {
         C11{.f1=_, .f2=_} -> true,
         _ -> false
     };
     (match (x) {
          C11{.f1=_, .f2=_} -> true,
          C12{.f3=_, .f4=_} -> false
      };
      (match (y) {
           C21{.f1=_, .f2=_} -> true,
           C22{.f3=(_, C11{.f1=_, .f2=_})} -> true,
           _ -> false
       };
       (match (y) {
            C21{.f1=_, .f2=_} -> true,
            C22{.f3=(true, C11{.f1=_, .f2=_})} -> true,
            C22{.f3=(true, C12{.f3=_, .f4=_})} -> true,
            C22{.f3=(false, C11{.f1=_, .f2=_})} -> true,
            C22{.f3=(false, C12{.f3=_, .f4=_})} -> true
        };
        ((var z: (bool, (bool, (bool, bool)))) = (true, (false, (true, false)));
         (match (z) {
              (true, _) -> true,
              (false, (_, (true, true))) -> true,
              (false, (_, (true, false))) -> true,
              (false, (_, (false, true))) -> true,
              (false, (_, (false, false))) -> true
          };
          (match (z) {
               (_, (_, (true, true))) -> true,
               (_, (_, (true, false))) -> true,
               (_, (_, (false, true))) -> true,
               (false, (_, (false, false))) -> true,
               (true, (_, (false, false))) -> true
           };
           (match (q) {
                C31{.f1=_, .f2=_, .s=_, .b=_} -> true,
                C32{.f3=((true, (_, _, false)), _)} -> true,
                C32{.f3=((false, (_, _, false)), _)} -> true,
                C32{.f3=((false, (_, _, true)), _)} -> true,
                C32{.f3=((_, (_, _, true)), C11{.f1=_, .f2=_})} -> true,
                C32{.f3=((_, (_, _, true)), C12{.f3=_, .f4=(true, true, true)})} -> false,
                C32{.f3=((_, (_, _, true)), C12{.f3=_, .f4=(_, _, false)})} -> false,
                C32{.f3=((_, (_, _, true)), C12{.f3=_, .f4=(_, _, true)})} -> false
            };
            (match (q) {
                 C31{.f1=_, .f2=0, .s="foo", .b=32'd15} -> true,
                 C31{.f1=_, .f2=_, .s=_, .b=32'd15} -> true,
                 C31{.f1=_, .f2=0, .s=_, .b=_} -> true,
                 C31{.f1=_, .f2=_, .s="foo", .b=_} -> true,
                 C32{.f3=_} -> true,
                 C31{.f1=_, .f2=_, .s=_, .b=_} -> true
             };
             ((var s: string) = "bar";
              match (s) {
                  "foo" -> true,
                  "bar" -> true,
                  _ -> false
              }))))))))))
function fnested (x: nested_t): string =
    (N{.field=C{.f1=var res, .f2=_}} = x;
     res)
function foo (): bool =
    ((var v1: bigint) = 0;
     ((var v2: bit<32>) = 32'd1;
      ((var v3: bit<129>) = 129'd0;
       ((var v4: bool) = true;
        ((var v5: (bigint, string)) = (0, "test_string");
         (var v6 = IP4{.ip4=32'd2864434397};
          (var v7 = Option1{.f1=0, .f2=IP4{.ip4=32'd0}, .f3=(true, "bar")};
           (v3 = (v3 + 129'd703710);
            (match (v6) {
                 IP4{.ip4=_} -> true,
                 _ -> false
             };
             match (v7) {
                 Option1{.f1=_, .f2=IP6{.ip6=_}, .f3=(_, "bar")} -> true,
                 _ -> false
             })))))))))
extern function g (a: bigint): bigint
extern function h (a: (bigint, bigint)): (bigint, bigint)
extern function parameterized (x: 'A, y: 'A): 'A
function parameterized2 (x: 'A, y: 'A): bool =
    (x == y)
function patterns (): () =
    ((var a: Alt) = C0{.x=32'd1};
     (var b = match (a) {
                  C0{.x=_} -> true,
                  C1{.x=_} -> false
              };
      (var i: bit<32>) = match (a) {
                             C0{.x=var v} -> v,
                             C1{.x=var v} -> v
                         }))
function s0 (): string =
    "Some string"
function s1 (): string =
    "\t\r\n\"\\\a"
function serializable_t2string (x: serializable_t): string =
    match (x) {
        ConsInt{.x=var v} -> (("ConsInt(" ++ std.__builtin_2string(v)) ++ ")"),
        ConsBit{.y=var v} -> (("ConsBool(" ++ std.__builtin_2string(v)) ++ ")"),
        ConsBool{.z=true} -> "ConsBool(true)",
        ConsBool{.z=false} -> "ConsBool(false)",
        Cons0{} -> "Cons0"
    }
function shadow (): string =
    ((var b: option_t<string>) = None{};
     (var a = Some{.value="foo"};
      match (a) {
          Some{.value=var v} -> v,
          None{} -> ""
      }))
extern function std.__builtin_2string (x: 'X): string
extern function std.count (g: std.Group<'A>): bit<64>
extern function std.group2map (g: std.Group<('K, 'V)>): std.Map<'K,'V>
extern function std.group2set (g: std.Group<'A>): std.Set<'A>
extern function std.group2vec (g: std.Group<'A>): std.Vec<'A>
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
function strings (): () =
    (var str1 = ("foo" ++ "bar");
     (var str2 = (("foobar" ++ "buzz") ++ "\nraw string quoted string");
      (var str3 = (("str1: " ++ str1) ++ "");
       (var str4 = (((((("str1: " ++ str1) ++ ", str2: ") ++ str2) ++ ", str3: ") ++ str3) ++ ".");
        (var str5 = (((((("str1: " ++ str1) ++ ",\nstr2: ") ++ str2) ++ ",\nstr3: ") ++ str3) ++ ".");
         (var str6 = (("" ++ (str1 ++ str2)) ++ "");
          (var str7 = (("" ++ (var x = (str1 ++ str2);
                               x)) ++ "");
           (var str8 = (("" ++ (var x = (str1 ++ str2);
                                dummy(x))) ++ "");
            ()))))))))
function tostring1 (): () =
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        (var err = (((((((("a=" ++ std.__builtin_2string(a)) ++ ", b=") ++ std.__builtin_2string(b)) ++ ", c=") ++ std.__builtin_2string(c)) ++ ", d=") ++ d) ++ "");
         ())))))
function tostring2 (): () =
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        ((var e: serializable_t) = ConsInt{.x=0};
         (var err = (((((((((("a=" ++ std.__builtin_2string(a)) ++ ", b=") ++ std.__builtin_2string(b)) ++ ", c=") ++ std.__builtin_2string(c)) ++ ", d=") ++ d) ++ ", e:") ++ serializable_t2string(e)) ++ "");
          ()))))))
function use_parameterized (x: string, y: string_syn): string =
    parameterized(x, y)
function v (): string =
    ((var v1: string) = "hello";
     (var v2 = "there";
      v2))
function v2 (): bool =
    b1(true)
function vars (): () =
    ((var x: bigint) = 0;
     (x = 10;
      (var y = C{.f1="foo", .f2="bar"};
       ((var z: C) = C{.f1="bar", .f2="foo"};
        ((var a, var b) = ((x + 5), (x - 5));
         (C{.f1=var e, .f2=_} = y;
          C{.f1=var c, .f2=var d} = y))))))
function x (): Alt =
    C0{.x=32'd5}
input relation Address [Address]
output relation Aggregate1 [Aggregate1]
output relation Aggregate2 [Aggregate2]
output relation Aggregate3 [Aggregate3]
output relation Aggregate4 [Aggregate4]
input relation AggregateMe1 [AggregateMe1]
relation Allocated [Allocated]
output relation Allocation [Allocation]
output relation Answer [Answer]
input relation Blacklist [Blacklist]
output relation Disaggregate [Disaggregate]
output relation ExternalId [ExternalId]
input relation ExternalIds [ExternalIds]
input relation Gangster [Gangster]
output relation HostAddress [HostAddress]
input relation HostAddresses [HostAddresses]
input relation Human [Human]
output relation Innocent [Innocent]
input relation Links [Links]
input relation Parent [Parent]
input relation R1 [R1]
input relation R2 [(bigint, bigint)]
input relation R3 [R3]
output relation R4 [R3]
output relation R5 [bigint]
output relation R6 [R6]
output relation R7 [R7]
output relation Reach [Reach]
input relation Realized [Realized]
input relation Rel1 [Rel1]
input relation Rel2 [Rel2]
output relation Rel3 [Rel3]
output relation Rel4 [Rel4]
input relation Request [Request]
output relation Sib [Sib]
input relation Strings [Strings]
input relation Suspect [Suspect]
output relation T [T]
input relation Table1 [Table1]
output relation Table12 [Table12]
input relation Table2 [Table2]
relation ToAllocate [ToAllocate]
output relation ValidDestination [ValidDestination]
output relation W [W]
input relation WithKey [WithKey] primary key (x) x.key
output relation WithKeyDbg [WithKeyDbg]
input relation X [X]
input relation XX [XX]
input relation Y [Y]
output relation Z [Z]
output relation ZZ [ZZ]
Sib(.s1=x, .s2=y) :- Parent(.child=x, .parent=z), Parent(.child=y, .parent=z), (x != y).
Parent(.child="Alice", .parent="Bob").
Parent(.child="Ben", .parent="Bob").
Parent(.child="Bob", .parent="Bob").
Reach(.s1=x, .s2=y) :- Links(.l=l, .s1=x, .s2=y).
Reach(.s1=x, .s2=y) :- Links(.l=l, .s1=y, .s2=x).
Reach(.s1=x, .s2=y) :- Links(.l=l, .s1=x, .s2=z), Reach(.s1=z, .s2=y).
Answer(.x=x) :- Reach(.s1="Odeon", .s2=x).
Z(.field=a.field) :- X[a].
Z(.field=a.field) :- X[a].
Z(.field=a.field) :- X[a], match (a.field) {
                               1 -> true,
                               2 -> false,
                               _ -> false
                           }.
Z(.field=(a.field + 1)) :- X[a], match (a.field) {
                                     1 -> false,
                                     2 -> true,
                                     _ -> false
                                 }.
Z(.field=(a.field - 1)) :- X[a], match (a.field) {
                                     1 -> false,
                                     2 -> false,
                                     _ -> true
                                 }.
Z(.field=a) :- X(.field=a), match (a) {
                                1 -> true,
                                2 -> false,
                                _ -> false
                            }.
Z(.field=(a + 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> true,
                                      _ -> false
                                  }.
Z(.field=(a - 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> false,
                                      _ -> true
                                  }.
Z(.field=a) :- X(.field=a), match (a) {
                                1 -> true,
                                _ -> false
                            }.
Z(.field=(a + 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> true,
                                      _ -> false
                                  }.
Z(.field=(a - 1)) :- X(.field=a), match (a) {
                                      1 -> false,
                                      2 -> false,
                                      _ -> true
                                  }.
Z(.field=a.field) :- X[a], ((a.field % 2) == 0).
Z(.field=a.field) :- X[a], ((a.field % 2) == 0).
Z(.field=a) :- X(.field=a), ((a % 2) == 0).
Z(.field=(a.field + 1)) :- X[a], (a.field == 2).
Z(.field=a.field) :- X[a], (not (a.field == 2)).
Z(.field=(a + 1)) :- X(.field=a), (a == 2).
Z(.field=a) :- X(.field=a), (a != 1).
Z(.field=a.field) :- X[a], (a.field >= 2), (a.field > 2).
Z(.field=(a.field + 2)) :- X[a], (a.field >= 2), (a.field > 2).
Z(.field=a) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a + 2)) :- X(.field=a), (a >= 2), (a > 2).
Z(.field=(a.field + b.field)) :- X[a], X[b].
Z(.field=(a.field + c.field)) :- X[a], X[c].
Z(.field=(a + b)) :- X(.field=a), X(.field=b).
Z(.field=(a + c)) :- X(.field=a), X(.field=c).
Z(.field=(a + b)),
Z(.field=(a + c)) :- X(.field=a), X(.field=b), X(.field=c).
Z(.field=(a.field + b)) :- X[a], (var b: bigint) = (a.field + 2).
Z(.field=(a + b)) :- X(.field=a), var b = (a + 2).
W(.f1=a.field, .f2=b, .f3=c) :- X[a], var b = (a.field + 2), var c = (b + a.field).
W(.f1=a, .f2=b, .f3=c) :- X(.field=a), var b = (a + 2), var c = (b + a).
R1[1].
R2[(1, 2)].
R4[x] :- R3[x].
R5[x.f1] :- R3[x].
R6(.f=x.f1) :- R3[x].
ZZ(.x=a.b, .y=a.c) :- XX[a].
T(.x=a.b, .y=e) :- XX[a], Y(.b=a.d, .e=e).
R7(.f1=1, .f2=16'd2).
R7(.f1=1, .f2=16'd3).
R7[R7Other{}].
Table12(.id=std.hash128((id, name, f2, f3)), .name=name, .f3=f3) :- Table1(.id=id, .name=name), Table2(.name=name, .f2=f2, .f3=f3).
Strings(.s="").
Strings(.s="foo").
Strings(.s="bar\n").
Strings(.s="\t\tbar").
Strings(.s="\"buzz").
Strings(.s="\r\n\abuzz").
Strings(.s="\\buzz").
Strings(.s="\\buzz").
Strings(.s="bar\916").
Strings(.s="").
Strings(.s="foo").
Strings(.s="foo\nbuzz\nbar").
Strings(.s="\n    foo\n    buzz\n    bar").
Strings(.s="bar\916\n\928").
Strings(.s="bar\916\n\928 quoted string").
Strings(.s="\n    foo\\r\\n\n    buzz\n    bar").
Strings(.s="foo-bar").
Strings(.s="foo\nbar").
Strings(.s="foo\\bar").
Strings(.s="foo\\bar").
Strings(.s="word1 word2").
Strings(.s="line1\nline2").
Rel3(.x=x, .y=y, .z=z) :- Rel1(.x=x, .y=y), Rel2(.x=x, .z=z).
Rel4(.x=x, .y=y, .b=b) :- Rel1(.x=x, .y=y), Rel2(.x=x, .z=Option1{.f1=_, .f2=IP4{.ip4=_}, .f3=(b, "buzz")}).
Aggregate1(.x=x, .cnt=cnt) :- AggregateMe1(.x=x, .y=y), Aggregate((x), cnt = std.count(y)).
Aggregate2(.x=x, .set=set) :- AggregateMe1(.x=x, .y=y), Aggregate((x), set = std.group2set(y)).
Aggregate3(.x=x, .vec=vec) :- AggregateMe1(.x=x, .y=y), Aggregate((x), vec = std.group2vec(y)).
Aggregate4(.x=x, .map=map) :- AggregateMe1(.x=x, .y=y), Aggregate((x), map = std.group2map((x, y))).
Disaggregate(.x=x, .y=y) :- AggregateMe1(.x=x, .y=y), Aggregate((x), set = std.group2set(y)), var y = FlatMap(set).
WithKeyDbg(.key=k, .val=v) :- WithKey(.key=k, .val=v).
Innocent(.name=name) :- Suspect(.name=name), not Gangster(.nickname=_, .name=name).
ValidDestination(.addr=addr) :- Address(.addr=addr), IPAddr{.b3=var b3, .b2=var b2, .b1=_, .b0=_} = addr, not Blacklist(.addr=IPAddr{.b3=b3, .b2=b2, .b1=_, .b0=_}).
HostAddress(.host=host, .addr=addr) :- HostAddresses(.host=host, .addrs=addrs), var addr = FlatMap(addrs).
ExternalId(.host=host, .id=id) :- ExternalIds(.host=host, .ids=ids), var id = FlatMap(ids).
Allocation(.name=name, .id=id, .x=x) :- Request(.name=name, .id=id), Realized(.name=name, .id=id, .x=x).
ToAllocate(.name=name, .ids=ids) :- Request(.name=name, .id=id), not Realized(.name=name, .id=id, .x=_), Aggregate((name), ids = std.group2vec(id)).
Allocated(.name=name, .xs=xs) :- Realized(.name=name, .id=_, .x=x), Aggregate((name), xs = std.group2set(x)).
Allocation(.name=name, .id=id, .x=x) :- ToAllocate(.name=name, .ids=ids), Allocated(.name=name, .xs=xs), var allocation = FlatMap(allocate_u32(xs, ids, ((32'd1 << 32'd24) - 32'd1))), (var id, var x) = allocation.
