typedef R1 = bigint
typedef R3 = R3{f1: bigint, f2: bool}
typedef R6 = R6{f: bigint}
typedef R7 = R7{f1: bigint, f2: bit<16>} | R7Other{}
typedef S = S{f1: (bool, bool), f2: bit<32>}
extern type Set<'A>
typedef T = T{x: bigint, y: string}
typedef Table1 = Table1{id: bit<64>, name: string}
typedef Table12 = Table12{id: bit<128>, name: string, f3: S}
typedef Table2 = Table2{name: string, f2: bigint, f3: S}
extern type Vec<'A>
typedef X = X{b: bigint, c: R3, d: R1}
typedef Y = Y{b: bigint, e: string}
typedef Z = Z{x: bigint, y: R3}
extern function __builtin_2string (x: 'X): string
extern function hash128 (x: 'X): bit<128>
extern function hash64 (x: 'X): bit<64>
extern function hex (x: 'X): string
input relation R1 [R1]
input relation R2 [(bigint, bigint)]
input relation R3 [R3]
relation R4 [R3]
relation R5 [bigint]
relation R6 [R6]
relation R7 [R7]
relation T [T]
input relation Table1 [Table1]
relation Table12 [Table12]
input relation Table2 [Table2]
input relation X [X]
input relation Y [Y]
relation Z [Z]
R1[1].
R2[(1, 2)].
R4[x] :- R3[x].
R5[x.f1] :- R3[x].
R6(.f=x.f1) :- R3[x].
Z(.x=a.b, .y=a.c) :- X[a].
T(.x=a.b, .y=e) :- X[a], Y(.b=a.d, .e=e).
R7(.f1=1, .f2=16'd2).
R7(.f1=1, .f2=16'd3).
R7[R7Other{}].
Table12(.id=hash128((id, name, f2, f3)), .name=name, .f3=f3) :- Table1(.id=id, .name=name), Table2(.name=name, .f2=f2, .f3=f3).
