typedef stage = LS_IN_ACL{} | LS_OUT_ACL{}
for (ls in Logical_Switch) { flow ( ls, LS_IN_ACL{}, 0, "1", "next;" ); flow ( ls, LS_OUT_ACL{}, 0, "1", "next;" ) }
for (ls in Logical_Switch if ls.has_stateful_acl) { flow ( ls, LS_IN_ACL{}, 1, "ip && (!ct.est || (ct.est && ct_label.blocked))", "{ reg0[1] = 1; next; }" ); flow ( ls, LS_OUT_ACL{}, 1, "ip && (!ct.est || (ct.est && ct_label.blocked))", "{ reg0[1] = 1; next; }" ); flow ( ls, LS_IN_ACL{}, 65535, "ct.inv || (ct.est && ct.rpl && ct_label.blocked)", "{ drop; }" ); flow ( ls, LS_OUT_ACL{}, 65535, "ct.inv || (ct.est && ct.rpl && ct_label.blocked)", "{ drop; };" ); flow ( ls, LS_IN_ACL{}, 65535, "(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", "{ next; }" ); flow ( ls, LS_OUT_ACL{}, 65535, "(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", "{ next; }" ); flow ( ls, LS_IN_ACL{}, 65535, "!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", "{ next; }" ); flow ( ls, LS_OUT_ACL{}, 65535, "!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", "{ next; }" ); flow ( ls, LS_IN_ACL{}, 65535, "nd", "{ next; }" ); flow ( ls, LS_OUT_ACL{}, 65535, "nd", "{ next; }" ) }
