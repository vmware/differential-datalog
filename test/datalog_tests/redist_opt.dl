import tinyset as TS
import graph as graph

/* entity id */
typedef entid_t = bit<32>

/* transport node id */
typedef tnid_t = bit<16>

typedef EntityType =
    EntityLS |
    EntityLSP{connected_to_dr: bool} |
    EntityLRP{mcast: bool} |
    EntityRDS{routingDomainId: entid_t}|
    EntityOther

input relation DdlogNode(id: entid_t, etype: EntityType)

input relation DdlogBinding(tn: tnid_t, entity: entid_t)

input relation DdlogDependency(parent: entid_t, child: entid_t)

relation ValidDependency(parent: entid_t, child: entid_t)

ValidDependency(parent, child) :- DdlogDependency(parent, child), DdlogNode(parent, _), DdlogNode(child, _).

relation ExtDdlogDependency(parent: entid_t, child: entid_t)
index ExtDdlogDependency_by_parent(parent: entid_t) on ExtDdlogDependency(parent, _)
index ExtDdlogDependency_by_child(child: entid_t) on ExtDdlogDependency(_, child)

ExtDdlogDependency(parent, child) :-
    ValidDependency(parent, child).

ExtDdlogDependency(ls, lsp) :-
    ValidDependency(lsp, lrp),
    DdlogNode(lrp, EntityLRP{}),
    DdlogNode(lsp, EntityLSP{.connected_to_dr = true}),
    ValidDependency(lsp, ls),
    DdlogNode(ls, EntityLS).


/* Bi-directional edges.
 */
function dep_parent(e: ExtDdlogDependency): entid_t = e.parent
function dep_child(e: ExtDdlogDependency): entid_t = e.child
relation BiEdge[(entid_t, entid_t)]
apply graph.UnsafeBidirectionalEdges(ExtDdlogDependency, dep_parent, dep_child) -> (BiEdge)

/* Compute connected components by propagating node id's along biditectional edges.
 */
function edge_parent(e: (entid_t, entid_t)): entid_t =
     match (e) {
         (parent,_) -> parent
     }
 function edge_child(e: (entid_t, entid_t)): entid_t =
     match (e) {
         (_, child) -> child
     }
relation SCCLabel[(entid_t, entid_t)]
apply graph.ConnectedComponents64(BiEdge, edge_child, edge_parent) -> (SCCLabel)


/* Label all nodes that don't belong to an SCC with their own ids
 */
relation LabeledNode(node: entid_t, scc: entid_t)
LabeledNode(node, scc) :- SCCLabel[(node, scc)].
LabeledNode(node, node) :- DdlogNode(node, _), not SCCLabel[(node, _)].

/* Lift the ExtDdlogDependency relation to SCCs:
 * Two SCCs are connected by an edge iff there exists a pair
 * of nodes that belong to the first and the second SCC respectively,
 * connected by a ExtDdlogDependency edge.
 */
relation SCCEdge(parent: entid_t, child: entid_t)
SCCEdge(parentscc,childscc) :-
    ExtDdlogDependency(parent, child),
    LabeledNode(parent, parentscc),
    LabeledNode(child, childscc),
    childscc != parentscc.

/* Lift the DdlogBinding relation to SCCs:
 * An SCC is bound to a TN iff at least one of its nodes is bound to this TN.
 */
relation SCCBinding(scc: entid_t, bindings: Ref<TS.Set64<tnid_t>>)
SCCBinding(scc, ref_new(bindings)) :-
    DdlogBinding(tn, entity),
    LabeledNode(entity, scc),
    var bindings = Aggregate((scc), TS.group2set(tn)).

/* Compute SCC span.
 */
relation SCCSpan(scc: entid_t, span: Ref<TS.Set64<tnid_t>>)
/* Base case */
SCCSpan(scc, bindings) :- SCCBinding(scc, bindings).
/* Recursive step: propagate span along graph edges */
SCCSpan(parent, tns) :-
    SCCEdge(child, parent),
    SCCSpan(child, child_tns),
    var tns = Aggregate((parent), TS.group_setref_unions(child_tns)).

/* Flatten the span relation: for each node in an SCC, the node's span is the
 * same as the SCC span.
 */
relation SpanUnfiltered(entity: entid_t, tns: Ref<TS.Set64<tnid_t>>)
SpanUnfiltered(node, span) :- SCCSpan(scc, span), LabeledNode(node, scc).

output relation Span(entity: entid_t, tns: Ref<TS.Set64<tnid_t>>)
index Span_by_entity(entity: entid_t) on Span(.entity = entity, .tns = _)

Span(node, ref_new(TS.intersection(deref(edge_tns), deref(tns_unfiltered)))) :-
    SpanUnfiltered(node, tns_unfiltered),
    McastObject(node),
    EdgeTNs(edge_tns).

Span(node, tns) :-
    SpanUnfiltered(node, tns),
    not McastObject(node).

/* Subset of TN ids that correspond to edge TNs. */
input relation EdgeTN(tn: tnid_t)

/* Aggregate all edge TN ids.  This assumes that TNs are a smal fraction of all
 * TNs, so aggregating them is not too expensive. */
relation EdgeTNs(tns: Ref<TS.Set64<tnid_t>>)
EdgeTNs(ref_new(tns)) :-
    EdgeTN(tn),
    var tns = Aggregate((), TS.group2set(tn)).

/* Objects that are part of a LRP{mcast=true} -> LSP -> LS chain. */
relation McastObject(mcast: entid_t)
McastObject(lrp),
McastObject(lsp),
McastObject(ls) :-
    ValidDependency(lrp, lsp),
    DdlogNode(lrp, EntityLRP{.mcast = true}),
    DdlogNode(lsp, EntityLSP{}),
    ValidDependency(lsp, ls),
    DdlogNode(ls, EntityLS).

/* used for query all From nodes for a given To node, or query all To nodes for
 * a given From node
 */
input relation ToNode(to: entid_t)
input relation FromNode(fro: entid_t)
relation Froms(from :entid_t, to :entid_t )
relation Tos(from :entid_t, to :entid_t )

Froms(from, to) :- ToNode(to), ExtDdlogDependency(from, to).
Tos(from, to) :- FromNode(from), ExtDdlogDependency(from, to).

output relation FromsList(froms: Set<entid_t>, to: entid_t)
FromsList(froms, to) :-
    Froms(from, to),
    var froms = Aggregate((to), group2set(from)).

output relation TosList(from: entid_t, tos: Set<entid_t>)
TosList(from, tos) :-
    Tos(from, to),
    var tos = Aggregate((from), group2set(to)).

/* getSpan() */
input relation QuerySpanNode(entity: entid_t)
output relation QuerySpan(entity: entid_t, tns: Ref<TS.Set64<tnid_t>>)
QuerySpan(node, span):- QuerySpanNode(node), Span(node, span).


/* dump span table */
input relation IsDumpSpan()
output relation DumpSpan(entity: entid_t, tns: Ref<TS.Set64<tnid_t>>)
DumpSpan(node, span):- IsDumpSpan(), Span(node, span).

/* dump ExtDdlogDependency */
input relation IsDumpRelation()
output relation DumpRelation(parent: entid_t, child: entid_t)
DumpRelation(parent, child):- IsDumpRelation(), ExtDdlogDependency(parent, child).

