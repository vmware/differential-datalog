typedef R1 = bigint

input relation R1[R1]
input relation R2[(bigint, bigint)]

R1[1].
R2[(1,2)].

input relation R3(f1: bigint, f2: bool)
relation R4[R3]
relation R5[bigint]
relation R6(f: bigint)

R4[x] :- R3[x].
R5[x.f1] :- R3[x].
R6(x.f1) :- R3[x].

input relation X(b: bigint, c: R3, d: R1)
relation Z(x: bigint, y: R3)
Z(a.b, a.c) :- X[a].

input relation Y(b: bigint, e: string)
relation T(x: bigint, y: string)

T(a.b, e) :- X[a], Y(a.d, e).

typedef R7 = R7{f1: bigint, f2: bit<16>}
           | R7Other

relation R7[R7]

R7(1,2).
R7[R7{1,3}].
R7[R7Other].

typedef S = S {
    f1: (bool, bool),
    f2: bit<32>
}
input relation Table1(id: bit<64>, name: string)
input relation Table2(name: string, f2: bigint, f3: S)

relation Table12(id: bit<128>, name: string, f3: S)

Table12(hash128((id,name,f2,f3)), name, f3) :- Table1(id, name), Table2(name, f2, f3).
