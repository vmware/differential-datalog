typedef Flow = Flow{lr: bigint, stage: stage, prio: bigint, matchStr: string, actionStr: string}
typedef Load_Balancer = Load_Balancer{lb: bigint, ls: bigint, ip_addresses: string, protocol: std.Option<string>, name: string}
typedef Logical_Router = Logical_Router{lr: bigint}
typedef Logical_Router_Port = Logical_Router_Port{name: string, lr: bigint, mac: string, enabled: bool}
typedef Logical_Switch = Logical_Switch{ls: bigint, has_stateful_acl: bool, has_load_balancer: bool}
typedef Logical_Switch_Port = Logical_Switch_Port{lsp: bigint, ls: bigint, parent: std.Option<string>, tag_request: std.Option<bigint>, tag: std.Option<bigint>, up: std.Option<bool>, enabled: bool, port_security_not_empty: bool, port_security_l2: string, port_security_ip_ingress: string, port_security_ip_egress: string, port_security_nd: string, name: string, _type: string, macs: string}
typedef Logical_Switch_Port_IP = Logical_Switch_Port_IP{lspip: bigint, ip_version: bigint, lsp: bigint, lsp_name: string, lsp_enabled: bool, lsp_type: string, ls: bigint, mac: string, ip: string, sn_ip: string, up: bool}
typedef log.log_level_t = signed<32>
typedef log.module_t = signed<32>
typedef stage = LS_IN_ACL{} | LS_OUT_ACL{} | LR_IN_ADMISSION{} | LR_IN_IP_INPUT{} | LR_IN_UNSNAT{} | LR_OUT_SNAT{} | LR_IN_DNAT{} | LR_IN_ARP_RESOLVE{} | LR_IN_ARP_REQUEST{} | LR_IN_DEFRAG{} | LR_OUT_DELIVERY{} | LS_IN_LB{} | LS_OUT_LB{} | LS_IN_PRE_ACL{} | LS_OUT_PRE_ACL{} | LS_IN_PRE_LB{} | LS_OUT_PRE_LB{} | LS_IN_PRE_STATEFUL{} | LS_OUT_PRE_STATEFUL{} | LS_IN_STATEFUL{} | LS_OUT_STATEFUL{} | LS_IN_PORT_SEC_L2{} | LS_IN_PORT_SEC_IP{} | LS_IN_PORT_SEC_ND{} | LS_IN_ARP_RSP{} | LS_IN_DHCP_OPTIONS{} | LS_IN_DHCP_RESPONSE{} | LS_IN_L2_LKUP{} | LS_OUT_PORT_SEC_IP{} | LS_OUT_PORT_SEC_L2{}
typedef std.Either<'A,'B> = std.Left{l: 'A} | std.Right{r: 'B}
extern type std.Group<'K,'V>
extern type std.Map<'K,'V>
#[rust = "serde(from=\"Option<A>\", into=\"Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
typedef std.Option<'A> = std.None{} | std.Some{x: 'A}
#[size = 8]
extern type std.Ref<'A>
typedef std.Result<'V,'E> = std.Ok{res: 'V} | std.Err{err: 'E}
extern type std.Set<'A>
extern type std.Vec<'A>
typedef std.s128 = signed<128>
typedef std.s16 = signed<16>
typedef std.s32 = signed<32>
typedef std.s64 = signed<64>
typedef std.s8 = signed<8>
typedef std.u128 = bit<128>
typedef std.u16 = bit<16>
typedef std.u32 = bit<32>
typedef std.u64 = bit<64>
typedef std.u8 = bit<8>
extern function log.log (module: log.module_t, level: log.log_level_t, msg: string): bool
extern function std.__builtin_2string (x: 'X): string
extern function std.deref (x: std.Ref<'A>): 'A
extern function std.group2map (g: std.Group<'K1,('K2, 'V)>): std.Map<'K2,'V>
extern function std.group2set (g: std.Group<'K,'V>): std.Set<'V>
extern function std.group2setmap (g: std.Group<'K1,('K2, 'V)>): std.Map<'K2,std.Set<'V>>
extern function std.group2vec (g: std.Group<'K,'V>): std.Vec<'V>
extern function std.group_count (g: std.Group<'K,'V>): bit<64>
extern function std.group_first (g: std.Group<'K,'V>): 'V
extern function std.group_key (g: std.Group<'K,'V>): 'K
extern function std.group_max (g: std.Group<'K,'V>): 'V
extern function std.group_min (g: std.Group<'K,'V>): 'V
extern function std.group_nth (g: std.Group<'K,'V>, n: bit<64>): std.Option<'V>
extern function std.group_set_unions (g: std.Group<'K,std.Set<'A>>): std.Set<'A>
extern function std.group_setref_unions (g: std.Group<'K,std.Ref<std.Set<'A>>>): std.Ref<std.Set<'A>>
extern function std.group_sum (g: std.Group<'K,'V>): 'V
function std.group_unzip (g: std.Group<'K,('X, 'Y)>): (std.Vec<'X>, std.Vec<'Y>) =
    ((var xs: std.Vec<'X>) = std.vec_empty();
     ((var ys: std.Vec<'Y>) = std.vec_empty();
      (for (v in g) {
           ((var x, var y) = v;
            (std.vec_push(xs, x);
             std.vec_push(ys, y)))
       };
       (xs, ys))))
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
extern function std.htonl (x: bit<32>): bit<32>
extern function std.htons (x: bit<16>): bit<16>
function std.is_err (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> false,
        std.Err{.err=_} -> true
    }
function std.is_none (x: std.Option<'A>): bool =
    match (x) {
        std.None{} -> true,
        _ -> false
    }
function std.is_ok (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> true,
        std.Err{.err=_} -> false
    }
function std.is_some (x: std.Option<'A>): bool =
    match (x) {
        std.Some{.x=_} -> true,
        _ -> false
    }
extern function std.map_contains_key (m: std.Map<'K,'V>, k: 'K): bool
extern function std.map_empty (): std.Map<'K,'V>
extern function std.map_get (m: std.Map<'K,'V>, k: 'K): std.Option<'V>
extern function std.map_insert (m: mut std.Map<'K,'V>, k: 'K, v: 'V): ()
extern function std.map_insert_imm (m: std.Map<'K,'V>, k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_is_empty (m: std.Map<'K,'V>): bool
extern function std.map_remove (m: mut std.Map<'K,'V>, k: 'K): ()
extern function std.map_singleton (k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_union (m1: std.Map<'K,'V>, m2: std.Map<'K,'V>): std.Map<'K,'V>
function std.max (x: 'A, y: 'A): 'A =
    if (x > y) {
        x
    } else {
          y
      }
function std.min (x: 'A, y: 'A): 'A =
    if (x < y) {
        x
    } else {
          y
      }
extern function std.ntohl (x: bit<32>): bit<32>
extern function std.ntohs (x: bit<16>): bit<16>
function std.option2set (o: std.Option<'X>): std.Set<'X> =
    match (o) {
        std.Some{.x=var x} -> std.set_singleton(x),
        std.None{} -> std.set_empty()
    }
function std.option2vec (o: std.Option<'X>): std.Vec<'X> =
    match (o) {
        std.Some{.x=var x} -> std.vec_singleton(x),
        std.None{} -> std.vec_empty()
    }
function std.option_unwrap_or (x: std.Option<'A>, def: 'A): 'A =
    match (x) {
        std.Some{.x=var v} -> v,
        std.None{} -> def
    }
extern function std.option_unwrap_or_default (opt: std.Option<'A>): 'A
extern function std.parse_dec_i64 (s: string): std.Option<signed<64>>
extern function std.parse_dec_u64 (s: string): std.Option<bit<64>>
extern function std.pow32 (base: 'A, exp: bit<32>): 'A
extern function std.range (from: 'A, to: 'A, step: 'A): std.Vec<'A>
extern function std.ref_new (x: 'A): std.Ref<'A>
function std.result_unwrap_or (res: std.Result<'V,'E>, def: 'V): 'V =
    match (res) {
        std.Ok{.res=var v} -> v,
        std.Err{.err=_} -> def
    }
extern function std.result_unwrap_or_default (res: std.Result<'V,'E>): 'V
extern function std.set2vec (s: std.Set<'A>): std.Vec<'A>
extern function std.set_contains (s: std.Set<'X>, v: 'X): bool
extern function std.set_empty (): std.Set<'X>
extern function std.set_insert (s: mut std.Set<'X>, v: 'X): ()
extern function std.set_insert_imm (s: std.Set<'X>, v: 'X): std.Set<'X>
extern function std.set_intersection (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_is_empty (s: std.Set<'X>): bool
extern function std.set_nth (s: std.Set<'X>, n: bit<64>): std.Option<'X>
extern function std.set_singleton (x: 'X): std.Set<'X>
extern function std.set_size (s: std.Set<'X>): bit<64>
extern function std.set_union (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_unions (sets: std.Vec<std.Set<'X>>): std.Set<'X>
extern function std.str_to_lower (s: string): string
extern function std.string_contains (s1: string, s2: string): bool
extern function std.string_ends_with (s: string, suffix: string): bool
extern function std.string_join (strings: std.Vec<string>, sep: string): string
extern function std.string_len (s: string): bit<64>
extern function std.string_replace (s: string, from: string, to: string): string
extern function std.string_reverse (s: string): string
extern function std.string_split (s: string, sep: string): std.Vec<string>
extern function std.string_starts_with (s: string, prefix: string): bool
extern function std.string_substr (s: string, start: bit<64>, end: bit<64>): string
extern function std.string_to_bytes (s: string): std.Vec<std.u8>
extern function std.string_to_lowercase (s: string): string
extern function std.string_to_uppercase (s: string): string
extern function std.string_trim (s: string): string
extern function std.vec2set (s: std.Vec<'A>): std.Set<'A>
extern function std.vec_append (v: mut std.Vec<'X>, other: std.Vec<'X>): ()
extern function std.vec_contains (v: std.Vec<'X>, x: 'X): bool
extern function std.vec_empty (): std.Vec<'A>
extern function std.vec_is_empty (v: std.Vec<'X>): bool
extern function std.vec_len (v: std.Vec<'X>): bit<64>
extern function std.vec_nth (v: std.Vec<'X>, n: bit<64>): std.Option<'X>
extern function std.vec_push (v: mut std.Vec<'X>, x: 'X): ()
extern function std.vec_push_imm (v: std.Vec<'X>, x: 'X): std.Vec<'X>
extern function std.vec_singleton (x: 'X): std.Vec<'X>
extern function std.vec_with_capacity (len: bit<64>): std.Vec<'A>
extern function std.vec_with_length (len: bit<64>, x: 'A): std.Vec<'A>
output relation Flow [Flow]
input relation Load_Balancer [Load_Balancer]
input relation Logical_Router [Logical_Router]
input relation Logical_Router_Port [Logical_Router_Port]
input relation Logical_Switch [Logical_Switch]
input relation Logical_Switch_Port [Logical_Switch_Port]
input relation Logical_Switch_Port_IP [Logical_Switch_Port_IP]
Flow(.lr=lr.lr, .stage=LR_IN_ADMISSION{}, .prio=100, .matchStr="vlan.present || eth.src[40]", .actionStr="{ drop; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lrp.lr, .stage=LR_IN_ADMISSION{}, .prio=50, .matchStr=(((("inport == " ++ p) ++ " && (eth.mcast || eth.dst == ") ++ e) ++ ")"), .actionStr="{ next; }") :- Logical_Router_Port[(lrp@ Logical_Router_Port{.name=_, .lr=_, .mac=_, .enabled=true})], var p = lrp.name, var e = lrp.mac.
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=100, .matchStr="ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)", .actionStr="{ drop; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=90, .matchStr="arp.op == 2", .actionStr="put_arp(inport, arp.spa, arp.sha);") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=50, .matchStr="eth.bcast", .actionStr="{ drop; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=30, .matchStr="ip4 && ip.ttl == {0, 1}", .actionStr="{ drop; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=90, .matchStr="nd_na", .actionStr="{ put_nd(inport, nd.target, nd.tll); }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=80, .matchStr="nd_na", .actionStr="{ put_nd(inport, ip6.src, nd.sll); }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_DEFRAG{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_UNSNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_OUT_SNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_DNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_RESOLVE{}, .prio=0, .matchStr="ip4", .actionStr="{ get_arp(outport, reg0); next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_RESOLVE{}, .prio=0, .matchStr="ip6", .actionStr="{ get_nd(outport, xxreg0); next; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_REQUEST{}, .prio=100, .matchStr="eth.dst == 00:00:00:00:00:00", .actionStr="{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_REQUEST{}, .prio=0, .matchStr="1", .actionStr="{ output; }") :- Logical_Router[(lr@ Logical_Router{.lr=_})].
Flow(.lr=lrp.lr, .stage=LR_OUT_DELIVERY{}, .prio=100, .matchStr=("outport == " ++ p), .actionStr="{ output; }") :- Logical_Router_Port[(lrp@ Logical_Router_Port{.name=_, .lr=_, .mac=_, .enabled=true})], var p = lrp.name.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=0, .matchStr="1", .actionStr="next;") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=0, .matchStr="1", .actionStr="next;") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=1, .matchStr="ip && (!ct.est || (ct.est && ct_label.blocked))", .actionStr="{ reg0[1] = 1; next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=1, .matchStr="ip && (!ct.est || (ct.est && ct_label.blocked))", .actionStr="{ reg0[1] = 1; next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="ct.inv || (ct.est && ct.rpl && ct_label.blocked)", .actionStr="{ drop; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="ct.inv || (ct.est && ct.rpl && ct_label.blocked)", .actionStr="{ drop; };") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_LB{}, .prio=65535, .matchStr="ct.est && !ct.rel && !ct.new && !ct.inv", .actionStr="\n            reg0[0] = 1;\n            next;\n        };") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_OUT_LB{}, .prio=65535, .matchStr="ct.est && !ct.rel && !ct.new && !ct.inv", .actionStr="\n            reg0[0] = 1;\n            next;\n        };") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=110, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=110, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=100, .matchStr="ip", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=100, .matchStr="ip", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=true, .has_load_balancer=_})].
Flow(.lr=lb.ls, .stage=LS_IN_PRE_LB{}, .prio=100, .matchStr=("ip4.dst == " ++ a), .actionStr="{ reg0[0] = 1; next; }") :- Load_Balancer[(lb@ Load_Balancer{.lb=_, .ls=_, .ip_addresses=_, .protocol=_, .name=_})], var a = lb.ip_addresses.
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_LB{}, .prio=100, .matchStr="ip4", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_IN_PRE_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_STATEFUL{}, .prio=100, .matchStr="reg0[0] /* conntrack.defrag */", .actionStr="{ ct_next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_STATEFUL{}, .prio=100, .matchStr="reg0[0] /* conntrack.defrag */", .actionStr="{ ct_next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=100, .matchStr="reg0[1] == 1", .actionStr="{\n        ct_commit(ct_label=0/1);\n        next;\n    }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=100, .matchStr="reg0[1] == 1", .actionStr="{\n        ct_commit(ct_label=0/1);\n        next;\n    }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=100, .matchStr="reg0[2] == 1", .actionStr="{ ct_lb; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=100, .matchStr="reg0[2] == 1", .actionStr="{ ct_lb; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=100, .matchStr="vlan.present", .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=100, .matchStr="eth.src[40]", .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=50, .matchStr=((("inport == \"" ++ p) ++ "\" && eth.src == ") ++ l2), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=90, .matchStr=(((("inport == \"" ++ p) ++ "\" && (") ++ ip) ++ "))"), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=80, .matchStr=((("inport == \"" ++ p) ++ "\" && ip && eth.src == ") ++ l2), .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=90, .matchStr=(((("inport == \"" ++ p) ++ "\" && (") ++ nd) ++ ")"), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=80, .matchStr=(("inport == \"" ++ p) ++ "\" && (arp || nd)"), .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=50, .matchStr=(("inport == \"" ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd, (not lsp.port_security_not_empty).
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=(("inport == \"" ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], (lsp._type == "localnet"), var p = lsp.name.
Flow(.lr=ls.ls, .stage=LS_IN_ARP_RSP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=50, .matchStr=(("arp.tpa == " ++ a) ++ " && arp.op == 1"), .actionStr=(((((((("\n                arp.tpa == " ++ a) ++ " && arp.op == 1) {\n                eth.dst = eth.src;\n                eth.src = ") ++ e) ++ ";\n                arp.op = 2;     /* ARP reply */\n                arp.tha = arp.sha;\n                arp.sha = ") ++ e) ++ ";\n                arp.tpa = arp.spa;\n                arp.spa = ") ++ a) ++ ";\n                outport = inport;\n                flags.loopback = 1;\n                output;\n            };")) :- Logical_Switch_Port_IP[(lspip@ Logical_Switch_Port_IP{.lspip=_, .ip_version=_, .lsp=_, .lsp_name=_, .lsp_enabled=_, .lsp_type=_, .ls=_, .mac=_, .ip=_, .sn_ip=_, .up=true})], var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name, (lspip.ip_version == 4).
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=(((("arp.tpa == " ++ a) ++ " && arp.op == 1 && inport == \"") ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port_IP[(lspip@ Logical_Switch_Port_IP{.lspip=_, .ip_version=_, .lsp=_, .lsp_name=_, .lsp_enabled=_, .lsp_type=_, .ls=_, .mac=_, .ip=_, .sn_ip=_, .up=true})], var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name, (lspip.ip_version == 4).
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=50, .matchStr=((((("nd_ns && ip6.dst == {" ++ a) ++ ", ") ++ s) ++ "} && nd.target == ") ++ a), .actionStr=(((((((("{\n                     nd_na {\n                        eth.src = " ++ e) ++ ";\n                        ip6.src = ") ++ a) ++ ";\n                        nd.target = ") ++ a) ++ ";\n                        nd.tll = ") ++ e) ++ ";\n                        outport = inport;\n                        flags.loopback = 1;\n                        output;\n                    };\n                }")) :- Logical_Switch_Port_IP[(lspip@ Logical_Switch_Port_IP{.lspip=_, .ip_version=_, .lsp=_, .lsp_name=_, .lsp_enabled=_, .lsp_type=_, .ls=_, .mac=_, .ip=_, .sn_ip=_, .up=true})], var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name, (not (lspip.ip_version == 4)), var s = lspip.sn_ip.
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=[| nd_ns && ip6.dst == {${a}, ${s}} && nd.target == ${a}
                     && inport == \"${p}\"|], .actionStr="{ next; }") :- Logical_Switch_Port_IP[(lspip@ Logical_Switch_Port_IP{.lspip=_, .ip_version=_, .lsp=_, .lsp_name=_, .lsp_enabled=_, .lsp_type=_, .ls=_, .mac=_, .ip=_, .sn_ip=_, .up=true})], var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name, (not (lspip.ip_version == 4)), var s = lspip.sn_ip.
Flow(.lr=ls.ls, .stage=LS_IN_DHCP_OPTIONS{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_DHCP_RESPONSE{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_IN_L2_LKUP{}, .prio=100, .matchStr="eth.mcast", .actionStr="{\n        outport = \"_MC_flood\";\n        output;\n    };") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=lsp.ls, .stage=LS_IN_L2_LKUP{}, .prio=50, .matchStr=(("eth.dst == {" ++ m) ++ "}"), .actionStr=[|{
                outport = "${P}";
                output;
            }|]) :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], (lsp.macs != ""), var p = lsp.name, var m = lsp.macs.
Flow(.lr=ls.ls, .stage=LS_IN_L2_LKUP{}, .prio=0, .matchStr="1", .actionStr="{\n        outport = \"_MC_unknown\";\n        output;\n    }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=90, .matchStr=(((("\"outport == \"" ++ p) ++ "\" && (") ++ ip) ++ ")"), .actionStr="{ next; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=80, .matchStr=((("\"outport == \"" ++ p) ++ "\" && ip && eth.dst == ") ++ l2), .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress, lsp.port_security_not_empty.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=50, .matchStr=((("outport == \"" ++ p) ++ "\" && eth.dst == ") ++ l2), .actionStr="{ output; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress, lsp.enabled.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=150, .matchStr=(("outport == \"" ++ p) ++ "\""), .actionStr="{ drop; }") :- Logical_Switch_Port[(lsp@ Logical_Switch_Port{.lsp=_, .ls=_, .parent=_, .tag_request=_, .tag=_, .up=_, .enabled=_, .port_security_not_empty=_, .port_security_l2=_, .port_security_ip_ingress=_, .port_security_ip_egress=_, .port_security_nd=_, .name=_, ._type=_, .macs=_})], var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress, (not lsp.enabled).
Flow(.lr=ls.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
Flow(.lr=ls.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=100, .matchStr="eth.mcast", .actionStr="{ output; }") :- Logical_Switch[(ls@ Logical_Switch{.ls=_, .has_stateful_acl=_, .has_load_balancer=_})].
