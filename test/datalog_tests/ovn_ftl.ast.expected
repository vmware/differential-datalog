typedef Flow = Flow{lr: bigint, stage: stage, prio: bigint, matchStr: string, actionStr: string}
typedef Load_Balancer = Load_Balancer{lb: bigint, ls: bigint, ip_addresses: string, protocol: option_t<string>, name: string}
typedef Logical_Router = Logical_Router{lr: bigint}
typedef Logical_Router_Port = Logical_Router_Port{name: string, lr: bigint, mac: string, enabled: bool}
typedef Logical_Switch = Logical_Switch{ls: bigint, has_stateful_acl: bool, has_load_balancer: bool}
typedef Logical_Switch_Port = Logical_Switch_Port{lsp: bigint, ls: bigint, parent: option_t<string>, tag_request: option_t<bigint>, tag: option_t<bigint>, up: option_t<bool>, enabled: bool, port_security_not_empty: bool, port_security_l2: string, port_security_ip_ingress: string, port_security_ip_egress: string, port_security_nd: string, name: string, _type: string, macs: string}
typedef Logical_Switch_Port_IP = Logical_Switch_Port_IP{lspip: bigint, ip_version: bigint, lsp: bigint, lsp_name: string, lsp_enabled: bool, lsp_type: string, ls: bigint, mac: string, ip: string, sn_ip: string, up: bool}
typedef option_t<'A> = None{} | Some{value: 'A}
typedef stage = LS_IN_ACL{} | LS_OUT_ACL{} | LR_IN_ADMISSION{} | LR_IN_IP_INPUT{} | LR_IN_UNSNAT{} | LR_OUT_SNAT{} | LR_IN_DNAT{} | LR_IN_ARP_RESOLVE{} | LR_IN_ARP_REQUEST{} | LR_IN_DEFRAG{} | LR_OUT_DELIVERY{} | LS_IN_LB{} | LS_OUT_LB{} | LS_IN_PRE_ACL{} | LS_OUT_PRE_ACL{} | LS_IN_PRE_LB{} | LS_OUT_PRE_LB{} | LS_IN_PRE_STATEFUL{} | LS_OUT_PRE_STATEFUL{} | LS_IN_STATEFUL{} | LS_OUT_STATEFUL{} | LS_IN_PORT_SEC_L2{} | LS_IN_PORT_SEC_IP{} | LS_IN_PORT_SEC_ND{} | LS_IN_ARP_RSP{} | LS_IN_DHCP_OPTIONS{} | LS_IN_DHCP_RESPONSE{} | LS_IN_L2_LKUP{} | LS_OUT_PORT_SEC_IP{} | LS_OUT_PORT_SEC_L2{}
extern type std.Group<'A>
extern type std.Map<'K,'V>
extern type std.Set<'A>
extern type std.Vec<'A>
extern function std.__builtin_2string (x: 'X): string
extern function std.count (g: std.Group<'A>): bit<64>
extern function std.group2map (g: std.Group<('K, 'V)>): std.Map<'K,'V>
extern function std.group2set (g: std.Group<'A>): std.Set<'A>
extern function std.group2vec (g: std.Group<'A>): std.Vec<'A>
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
output relation Flow [Flow]
input relation Load_Balancer [Load_Balancer]
input relation Logical_Router [Logical_Router]
input relation Logical_Router_Port [Logical_Router_Port]
input relation Logical_Switch [Logical_Switch]
input relation Logical_Switch_Port [Logical_Switch_Port]
input relation Logical_Switch_Port_IP [Logical_Switch_Port_IP]
Flow(.lr=lr.lr, .stage=LR_IN_ADMISSION{}, .prio=100, .matchStr="vlan.present || eth.src[40]", .actionStr="{ drop; }") :- Logical_Router[lr].
Flow(.lr=lrp.lr, .stage=LR_IN_ADMISSION{}, .prio=50, .matchStr=(((("inport == " ++ p) ++ " && (eth.mcast || eth.dst == ") ++ e) ++ ")"), .actionStr="{ next; }") :- Logical_Router_Port[lrp], lrp.enabled, var p = lrp.name, var e = lrp.mac.
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=100, .matchStr="ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)", .actionStr="{ drop; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=90, .matchStr="arp.op == 2", .actionStr="put_arp(inport, arp.spa, arp.sha);") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=50, .matchStr="eth.bcast", .actionStr="{ drop; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=30, .matchStr="ip4 && ip.ttl == {0, 1}", .actionStr="{ drop; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=90, .matchStr="nd_na", .actionStr="{ put_nd(inport, nd.target, nd.tll); }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=80, .matchStr="nd_na", .actionStr="{ put_nd(inport, ip6.src, nd.sll); }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_IP_INPUT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_DEFRAG{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_UNSNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_OUT_SNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_DNAT{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_RESOLVE{}, .prio=0, .matchStr="ip4", .actionStr="{ get_arp(outport, reg0); next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_RESOLVE{}, .prio=0, .matchStr="ip6", .actionStr="{ get_nd(outport, xxreg0); next; }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_REQUEST{}, .prio=100, .matchStr="eth.dst == 00:00:00:00:00:00", .actionStr="{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }") :- Logical_Router[lr].
Flow(.lr=lr.lr, .stage=LR_IN_ARP_REQUEST{}, .prio=0, .matchStr="1", .actionStr="{ output; }") :- Logical_Router[lr].
Flow(.lr=lrp.lr, .stage=LR_OUT_DELIVERY{}, .prio=100, .matchStr=(("outport == " ++ p) ++ ""), .actionStr="{ output; }") :- Logical_Router_Port[lrp], lrp.enabled, var p = lrp.name.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=0, .matchStr="1", .actionStr="next;") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=0, .matchStr="1", .actionStr="next;") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=1, .matchStr="ip && (!ct.est || (ct.est && ct_label.blocked))", .actionStr="{ reg0[1] = 1; next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=1, .matchStr="ip && (!ct.est || (ct.est && ct_label.blocked))", .actionStr="{ reg0[1] = 1; next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="ct.inv || (ct.est && ct.rpl && ct_label.blocked)", .actionStr="{ drop; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="ct.inv || (ct.est && ct.rpl && ct_label.blocked)", .actionStr="{ drop; };") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="(ct.est && !ct.rel && !ct.new && !ct.inv && ct.rpl && !ct_label.blocked)", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="!ct.est && ct.rel && !ct.new && !ct.inv && !ct_label.blocked", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_ACL{}, .prio=65535, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_ACL{}, .prio=65535, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_LB{}, .prio=65535, .matchStr="ct.est && !ct.rel && !ct.new && !ct.inv", .actionStr="\n            reg0[0] = 1;\n            next;\n        };") :- Logical_Switch[ls], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_OUT_LB{}, .prio=65535, .matchStr="ct.est && !ct.rel && !ct.new && !ct.inv", .actionStr="\n            reg0[0] = 1;\n            next;\n        };") :- Logical_Switch[ls], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=110, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=110, .matchStr="nd", .actionStr="{ next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_IN_PRE_ACL{}, .prio=100, .matchStr="ip", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_ACL{}, .prio=100, .matchStr="ip", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[ls], ls.has_stateful_acl.
Flow(.lr=lb.ls, .stage=LS_IN_PRE_LB{}, .prio=100, .matchStr=(("ip4.dst == " ++ a) ++ ""), .actionStr="{ reg0[0] = 1; next; }") :- Load_Balancer[lb], var a = lb.ip_addresses.
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_LB{}, .prio=100, .matchStr="ip4", .actionStr="{ reg0[0] = 1; next; }") :- Logical_Switch[ls], ls.has_load_balancer.
Flow(.lr=ls.ls, .stage=LS_IN_PRE_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_LB{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_PRE_STATEFUL{}, .prio=100, .matchStr="reg0[0] /* conntrack.defrag */", .actionStr="{ ct_next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_PRE_STATEFUL{}, .prio=100, .matchStr="reg0[0] /* conntrack.defrag */", .actionStr="{ ct_next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=100, .matchStr="reg0[1] == 1", .actionStr="{\n        ct_commit(ct_label=0/1);\n        next;\n    }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=100, .matchStr="reg0[1] == 1", .actionStr="{\n        ct_commit(ct_label=0/1);\n        next;\n    }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_STATEFUL{}, .prio=100, .matchStr="reg0[2] == 1", .actionStr="{ ct_lb; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_STATEFUL{}, .prio=100, .matchStr="reg0[2] == 1", .actionStr="{ ct_lb; }") :- Logical_Switch[ls].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=100, .matchStr="vlan.present", .actionStr="{ drop; }") :- Logical_Switch_Port[lsp].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=100, .matchStr="eth.src[40]", .actionStr="{ drop; }") :- Logical_Switch_Port[lsp].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=50, .matchStr=(((("inport == \"" ++ p) ++ "\" && eth.src == ") ++ l2) ++ ""), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], lsp.enabled, lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=90, .matchStr=(((("inport == \"" ++ p) ++ "\" && (") ++ ip) ++ "))"), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], lsp.enabled, lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=80, .matchStr=(((("inport == \"" ++ p) ++ "\" && ip && eth.src == ") ++ l2) ++ ""), .actionStr="{ drop; }") :- Logical_Switch_Port[lsp], lsp.enabled, lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=90, .matchStr=(((("inport == \"" ++ p) ++ "\" && (") ++ nd) ++ ")"), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], lsp.enabled, lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=80, .matchStr=(("inport == \"" ++ p) ++ "\" && (arp || nd)"), .actionStr="{ drop; }") :- Logical_Switch_Port[lsp], lsp.enabled, lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_L2{}, .prio=50, .matchStr=(("inport == \"" ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], lsp.enabled, (not lsp.port_security_not_empty), var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_ingress, var nd = lsp.port_security_nd.
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_ND{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch_Port[lsp].
Flow(.lr=lsp.ls, .stage=LS_IN_PORT_SEC_IP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch_Port[lsp].
Flow(.lr=lsp.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=(("inport == \"" ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], (lsp._type == "localnet"), var p = lsp.name.
Flow(.lr=ls.ls, .stage=LS_IN_ARP_RSP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=50, .matchStr=(("arp.tpa == " ++ a) ++ " && arp.op == 1"), .actionStr=(((((((("\n                arp.tpa == " ++ a) ++ " && arp.op == 1) {\n                eth.dst = eth.src;\n                eth.src = ") ++ e) ++ ";\n                arp.op = 2;     /* ARP reply */\n                arp.tha = arp.sha;\n                arp.sha = ") ++ e) ++ ";\n                arp.tpa = arp.spa;\n                arp.spa = ") ++ a) ++ ";\n                outport = inport;\n                flags.loopback = 1;\n                output;\n            };")) :- Logical_Switch_Port_IP[lspip], lspip.up, (lspip.ip_version == 4), var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name.
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=(((("arp.tpa == " ++ a) ++ " && arp.op == 1 && inport == \"") ++ p) ++ "\""), .actionStr="{ next; }") :- Logical_Switch_Port_IP[lspip], lspip.up, (lspip.ip_version == 4), var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name.
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=50, .matchStr=(((((("nd_ns && ip6.dst == {" ++ a) ++ ", ") ++ s) ++ "} && nd.target == ") ++ a) ++ ""), .actionStr=(((((((("{\n                     nd_na {\n                        eth.src = " ++ e) ++ ";\n                        ip6.src = ") ++ a) ++ ";\n                        nd.target = ") ++ a) ++ ";\n                        nd.tll = ") ++ e) ++ ";\n                        outport = inport;\n                        flags.loopback = 1;\n                        output;\n                    };\n                }")) :- Logical_Switch_Port_IP[lspip], lspip.up, (not (lspip.ip_version == 4)), var s = lspip.sn_ip, var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name.
Flow(.lr=lspip.ls, .stage=LS_IN_ARP_RSP{}, .prio=100, .matchStr=" nd_ns && ip6.dst == {${a}, ${s}} && nd.target == ${a}\n                     && inport == \\\"${p}\\\"", .actionStr="{ next; }") :- Logical_Switch_Port_IP[lspip], lspip.up, (not (lspip.ip_version == 4)), var s = lspip.sn_ip, var e = lspip.mac, var a = lspip.ip, var p = lspip.lsp_name.
Flow(.lr=ls.ls, .stage=LS_IN_DHCP_OPTIONS{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_DHCP_RESPONSE{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_IN_L2_LKUP{}, .prio=100, .matchStr="eth.mcast", .actionStr="{\n        outport = \"_MC_flood\";\n        output;\n    };") :- Logical_Switch[ls].
Flow(.lr=lsp.ls, .stage=LS_IN_L2_LKUP{}, .prio=50, .matchStr=(("eth.dst == {" ++ m) ++ "}"), .actionStr="{\n                outport = \"${P}\";\n                output;\n            }") :- Logical_Switch_Port[lsp], (lsp.macs != ""), var p = lsp.name, var m = lsp.macs.
Flow(.lr=ls.ls, .stage=LS_IN_L2_LKUP{}, .prio=0, .matchStr="1", .actionStr="{\n        outport = \"_MC_unknown\";\n        output;\n    }") :- Logical_Switch[ls].
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=90, .matchStr=(((("\"outport == \"" ++ p) ++ "\" && (") ++ ip) ++ ")"), .actionStr="{ next; }") :- Logical_Switch_Port[lsp], lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=80, .matchStr=(((("\"outport == \"" ++ p) ++ "\" && ip && eth.dst == ") ++ l2) ++ ""), .actionStr="{ drop; }") :- Logical_Switch_Port[lsp], lsp.port_security_not_empty, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=50, .matchStr=(((("outport == \"" ++ p) ++ "\" && eth.dst == ") ++ l2) ++ ""), .actionStr="{ output; }") :- Logical_Switch_Port[lsp], lsp.enabled, var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress.
Flow(.lr=lsp.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=150, .matchStr=(("outport == \"" ++ p) ++ "\""), .actionStr="{ drop; }") :- Logical_Switch_Port[lsp], (not lsp.enabled), var p = lsp.name, var l2 = lsp.port_security_l2, var ip = lsp.port_security_ip_egress.
Flow(.lr=ls.ls, .stage=LS_OUT_PORT_SEC_IP{}, .prio=0, .matchStr="1", .actionStr="{ next; }") :- Logical_Switch[ls].
Flow(.lr=ls.ls, .stage=LS_OUT_PORT_SEC_L2{}, .prio=100, .matchStr="eth.mcast", .actionStr="{ output; }") :- Logical_Switch[ls].
