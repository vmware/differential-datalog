**** Creating logical routers ****

**** Flows ****

Flow{0,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{0,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{0,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{0,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{0,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{0,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{0,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{0,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{0,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{0,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{0,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{0,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{0,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{1,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{1,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{1,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{1,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{1,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{1,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{1,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{1,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{1,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{1,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{1,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{1,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{1,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{2,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{2,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{2,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{2,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{2,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{2,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{2,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{2,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{2,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{2,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{2,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{2,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{2,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{3,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{3,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{3,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{3,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{3,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{3,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{3,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{3,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{3,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{3,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{3,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{3,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{3,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{4,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{4,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{4,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{4,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{4,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{4,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{4,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{4,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{4,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{4,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{4,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{4,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{4,LR_IN_DEFRAG{},0,"1","{ next; }"}
**** Adding logical router ports ****

**** Flows ****

Flow{0,LR_IN_ADMISSION{},50,"inport == lrp0 && (eth.mcast || eth.dst == 00:11:22:33:44:55)","{ next; }"}
Flow{0,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{0,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{0,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{0,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{0,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{0,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{0,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{0,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{0,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{0,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{0,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{0,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{0,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{0,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{0,LR_OUT_DELIVERY{},100,"outport == lrp0","{ output; }"}
Flow{1,LR_IN_ADMISSION{},50,"inport == lrp1 && (eth.mcast || eth.dst == aa:11:22:33:44:55)","{ next; }"}
Flow{1,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{1,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{1,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{1,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{1,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{1,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{1,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{1,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{1,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{1,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{1,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{1,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{1,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{1,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{1,LR_OUT_DELIVERY{},100,"outport == lrp1","{ output; }"}
Flow{2,LR_IN_ADMISSION{},50,"inport == lrp2 && (eth.mcast || eth.dst == bb:11:22:33:44:55)","{ next; }"}
Flow{2,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{2,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{2,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{2,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{2,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{2,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{2,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{2,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{2,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{2,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{2,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{2,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{2,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{2,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{2,LR_OUT_DELIVERY{},100,"outport == lrp2","{ output; }"}
Flow{3,LR_IN_ADMISSION{},50,"inport == lrp3 && (eth.mcast || eth.dst == cc:11:22:33:44:55)","{ next; }"}
Flow{3,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{3,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{3,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{3,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{3,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{3,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{3,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{3,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{3,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{3,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{3,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{3,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{3,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{3,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{3,LR_OUT_DELIVERY{},100,"outport == lrp3","{ output; }"}
Flow{4,LR_IN_ADMISSION{},50,"inport == lrp4 && (eth.mcast || eth.dst == dd:11:22:33:44:55)","{ next; }"}
Flow{4,LR_IN_ADMISSION{},100,"vlan.present || eth.src[40]","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},0,"1","{ next; }"}
Flow{4,LR_IN_IP_INPUT{},30,"ip4 && ip.ttl == {0, 1}","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},50,"eth.bcast","{ drop; }"}
Flow{4,LR_IN_IP_INPUT{},80,"nd_na","{ put_nd(inport, ip6.src, nd.sll); }"}
Flow{4,LR_IN_IP_INPUT{},90,"arp.op == 2","put_arp(inport, arp.spa, arp.sha);"}
Flow{4,LR_IN_IP_INPUT{},90,"nd_na","{ put_nd(inport, nd.target, nd.tll); }"}
Flow{4,LR_IN_IP_INPUT{},100,"ip4.mcast ||\n           ip4.src == 255.255.255.255 ||\n           ip4.src == 127.0.0.0/8 ||\n           ip4.dst == 127.0.0.0/8 ||\n           ip4.src == 0.0.0.0/8 ||\n           ip4.dst == 0.0.0.0/8)","{ drop; }"}
Flow{4,LR_IN_UNSNAT{},0,"1","{ next; }"}
Flow{4,LR_OUT_SNAT{},0,"1","{ next; }"}
Flow{4,LR_IN_DNAT{},0,"1","{ next; }"}
Flow{4,LR_IN_ARP_RESOLVE{},0,"ip4","{ get_arp(outport, reg0); next; }"}
Flow{4,LR_IN_ARP_RESOLVE{},0,"ip6","{ get_nd(outport, xxreg0); next; }"}
Flow{4,LR_IN_ARP_REQUEST{},0,"1","{ output; }"}
Flow{4,LR_IN_ARP_REQUEST{},100,"eth.dst == 00:00:00:00:00:00","{\n        arp {\n            eth.dst = ff:ff:ff:ff:ff:ff;\n            arp.spa = reg1;\n            arp.tpa = reg0;\n            arp.op = 1;  /* ARP request */\n            output;\n        }\n    }"}
Flow{4,LR_IN_DEFRAG{},0,"1","{ next; }"}
Flow{4,LR_OUT_DELIVERY{},100,"outport == lrp4","{ output; }"}
