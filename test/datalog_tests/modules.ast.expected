typedef Rmain = Rmain{f1: foolib.lib.Tlib, f2: foolib.ns1.m1.T1}
typedef Rout = Rout{f1: bool, f2: bigint}
typedef Tmain = Tmain{f1: foolib.ns1.m1.T1}
typedef foolib.lib.Rlib = foolib.lib.Rlib{f1: foolib.ns1.m2.T2}
typedef foolib.lib.Tlib = foolib.lib.Tlib{f1: bigint}
typedef foolib.ns1.m1.R1 = foolib.ns1.m1.R1{f1: foolib.ns1.m2.T2}
typedef foolib.ns1.m1.T1 = foolib.ns1.m1.T1{f1: bigint}
typedef foolib.ns1.m2.R2 = foolib.ns1.m2.R2{f1: bool}
typedef foolib.ns1.m2.T2 = foolib.ns1.m2.T2{f1: bigint}
extern type std.Group<'A>
extern type std.Map<'K,'V>
extern type std.Set<'A>
extern type std.Vec<'A>
function fmain (a1: foolib.lib.Rlib): foolib.ns1.m1.R1 =
    foolib.ns1.m1.R1{.f1=foolib.ns1.m2.T2{.f1=0}}
function foolib.ns1.m1.fM1 (a1: foolib.ns1.m1.T1): foolib.ns1.m1.R1 =
    foolib.ns1.m1.R1{.f1=foolib.ns1.m2.T2{.f1=a1.f1}}
extern function std.__builtin_2string (x: 'X): string
extern function std.count (g: std.Group<'A>): bit<64>
extern function std.group2map (g: std.Group<('K, 'V)>): std.Map<'K,'V>
extern function std.group2set (g: std.Group<'A>): std.Set<'A>
extern function std.group2vec (g: std.Group<'A>): std.Vec<'A>
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
input relation Rmain [Rmain]
output relation Rout [Rout]
input relation foolib.lib.Rlib [foolib.lib.Rlib]
input relation foolib.ns1.m1.R1 [foolib.ns1.m1.R1]
input relation foolib.ns1.m2.R2 [foolib.ns1.m2.R2]
Rout(.f1=q, .f2=x) :- Rmain(.f1=foolib.lib.Tlib{.f1=x}, .f2=foolib.ns1.m1.T1{.f1=y}), foolib.lib.Rlib(.f1=foolib.ns1.m2.T2{.f1=z}), foolib.ns1.m1.R1(.f1=foolib.ns1.m2.T2{.f1=p}), foolib.ns1.m2.R2(.f1=q).
