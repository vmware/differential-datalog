typedef Rmain = Rmain{f1: foolib.lib.Tlib, f2: foolib.ns1.m1.T1}
typedef Rout = Rout{f1: bool, f2: bigint}
typedef Tmain = Tmain{f1: foolib.ns1.m1.T1}
typedef foolib.lib.Rlib = foolib.lib.Rlib{f1: foolib.ns1.m2.T2}
typedef foolib.lib.Tlib = foolib.lib.Tlib{f1: bigint}
typedef foolib.ns1.m1.R1 = foolib.ns1.m1.R1{f1: foolib.ns1.m2.T2}
typedef foolib.ns1.m1.T1 = foolib.ns1.m1.T1{f1: bigint}
typedef foolib.ns1.m2.R2 = foolib.ns1.m2.R2{f1: bool}
typedef foolib.ns1.m2.T2 = foolib.ns1.m2.T2{f1: bigint}
typedef log.log_level_t = signed<32>
typedef log.module_t = signed<32>
typedef redist.BiEdge = redist.BiEdge{parent: redist.entid_t, child: redist.entid_t}
typedef redist.DdlogBinding = redist.DdlogBinding{tn: redist.tnid_t, entity: redist.entid_t}
typedef redist.DdlogDependency = redist.DdlogDependency{parent: redist.entid_t, child: redist.entid_t}
typedef redist.DdlogNode = redist.DdlogNode{id: redist.entid_t}
typedef redist.LabeledNode = redist.LabeledNode{node: redist.entid_t, scc: redist.entid_t}
typedef redist.SCCBinding = redist.SCCBinding{scc: redist.entid_t, bindings: std.Ref<tinyset.Set64<redist.tnid_t>>}
typedef redist.SCCEdge = redist.SCCEdge{parent: redist.entid_t, child: redist.entid_t}
typedef redist.SCCSpan = redist.SCCSpan{scc: redist.entid_t, span: std.Ref<tinyset.Set64<redist.tnid_t>>}
typedef redist.Span = redist.Span{entity: redist.entid_t, tns: std.Ref<tinyset.Set64<redist.tnid_t>>}
typedef redist.entid_t = bit<32>
typedef redist.tnid_t = bit<16>
typedef std.Either<'A,'B> = std.Left{l: 'A} | std.Right{r: 'B}
extern type std.Group<'A>
extern type std.Map<'K,'V>
typedef std.Option<'A> = std.Some{x: 'A} | std.None{}
#[size = 8]
extern type std.Ref<'A>
extern type std.Set<'A>
extern type std.Vec<'A>
extern type tinyset.Set64<'X>
function fmain (a1: foolib.lib.Rlib): foolib.ns1.m1.R1 =
    foolib.ns1.m1.R1{.f1=foolib.ns1.m2.T2{.f1=0}}
function foolib.ns1.m1.fM1 (a1: foolib.ns1.m1.T1): foolib.ns1.m1.R1 =
    foolib.ns1.m1.R1{.f1=foolib.ns1.m2.T2{.f1=a1.f1}}
extern function log.log (module: log.module_t, level: log.log_level_t, msg: string): bool
function redist.edge_child (e: redist.BiEdge): redist.entid_t =
    e.child
function redist.edge_parent (e: redist.BiEdge): redist.entid_t =
    e.parent
extern function std.__builtin_2string (x: 'X): string
extern function std.deref (x: std.Ref<'A>): 'A
extern function std.group2map (g: std.Group<('K, 'V)>): std.Map<'K,'V>
extern function std.group2set (g: std.Group<'A>): std.Set<'A>
extern function std.group2vec (g: std.Group<'A>): std.Vec<'A>
extern function std.group_count (g: std.Group<'A>): bit<64>
extern function std.group_first (g: std.Group<'A>): 'A
extern function std.group_max (g: std.Group<'A>): 'A
extern function std.group_min (g: std.Group<'A>): 'A
extern function std.group_nth (g: std.Group<'A>, n: bit<64>): std.Option<'A>
extern function std.group_set_unions (g: std.Group<std.Set<'A>>): std.Set<'A>
extern function std.group_setref_unions (g: std.Group<std.Ref<std.Set<'A>>>): std.Ref<std.Set<'A>>
extern function std.group_sum (g: std.Group<'A>): 'A
function std.group_unzip (g: std.Group<('X, 'Y)>): (std.Vec<'X>, std.Vec<'Y>) =
    ((var xs: std.Vec<'X>) = std.vec_empty();
     ((var ys: std.Vec<'Y>) = std.vec_empty();
      (for (v in g) {
           ((var x, var y) = v;
            (std.vec_push(xs, x);
             std.vec_push(ys, y)))
       };
       (xs, ys))))
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
extern function std.htonl (x: bit<32>): bit<32>
extern function std.htons (x: bit<16>): bit<16>
function std.is_none (x: std.Option<'A>): bool =
    match (x) {
        std.None{} -> true,
        _ -> false
    }
function std.is_some (x: std.Option<'A>): bool =
    match (x) {
        std.Some{.x=_} -> true,
        _ -> false
    }
extern function std.map_contains_key (m: std.Map<'K,'V>, k: 'K): bool
extern function std.map_empty (): std.Map<'K,'V>
extern function std.map_get (m: std.Map<'K,'V>, k: 'K): std.Option<'V>
extern function std.map_insert (m: mut std.Map<'K,'V>, k: 'K, v: 'V): ()
extern function std.map_insert_imm (m: std.Map<'K,'V>, k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_is_empty (m: std.Map<'K,'V>): bool
extern function std.map_remove (m: mut std.Map<'K,'V>, k: 'K): ()
extern function std.map_singleton (k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_union (m1: std.Map<'K,'V>, m2: std.Map<'K,'V>): std.Map<'K,'V>
extern function std.max (x: 'A, y: 'A): 'A
extern function std.min (x: 'A, y: 'A): 'A
extern function std.ntohl (x: bit<32>): bit<32>
extern function std.ntohs (x: bit<16>): bit<16>
extern function std.parse_dec_i64 (s: string): std.Option<signed<64>>
extern function std.parse_dec_u64 (s: string): std.Option<bit<64>>
extern function std.pow32 (base: 'A, exp: bit<32>): 'A
extern function std.range (from: 'A, to: 'A, step: 'A): std.Vec<'A>
extern function std.ref_new (x: 'A): std.Ref<'A>
extern function std.set2vec (s: std.Set<'A>): std.Vec<'A>
extern function std.set_contains (s: std.Set<'X>, v: 'X): bool
extern function std.set_empty (): std.Set<'X>
extern function std.set_insert (s: mut std.Set<'X>, v: 'X): ()
extern function std.set_insert_imm (s: std.Set<'X>, v: 'X): std.Set<'X>
extern function std.set_is_empty (s: std.Set<'X>): bool
extern function std.set_nth (s: std.Set<'X>, n: bit<64>): std.Option<'X>
extern function std.set_singleton (x: 'X): std.Set<'X>
extern function std.set_size (s: std.Set<'X>): bit<64>
extern function std.set_union (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_unions (sets: std.Vec<std.Set<'X>>): std.Set<'X>
extern function std.str_to_lower (s: string): string
extern function std.string_contains (s1: string, s2: string): bool
extern function std.string_join (strings: std.Vec<string>, sep: string): string
extern function std.string_len (s: string): bit<64>
extern function std.string_split (s: string, sep: string): std.Vec<string>
extern function std.string_substr (s: string, start: bit<64>, end: bit<64>): string
extern function std.vec2set (s: std.Vec<'A>): std.Set<'A>
extern function std.vec_contains (v: std.Vec<'X>, x: 'X): bool
extern function std.vec_empty (): std.Vec<'A>
extern function std.vec_is_empty (v: std.Vec<'X>): bool
extern function std.vec_len (v: std.Vec<'X>): bit<64>
extern function std.vec_nth (v: std.Vec<'X>, n: bit<64>): std.Option<'X>
extern function std.vec_push (v: mut std.Vec<'X>, x: 'X): ()
extern function std.vec_push_imm (v: std.Vec<'X>, x: 'X): std.Vec<'X>
extern function std.vec_singleton (x: 'X): std.Vec<'X>
extern function tinyset.contains (s: tinyset.Set64<'X>, v: 'X): bool
extern function tinyset.empty (): tinyset.Set64<'X>
extern function tinyset.group2set (g: std.Group<'A>): tinyset.Set64<'A>
extern function tinyset.group_set_unions (g: std.Group<tinyset.Set64<'A>>): tinyset.Set64<'A>
extern function tinyset.group_setref_unions (g: std.Group<std.Ref<tinyset.Set64<'A>>>): std.Ref<tinyset.Set64<'A>>
extern function tinyset.insert (s: mut tinyset.Set64<'X>, v: 'X): ()
extern function tinyset.insert_imm (s: tinyset.Set64<'X>, v: 'X): tinyset.Set64<'X>
extern function tinyset.is_empty (s: tinyset.Set64<'X>): bool
extern function tinyset.nth (s: tinyset.Set64<'X>, n: bit<64>): std.Option<bit<64>>
extern function tinyset.singleton (x: 'X): tinyset.Set64<'X>
extern function tinyset.size (s: tinyset.Set64<'X>): bit<64>
extern function tinyset.union (s1: tinyset.Set64<'X>, s2: tinyset.Set64<'X>): tinyset.Set64<'X>
extern function tinyset.unions (sets: std.Vec<tinyset.Set64<'X>>): tinyset.Set64<'X>
extern transformer graph.ConnectedComponents(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (CCLabels: relation[('N, 'N)])
extern transformer graph.ConnectedComponents64(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (CCLabels: relation[('N, 'N)])
extern transformer graph.SCC(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (SCCLabels: relation[('N, 'N)])
extern transformer graph.UnsafeBidirectionalEdges(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (BiEdges: relation[('N, 'N)])
input relation Rmain [Rmain]
output relation Rout [Rout]
input relation foolib.lib.Rlib [foolib.lib.Rlib]
input relation foolib.ns1.m1.R1 [foolib.ns1.m1.R1]
input relation foolib.ns1.m2.R2 [foolib.ns1.m2.R2]
relation redist.BiEdge [redist.BiEdge]
input relation redist.DdlogBinding [redist.DdlogBinding]
input relation redist.DdlogDependency [redist.DdlogDependency]
input relation redist.DdlogNode [redist.DdlogNode]
relation redist.LabeledNode [redist.LabeledNode]
relation redist.SCCBinding [redist.SCCBinding]
relation redist.SCCEdge [redist.SCCEdge]
relation redist.SCCLabel [(redist.entid_t, redist.entid_t)]
relation redist.SCCSpan [redist.SCCSpan]
output relation redist.Span [redist.Span]
Rout(.f1=q, .f2=x) :- Rmain(.f1=foolib.lib.Tlib{.f1=x}, .f2=foolib.ns1.m1.T1{.f1=y}), foolib.lib.Rlib(.f1=foolib.ns1.m2.T2{.f1=z}), foolib.ns1.m1.R1(.f1=foolib.ns1.m2.T2{.f1=p}), foolib.ns1.m2.R2(.f1=q).
redist.BiEdge(.parent=parent, .child=child) :- redist.DdlogDependency(.parent=parent, .child=child), redist.DdlogDependency(.parent=child, .child=parent).
redist.LabeledNode(.node=node, .scc=scc) :- redist.SCCLabel[(node, scc)].
redist.LabeledNode(.node=node, .scc=node) :- redist.DdlogNode(.id=node), not redist.SCCLabel[(node, _)].
redist.SCCEdge(.parent=parentscc, .child=childscc) :- redist.DdlogDependency(.parent=parent, .child=child), redist.LabeledNode(.node=parent, .scc=parentscc), redist.LabeledNode(.node=child, .scc=childscc), (childscc != parentscc).
redist.SCCBinding(.scc=scc, .bindings=std.ref_new(bindings)) :- redist.DdlogBinding(.tn=tn, .entity=entity), redist.LabeledNode(.node=entity, .scc=scc), var bindings = Aggregate((scc), tinyset.group2set(tn)).
redist.SCCSpan(.scc=scc, .span=bindings) :- redist.SCCBinding(.scc=scc, .bindings=bindings).
redist.SCCSpan(.scc=parent, .span=tns) :- redist.SCCEdge(.parent=child, .child=parent), redist.SCCSpan(.scc=child, .span=child_tns), var tns = Aggregate((parent), tinyset.group_setref_unions(child_tns)).
redist.Span(.entity=node, .tns=span) :- redist.SCCSpan(.scc=scc, .span=span), redist.LabeledNode(.node=node, .scc=scc).
apply graph.ConnectedComponents(redist.BiEdge, redist.edge_child, redist.edge_parent) -> (redist.SCCLabel)
