typedef AMethod = AMethod{a1: Symbol, a2: Symbol}
typedef Address = Address{addr: ip_addr_t}
typedef Adjusted = Adjusted{id: bigint, alloc: std::Vec<(string, bit<32>)>}
typedef Aggregate1 = Aggregate1{x: string, cnt: bit<64>}
typedef Aggregate2 = Aggregate2{x: string, set: std::Set<string>}
typedef Aggregate3 = Aggregate3{x: string, vec: std::Vec<string>}
typedef Aggregate4 = Aggregate4{x: string, map: std::Map<string,string>}
typedef AggregateByX = AggregateByX{x: string, cnt: bit<64>}
typedef AggregateCnt = AggregateCnt{cnt: bit<64>}
typedef AggregateCnt2 = AggregateCnt2{cnt: bit<64>}
typedef AggregateCnt3 = AggregateCnt3{cnt: bit<64>}
typedef AggregateMe1 = AggregateMe1{x: string, y: string}
typedef AggregateMe3 = AggregateMe3{x: string, y: string, z: string}
typedef AggregateMeInts = AggregateMeInts{x: string, y: bit<32>}
typedef Alloc = Alloc{id: bigint, allocated: std::Map<string,bit<32>>, toallocate: std::Vec<string>, min_val: bit<32>, max_val: bit<32>}
typedef Allocated = Allocated{name: string, xs: std::Set<bit<32>>}
typedef Allocation = Allocation{name: string, id: string, x: bit<32>}
typedef Alt = C0{x: bit<32>} |
              C1{x: bit<32>}
typedef Answer = Answer{x: station}
typedef Arithm = Arithm{n: bit<32>}
typedef BMethod = BMethod{b1: Symbol, b2: Symbol}
typedef BigintVectors = BigintVectors{expr: string, vec: std::Vec<bigint>}
typedef Blacklist = Blacklist{addr: ip_addr_t}
typedef C = C{f1: string, f2: string}
typedef CMethod = CMethod{c1: Symbol, c2: Symbol}
typedef Cast_bigint = Cast_bigint{description: string, expected: bigint, actual: bigint}
typedef Cast_double = Cast_double{description: string, expected: double, actual: double}
typedef Cast_float = Cast_float{description: string, expected: float, actual: float}
typedef Cast_s128 = Cast_s128{description: string, expected: signed<128>, actual: signed<128>}
typedef Cast_s32 = Cast_s32{description: string, expected: signed<32>, actual: signed<32>}
typedef Cast_s8 = Cast_s8{description: string, expected: signed<8>, actual: signed<8>}
typedef Cast_u24 = Cast_u24{description: string, expected: bit<24>, actual: bit<24>}
typedef Cast_u256 = Cast_u256{description: string, expected: bit<256>, actual: bit<256>}
typedef Cast_u32 = Cast_u32{description: string, actual: bit<32>, expected: bit<32>}
typedef Compare = Compare{label: string, value: bool}
typedef Concat = Concat{s: string}
typedef ConcatString = ConcatString{s: string}
typedef ControlFlow = ControlFlow{expr: string, value: string}
typedef Counts1 = Counts1{x: string, occurrences: std::u64}
typedef DMethod = DMethod{c1: Symbol, c2: Symbol}
typedef DdlogBinding = DdlogBinding{tn: tnid_t, entity: entid_t}
typedef DdlogDependency = DdlogDependency{parent: entid_t, child: entid_t}
typedef DdlogNode = DdlogNode{id: entid_t}
typedef Disaggregate = Disaggregate{x: string, y: string}
typedef Doubles = Doubles{s: string, d: double}
typedef Edge = Edge{from: bigint, to: bigint}
typedef ExternalId = ExternalId{host: bit<64>, id: (string, string)}
typedef ExternalIds = ExternalIds{host: bit<64>, ids: std::Map<string,string>}
typedef Filtered = Filtered{r: std::Ref<Referenced>}
typedef Filtered2 = Filtered2{r: std::Ref<Referee2>}
typedef Filtered3 = Filtered3{r: std::Ref<Referenced>}
typedef Floats = Floats{s: string, f: float}
typedef FooStruct = Option1{f1: bigint, f2: IPAddr, f3: (bool, string)} |
                    Option2{f4: bit<32>, f5: IPAddr}
typedef Gangster = Gangster{nickname: string, name: string}
typedef HostAddress = HostAddress{host: bit<64>, addr: string}
typedef HostAddresses = HostAddresses{host: bit<64>, addrs: std::Set<string>}
typedef Human = Human{h: person}
typedef IConcatString = IConcatString{s: intern::IString}
typedef IP4Addr = bit<32>
typedef IP4Subnet = IP4Subnet{addr: IP4Addr, mask: bit<32>}
typedef IP6Addr = bit<128>
typedef IPAddr = IP4{ip4: IP4Addr} |
                 IP6{ip6: IP6Addr}
typedef IString1 = IString1{s: intern::IString}
typedef Innocent = Innocent{name: string}
typedef J = J{b: bool}
typedef Links = Links{l: line, s1: station, s2: station}
typedef Long = Long{x0: bit<16>, x1: bit<16>, x2: bit<16>, x3: bit<16>, x4: bit<16>, x5: bit<16>, x6: bit<16>, x7: bit<16>, x8: bit<16>, x9: bit<16>, x10: bit<16>, x11: bit<16>, x12: bit<16>, x13: bit<16>, x14: bit<16>, x15: bit<16>, x16: bit<16>, x17: bit<16>, x18: bit<16>, x19: bit<16>}
typedef LongJoin = LongJoin{x0: bit<16>, x1: bit<16>, x2: bit<16>, x3: bit<16>, x4: bit<16>, x5: bit<16>, x6: bit<16>, x7: bit<16>, x8: bit<16>, x9: bit<16>, x10: bit<16>, x11: bit<16>, x12: bit<16>, x13: bit<16>, x14: bit<16>, x15: bit<16>, x16: bit<16>, x17: bit<16>, x18: bit<16>, x19: bit<16>}
typedef NewAllocation = NewAllocation{id: bigint, alloc: std::Vec<(string, bit<32>)>}
typedef NewAllocationOpt = NewAllocationOpt{id: bigint, alloc: std::Vec<(string, std::Option<bit<32>>)>}
typedef Numbers = Numbers{x: bigint}
typedef Parent = Parent{child: person, parent: person}
typedef Power3 = Power3{y: bigint}
typedef R1 = bigint
typedef R13 = R13{t: t13}
typedef R14 = R14{t: t11}
typedef R1_nl = R1_nl{a1: string}
typedef R2_nl = R2_nl{a2: string}
typedef R3 = R3{f1: bigint, f2: bool}
typedef R3_nl = R3_nl{a3: string, b3: string}
typedef R4_nl = R4_nl{a4: string, b4: string}
typedef R6 = R6{f: bigint}
typedef R7 = R7{f1: bigint, f2: bit<16>} |
             R7Other{}
typedef Re = Re{_x: Tnumber, _t: Ttxt, _y: Tnumber}
typedef Reach = Reach{s1: station, s2: station}
typedef Realized = Realized{name: string, id: string, x: bit<32>}
typedef Referee = Referee{r: std::Ref<Referenced>}
typedef Referee2 = Referee2{r: Referenced}
typedef Referenced = Referenced{x: bool, y: std::Option<string>}
typedef Regex = Regex{regex: string, text: string}
typedef RegexMatch = RegexMatch{regex: string, text: string, m: bool}
typedef Rel1 = Rel1{x: bigint, y: IPAddr}
typedef Rel2 = Rel2{x: bigint, z: FooStruct}
typedef Rel3 = Rel3{x: bigint, y: IPAddr, z: FooStruct}
typedef Rel4 = Rel4{x: bigint, y: IPAddr, b: bool}
typedef Request = Request{name: string, id: string}
typedef Ris_true = Ris_true{_s: TB}
typedef S = S{f1: (bool, bool), f2: bit<32>}
typedef SetOfSet = SetOfSet{x: std::Set<std::Set<bool>>}
typedef Sib = Sib{s1: person, s2: person}
typedef Signed = Signed{n: signed<32>}
typedef Signed16 = Signed16{x: signed<16>}
typedef Signed64 = Signed64{x: signed<64>}
typedef Signed8 = Signed8{x: signed<8>}
typedef Span = Span{entity: entid_t, tns: std::Set<tnid_t>}
typedef String2 = String2{s: string}
typedef Strings = Strings{s: string}
typedef Sum = Sum{x: string, sum: bit<32>}
typedef Suspect = Suspect{name: string}
typedef Symbol = intern::IString
typedef Symmetric1 = Symmetric1{x: string, sym: bool}
typedef T = T{x: bigint, y: string}
typedef T1 = C11{f1: bigint, f2: (bigint, string)} |
             C12{f3: bit<32>, f4: (bool, bool, bool)}
typedef T16 = t15
typedef T17 = bigint
typedef T2 = C21{f1: T1, f2: bigint} |
             C22{f3: (bool, T1)}
typedef T3 = C31{f1: T1, f2: bigint, s: string, b: bit<32>} |
             C32{f3: ((bool, (bool, bool, bool)), T1)}
typedef TB = intern::IString
typedef Table1 = Table1{id: bit<64>, name: string}
typedef Table12 = Table12{id: bit<128>, name: string, f3: S}
typedef Table2 = Table2{name: string, f2: bigint, f3: S}
typedef Tnumber = bit<32>
typedef ToAllocate = ToAllocate{name: string, ids: std::Vec<string>}
typedef Tree<'L> = LeafNode{v: 'L} |
                   NonLeafNode{branches: std::Vec<Tree<'L>>}
typedef Trees = Trees{tree: Tree<std::u64>}
typedef Tsymbol = intern::IString
typedef Tt1 = Tt1{column1: signed<64>, column2: string, column3: bool}
typedef Tt2 = Tt2{column1: signed<64>}
typedef Ttmp0 = Ttmp0{col4: signed<64>}
typedef Ttxt = intern::IString
typedef UMinus_bigint = UMinus_bigint{description: string, n: bigint}
typedef UMinus_s32 = UMinus_s32{description: string, n: signed<32>}
typedef ValidDestination = ValidDestination{addr: ip_addr_t}
typedef VecTest = VecTest{x: std::Vec<string>}
typedef W = W{f1: bigint, f2: bigint, f3: bigint}
typedef WithKey = WithKey{key: bit<128>, val: string}
typedef WithKeyDbg = WithKeyDbg{key: bit<128>, val: string}
typedef X = X{field: bigint}
typedef XX = XX{b: bigint, c: R3, d: R1}
typedef XY = XY{x: bigint, y: bigint}
typedef Y = Y{b: bigint, e: string}
typedef YX = YX{y: bigint, x: bigint}
typedef YZX = YZX{y: bigint, z: bigint, x: bigint}
typedef Z = Z{field: bigint}
typedef ZZ = ZZ{x: bigint, y: R3}
typedef debug::DDlogOpId = (std::u32, std::u32, std::u32)
typedef entid_t = bit<32>
#[size = 4]
#[shared_ref = true]
extern type intern::IObj<'A>
typedef intern::IString = intern::IObj<string>
#[size = 8]
#[shared_ref = true]
extern type internment::Intern<'A>
typedef internment::istring = internment::Intern<string>
typedef ip_addr_t = IPAddr{b3: bit<8>, b2: bit<8>, b1: bit<8>, b0: bit<8>}
typedef line = bigint
typedef log::log_level_t = signed<32>
typedef log::module_t = signed<32>
typedef nested_t = N{field: C}
typedef person = string
extern type regex::Regex
typedef serializable_t = ConsInt{x: bigint} |
                         ConsBit{y: bit<32>} |
                         ConsBool{z: bool} |
                         Cons0{}
typedef souffle_types::TEmpty = ()
typedef souffle_types::Tfloat = double
typedef souffle_types::Tnumber = signed<32>
typedef souffle_types::Tsymbol = intern::IString
typedef souffle_types::Tunsigned = bit<32>
typedef station = string
typedef std::DDEpoch = std::u64
typedef std::DDIteration = std::u64
typedef std::DDNestedTS = std::DDNestedTS{epoch: std::DDEpoch, iter: std::DDIteration}
typedef std::DDWeight = std::s64
typedef std::Either<'A,'B> = std::Left{l: 'A} |
                             std::Right{r: 'B}
extern type std::Group<'K,'V>
extern type std::Map<'K,'V>
#[rust = "serde(from=\"Option<A>\", into=\"Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
#[custom_from_record = true]
typedef std::Option<'A> = std::None{} |
                          std::Some{x: 'A}
#[size = 8]
#[shared_ref = true]
extern type std::Ref<'A>
typedef std::Result<'V,'E> = std::Ok{res: 'V} |
                             std::Err{err: 'E}
extern type std::Set<'A>
extern type std::Vec<'A>
typedef std::s128 = signed<128>
typedef std::s16 = signed<16>
typedef std::s32 = signed<32>
typedef std::s64 = signed<64>
typedef std::s8 = signed<8>
typedef std::u128 = bit<128>
typedef std::u16 = bit<16>
typedef std::u32 = bit<32>
typedef std::u64 = bit<64>
typedef std::u8 = bit<8>
typedef std::usize = std::u64
typedef string_syn = string
typedef t00 = bigint
typedef t01 = bool
typedef t02 = string
typedef t03 = bit<32>
typedef t04 = bigint
typedef t05 = (bigint, bigint)
typedef t06 = (bigint, bigint, bigint)
typedef t07 = ()
typedef t08 = ((), (), ())
typedef t09 = (bigint, (), bigint)
typedef t10 = (bigint, bool, string, bit<32>)
typedef t11 = (bigint, (bool, (string, bit<32>)))
typedef t12 = t11
typedef t13 = (t00, t01, t02, t03)
typedef t14 = (t04, t04)
typedef t15 = Const15{f: bigint}
typedef t18 = Const18{f0: bigint, f1: string, f2: t00}
typedef t19 = C000{f0: bigint} |
              C111{f0: bigint} |
              C222{f0: bigint}
typedef t20 = signed<32>
typedef t21 = double
typedef t22 = float
typedef tnid_t = bit<16>
function __debug_100_1_std::group_to_vec (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::Vec<string>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, std::group_to_vec(original_group)))
}
function __debug_101_1_std::group_to_map (g: std::Group<string,('I, (string, string))>): (std::Vec<'I>, std::Map<string,string>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,(string, string)>)) = debug::debug_split_group(g);
     (inputs, std::group_to_map(original_group)))
}
function __debug_102_1_std::group_to_set (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::Set<string>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, std::group_to_set(original_group)))
}
function __debug_103_1_std::group_sum (g: std::Group<string,('I, bit<32>)>): (std::Vec<'I>, bit<32>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,bit<32>>)) = debug::debug_split_group(g);
     (inputs, std::group_sum(original_group)))
}
function __debug_104_2_std::group_count (g: std::Group<string,('I, ())>): (std::Vec<'I>, std::usize)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,()>)) = debug::debug_split_group(g);
     (inputs, std::group_count(original_group)))
}
function __debug_105_1_concat_ys (g: std::Group<(string, string),('I, string)>): (std::Vec<'I>, string)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<(string, string),string>)) = debug::debug_split_group(g);
     (inputs, concat_ys(original_group)))
}
function __debug_112_2_std::group_to_vec (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::Vec<string>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, std::group_to_vec(original_group)))
}
function __debug_113_1_std::group_to_set (g: std::Group<string,('I, bit<32>)>): (std::Vec<'I>, std::Set<bit<32>>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,bit<32>>)) = debug::debug_split_group(g);
     (inputs, std::group_to_set(original_group)))
}
function __debug_248_2_std::group_to_set (g: std::Group<bit<32>,('I, bit<16>)>): (std::Vec<'I>, std::Set<bit<16>>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<bit<32>,bit<16>>)) = debug::debug_split_group(g);
     (inputs, std::group_to_set(original_group)))
}
function __debug_249_3_std::group_set_unions (g: std::Group<bit<32>,('I, std::Set<tnid_t>)>): (std::Vec<'I>, std::Set<bit<16>>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<bit<32>,std::Set<tnid_t>>)) = debug::debug_split_group(g);
     (inputs, std::group_set_unions(original_group)))
}
function __debug_93_1_count_xs (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::u64)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, count_xs(original_group)))
}
function __debug_94_1_find_x_in_group (g: std::Group<string,('I, string)>): (std::Vec<'I>, bool)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, find_x_in_group(original_group)))
}
function __debug_95_1_std::group_count (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::usize)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, std::group_count(original_group)))
}
function __debug_96_1_std::group_count (g: std::Group<(),('I, ())>): (std::Vec<'I>, std::usize)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<(),()>)) = debug::debug_split_group(g);
     (inputs, std::group_count(original_group)))
}
function __debug_97_1_std::group_sum (g: std::Group<(),('I, bit<64>)>): (std::Vec<'I>, bit<64>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<(),bit<64>>)) = debug::debug_split_group(g);
     (inputs, std::group_sum(original_group)))
}
function __debug_98_2_std::group_sum (g: std::Group<(),('I, bit<64>)>): (std::Vec<'I>, bit<64>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<(),bit<64>>)) = debug::debug_split_group(g);
     (inputs, std::group_sum(original_group)))
}
function __debug_99_1_std::group_to_set (g: std::Group<string,('I, string)>): (std::Vec<'I>, std::Set<string>)
{
    (((var inputs: std::Vec<'I>), (var original_group: std::Group<string,string>)) = debug::debug_split_group(g);
     (inputs, std::group_to_set(original_group)))
}
function a0 (): bigint
{
    1
}
function a1 (): bigint
{
    (1 + 2)
}
function a10 (): signed<32>
{
    (32'sd0 + 32'sd1)
}
function a11 (): signed<32>
{
    (32'sd0: signed<32>)
}
function a12 (a: signed<16>, b: signed<16>): signed<16>
{
    (((((a + b) + (a - b)) + (a / b)) + (a * b)) + (a % b))
}
function a13 (a: signed<16>, b: signed<16>): bool
{
    (((((((a < b) or (a > b)) or (a <= b)) or (a >= b)) or (a == b)) or (a != b)) or (a < b))
}
function a2 (): bit<32>
{
    (32'd0 + 32'd1)
}
function a3 (): bit<32>
{
    (32'd0: bit<32>)
}
function a4 (): bit<32>
{
    (64'd0: bit<64>)[40:9]
}
function a5 (a: bit<32>, b: bit<32>): bit<32>
{
    (((((((a ^ b) | (a & b)) | (a | b)) | (~ a)) | (a << 32'd5)) | (a >> 32'd5)) | (a[15:0] ++ a[31:16]))
}
function a51 (a: signed<32>, b: signed<32>): signed<32>
{
    ((((((a ^ b) | (a & b)) | (a | b)) | (~ a)) | (a << 32'd5)) | (a >> 32'd5))
}
function a6 (a: bit<16>, b: bit<16>): bit<16>
{
    (((((a + b) + (a - b)) + (a / b)) + (a * b)) + (a % b))
}
function a7 (a: bit<16>, b: bit<16>): bool
{
    (((((((a < b) or (a > b)) or (a <= b)) or (a >= b)) or (a == b)) or (a != b)) or (a < b))
}
function a8 (): bit<32>
{
    (((32'd125 | 32'd255) | 32'd511) | 32'd683)
}
function a9 (): bit<32>
{
    (((32'd125 | 32'd255) | 32'd511) | 32'd683)
}
function agg1 (g1: std::Group<'K,Tt1>): Ttmp0
{
    ((var first3: bool) = true;
     ((var max5: signed<64>) = 64'sd0;
      (for (i2 in g1) {
           ((var v0: Tt1) = i2;
            max5 = if first3 {
                       v0.column1
                   } else {
                         (first3 = false;
                          64'sd0)
                     })
       };
       (Ttmp0{.col4=max5}: Ttmp0))))
}
function all (xs: std::Vec<bool>): bool
{
    (for (x in xs) {
         if (not x) {
             ((return false): ())
         } else {
               ()
           }
     };
     ((return true): bool))
}
extern function allocate::adjust_allocation (allocated: std::Map<'A,'N>, toallocate: std::Vec<'A>, min_val: 'N, max_val: 'N): std::Vec<('A, 'N)>
extern function allocate::allocate (allocated: std::Set<'N>, toallocate: std::Vec<'B>, min_val: 'N, max_val: 'N): std::Vec<('B, 'N)>
extern function allocate::allocate_opt (allocated: std::Set<'N>, toallocate: std::Vec<'B>, min_val: 'N, max_val: 'N): std::Vec<('B, std::Option<'N>)>
extern function allocate::allocate_with_hint (allocated: std::Set<'N>, toallocate: std::Vec<('B, std::Option<'N>)>, min_val: 'N, max_val: 'N): std::Vec<('B, 'N)>
function any (xs: std::Vec<bool>): bool
{
    ((var res: bool) = false;
     (for (x in xs) {
          if x {
              (res = true;
               (break: ()))
          } else {
                ()
            }
      };
      ((return res): bool)))
}
function b0 (): bool
{
    (true and false)
}
function b1 (a: bool): bool
{
    ((((a and true) or (a or false)) or (a => false)) or (not a))
}
function c0 (a: bit<32>, b: bit<16>): bit<16>
{
    (a;
     b)
}
function concat_ys (ys: std::Group<(string, string),string>): string
{
    (((var x: string), (var z: string)) = (std::group_key(ys): (string, string));
     ((var res: string) = (((x ++ "-") ++ z) ++ ":");
      (for (y in ys) {
           res = (res ++ y)
       };
       res)))
}
function count_xs (ys: std::Group<string,string>): std::u64
{
    ((var res: std::u64) = 64'd0;
     (for (y in ys) {
          if (y == (std::group_key(ys): string)) {
              res = (res + 64'd1)
          } else {
                ()
            }
      };
      res))
}
function dbl (): double
{
    (64'f0.0: double)
}
extern function debug::debug_event (operator_id: debug::DDlogOpId, w: std::DDWeight, ts: 'T1, operator_type: string, input1: 'A1, out: 'A2): ()
extern function debug::debug_event_join (operator_id: debug::DDlogOpId, w: std::DDWeight, ts: 'T1, input1: 'A1, input2: 'A2, out: 'A3): ()
extern function debug::debug_split_group (g: std::Group<'K,('I, 'V)>): (std::Vec<'I>, std::Group<'K,'V>)
function double_evens (xs: std::Vec<bigint>): std::Vec<bigint>
{
    ((var res: std::Vec<bigint>) = (std::vec_empty(): std::Vec<bigint>);
     (for (x in xs) {
          std::vec_push(res, mult2(if (x == 0) {
                                       (break: bigint)
                                   } else {
                                         if (x < 0) {
                                             ((return res): bigint)
                                         } else {
                                               if ((x % 2) != 0) {
                                                   (continue: bigint)
                                               } else {
                                                     x
                                                 }
                                           }
                                     }))
      };
      res))
}
function dummy (x: string): string
{
    (x ++ " dummy")
}
function edge_from (e: Edge): bigint
{
    e.from
}
function edge_to (e: Edge): bigint
{
    e.to
}
extern function f (): bigint
function f1 (x: T1, y: T2, q: T3): bool
{
    (match (x) {
         (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1) -> true,
         (_: T1) -> false
     };
     (match (x) {
          (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1) -> true,
          (C12{.f3=(_: bit<32>), .f4=(_: (bool, bool, bool))}: T1) -> false
      };
      (match (y) {
           (C21{.f1=(_: T1), .f2=(_: bigint)}: T2) -> true,
           (C22{.f3=((_: bool), (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1))}: T2) -> true,
           (_: T2) -> false
       };
       (match (y) {
            (C21{.f1=(_: T1), .f2=(_: bigint)}: T2) -> true,
            (C22{.f3=(true, (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1))}: T2) -> true,
            (C22{.f3=(true, (C12{.f3=(_: bit<32>), .f4=(_: (bool, bool, bool))}: T1))}: T2) -> true,
            (C22{.f3=(false, (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1))}: T2) -> true,
            (C22{.f3=(false, (C12{.f3=(_: bit<32>), .f4=(_: (bool, bool, bool))}: T1))}: T2) -> true
        };
        ((var z: (bool, (bool, (bool, bool)))) = (true, (false, (true, false)));
         (match (z) {
              (true, (_: (bool, (bool, bool)))) -> true,
              (false, ((_: bool), (true, true))) -> true,
              (false, ((_: bool), (true, false))) -> true,
              (false, ((_: bool), (false, true))) -> true,
              (false, ((_: bool), (false, false))) -> true
          };
          (match (z) {
               ((_: bool), ((_: bool), (true, true))) -> true,
               ((_: bool), ((_: bool), (true, false))) -> true,
               ((_: bool), ((_: bool), (false, true))) -> true,
               (false, ((_: bool), (false, false))) -> true,
               (true, ((_: bool), (false, false))) -> true
           };
           (match (q) {
                (C31{.f1=(_: T1), .f2=(_: bigint), .s=(_: string), .b=(_: bit<32>)}: T3) -> true,
                (C32{.f3=((true, ((_: bool), (_: bool), false)), (_: T1))}: T3) -> true,
                (C32{.f3=((false, ((_: bool), (_: bool), false)), (_: T1))}: T3) -> true,
                (C32{.f3=((false, ((_: bool), (_: bool), true)), (_: T1))}: T3) -> true,
                (C32{.f3=(((_: bool), ((_: bool), (_: bool), true)), (C11{.f1=(_: bigint), .f2=(_: (bigint, string))}: T1))}: T3) -> true,
                (C32{.f3=(((_: bool), ((_: bool), (_: bool), true)), (C12{.f3=(_: bit<32>), .f4=(true, true, true)}: T1))}: T3) -> false,
                (C32{.f3=(((_: bool), ((_: bool), (_: bool), true)), (C12{.f3=(_: bit<32>), .f4=((_: bool), (_: bool), false)}: T1))}: T3) -> false,
                (C32{.f3=(((_: bool), ((_: bool), (_: bool), true)), (C12{.f3=(_: bit<32>), .f4=((_: bool), (_: bool), true)}: T1))}: T3) -> false
            };
            (match (q) {
                 (C31{.f1=(_: T1), .f2=0, .s="foo", .b=32'd15}: T3) -> true,
                 (C31{.f1=(_: T1), .f2=(_: bigint), .s=(_: string), .b=32'd15}: T3) -> true,
                 (C31{.f1=(_: T1), .f2=0, .s=(_: string), .b=(_: bit<32>)}: T3) -> true,
                 (C31{.f1=(_: T1), .f2=(_: bigint), .s="foo", .b=(_: bit<32>)}: T3) -> true,
                 (C32{.f3=(_: ((bool, (bool, bool, bool)), T1))}: T3) -> true,
                 (C31{.f1=(_: T1), .f2=(_: bigint), .s=(_: string), .b=(_: bit<32>)}: T3) -> true
             };
             ((var s: string) = "bar";
              match (s) {
                  "foo" -> true,
                  "bar" -> true,
                  (_: string) -> false
              }))))))))))
}
function filter_C0 (xs: std::Vec<Alt>): std::Vec<bigint>
{
    ((var res: std::Vec<bigint>) = (std::vec_empty(): std::Vec<bigint>);
     (for (x in xs) {
          ((var val: bigint) = match (x) {
                                   (C0{.x=(var v: bit<32>)}: Alt) -> (continue: bigint),
                                   (C1{.x=(var v: bit<32>)}: Alt) -> if (v > 32'd0) {
                                                                         (v as bigint)
                                                                     } else {
                                                                           (break: bigint)
                                                                       }
                               };
           std::vec_push(res, val))
      };
      res))
}
function filter_gt (xs: std::Vec<bigint>, threshold: bigint): std::Vec<bigint>
{
    ((var res: std::Vec<bigint>) = (std::vec_empty(): std::Vec<bigint>);
     (for (x in xs) {
          (if (x <= threshold) {
               (continue: ())
           } else {
                 ()
             };
           std::vec_push(res, x))
      };
      ((return res): std::Vec<bigint>)))
}
function find_x_in_group (ys: std::Group<'A,'A>): bool
{
    (for (y in ys) {
         if (y == (std::group_key(ys): 'A)) {
             ((return true): ())
         } else {
               ()
           }
     };
     false)
}
function flt (): float
{
    (32'f0.0: float)
}
function fnested (x: nested_t): string
{
    ((N{.field=(C{.f1=(var res: string), .f2=(_: string)}: C)}: nested_t) = x;
     res)
}
function foo (): bool
{
    ((var v1: bigint) = 0;
     ((var v2: bit<32>) = 32'd1;
      ((var v3: bit<129>) = 129'd0;
       ((var v4: bool) = true;
        ((var v5: (bigint, string)) = (0, "test_string");
         ((var v6: IPAddr) = (IP4{.ip4=32'd2864434397}: IPAddr);
          ((var v7: FooStruct) = (Option1{.f1=0, .f2=(IP4{.ip4=32'd0}: IPAddr), .f3=(true, "bar")}: FooStruct);
           (v3 = (v3 + 129'd703710);
            (match (v6) {
                 (IP4{.ip4=(_: bit<32>)}: IPAddr) -> true,
                 (_: IPAddr) -> false
             };
             match (v7) {
                 (Option1{.f1=(_: bigint), .f2=(IP6{.ip6=(_: bit<128>)}: IPAddr), .f3=((_: bool), "bar")}: FooStruct) -> true,
                 (_: FooStruct) -> false
             })))))))))
}
extern function fp::abs_d (f: double): double
extern function fp::abs_f (f: float): float
extern function fp::acos_d (f: double): double
extern function fp::acos_f (f: float): float
extern function fp::acosh_d (f: double): double
extern function fp::acosh_f (f: float): float
extern function fp::asin_d (f: double): double
extern function fp::asin_f (f: float): float
extern function fp::asinh_d (f: double): double
extern function fp::asinh_f (f: float): float
extern function fp::atan2_d (f: double, other: double): double
extern function fp::atan2_f (f: float, other: float): float
extern function fp::atan_d (f: double): double
extern function fp::atan_f (f: float): float
extern function fp::atanh_d (f: double): double
extern function fp::atanh_f (f: float): float
extern function fp::cbrt_d (f: double): double
extern function fp::cbrt_f (f: float): float
extern function fp::ceil_d (f: double): double
extern function fp::ceil_f (f: float): float
extern function fp::cos_d (f: double): double
extern function fp::cos_f (f: float): float
extern function fp::cosh_d (f: double): double
extern function fp::cosh_f (f: float): float
extern function fp::exp2_d (f: double): double
extern function fp::exp2_f (f: float): float
extern function fp::exp_d (f: double): double
extern function fp::exp_f (f: float): float
extern function fp::floor_d (f: double): double
extern function fp::floor_f (f: float): float
extern function fp::fract_d (f: double): double
extern function fp::fract_f (f: float): float
extern function fp::int_from_d (d: double): std::Option<bigint>
extern function fp::int_from_f (f: float): std::Option<bigint>
extern function fp::is_finite_d (f: double): bool
extern function fp::is_finite_f (f: float): bool
extern function fp::is_infinite_d (f: double): bool
extern function fp::is_infinite_f (f: float): bool
extern function fp::is_nan_d (f: double): bool
extern function fp::is_nan_f (f: float): bool
extern function fp::ln_d (f: double): double
extern function fp::ln_f (f: float): float
extern function fp::log10_d (f: double): double
extern function fp::log10_f (f: float): float
extern function fp::log2_d (f: double): double
extern function fp::log2_f (f: float): float
extern function fp::log_d (f: double, base: double): double
extern function fp::log_f (f: float, base: float): float
extern function fp::mul_add_d (a: double, b: double, c: double): double
extern function fp::mul_add_f (a: float, b: float, c: float): float
extern function fp::nan_d (): double
extern function fp::nan_f (): float
extern function fp::parse_d (s: string): std::Result<double,string>
extern function fp::parse_f (s: string): std::Result<float,string>
extern function fp::powf_d (f: double, exp: double): double
extern function fp::powf_f (f: float, exp: float): float
extern function fp::powi_d (f: double, exp: signed<32>): double
extern function fp::powi_f (f: float, exp: signed<32>): float
extern function fp::recip_d (f: double): double
extern function fp::recip_f (f: float): float
extern function fp::round_d (f: double): double
extern function fp::round_f (f: float): float
extern function fp::signum_d (f: double): double
extern function fp::signum_f (f: float): float
extern function fp::sin_d (f: double): double
extern function fp::sin_f (f: float): float
extern function fp::sinh_d (f: double): double
extern function fp::sinh_f (f: float): float
extern function fp::sqrt_d (f: double): double
extern function fp::sqrt_f (f: float): float
extern function fp::tan_d (f: double): double
extern function fp::tan_f (f: float): float
extern function fp::tanh_d (f: double): double
extern function fp::tanh_f (f: float): float
extern function fp::to_degrees_d (f: double): double
extern function fp::to_degrees_f (f: float): float
extern function fp::to_radians_d (f: double): double
extern function fp::to_radians_f (f: float): float
extern function fp::trunc_d (f: double): double
extern function fp::trunc_f (f: float): float
extern function g (a: bigint): bigint
extern function h (a: (bigint, bigint)): (bigint, bigint)
extern function intern::istring_ord (s: intern::IString): std::u32
extern function intern::istring_str (s: intern::IString): string
extern function intern::string_intern (s: string): intern::IString
function internment::contains (s1: internment::istring, s2: string): bool
{
    internment::istring_contains(s1, s2)
}
function internment::ends_with (s: internment::istring, suffix: string): bool
{
    internment::istring_ends_with(s, suffix)
}
extern function internment::intern (s: 'A): internment::Intern<'A>
extern function internment::istring_contains (s1: internment::istring, s2: string): bool
extern function internment::istring_ends_with (s: internment::istring, suffix: string): bool
extern function internment::istring_join (strings: std::Vec<internment::istring>, sep: string): string
extern function internment::istring_len (s: internment::istring): std::usize
extern function internment::istring_replace (s: internment::istring, from: string, to: string): string
extern function internment::istring_reverse (s: internment::istring): string
extern function internment::istring_split (s: internment::istring, sep: string): std::Vec<string>
extern function internment::istring_starts_with (s: internment::istring, prefix: string): bool
extern function internment::istring_substr (s: internment::istring, start: std::usize, end: std::usize): string
extern function internment::istring_to_bytes (s: internment::istring): std::Vec<std::u8>
extern function internment::istring_to_lowercase (s: internment::istring): string
extern function internment::istring_to_uppercase (s: internment::istring): string
extern function internment::istring_trim (s: internment::istring): string
#[return_by_ref = true]
extern function internment::ival (s: internment::Intern<'A>): 'A
function internment::join (strings: std::Vec<internment::istring>, sep: string): string
{
    internment::istring_join(strings, sep)
}
function internment::len (s: internment::istring): std::usize
{
    internment::istring_len(s)
}
function internment::replace (s: internment::istring, from: string, to: string): string
{
    internment::istring_replace(s, from, to)
}
function internment::reverse (s: internment::istring): string
{
    internment::istring_reverse(s)
}
function internment::split (s: internment::istring, sep: string): std::Vec<string>
{
    internment::istring_split(s, sep)
}
function internment::starts_with (s: internment::istring, prefix: string): bool
{
    internment::istring_starts_with(s, prefix)
}
function internment::substr (s: internment::istring, start: std::usize, end: std::usize): string
{
    internment::istring_substr(s, start, end)
}
function internment::to_bytes (s: internment::istring): std::Vec<std::u8>
{
    internment::istring_to_bytes(s)
}
function internment::to_lowercase (s: internment::istring): string
{
    internment::istring_to_lowercase(s)
}
function internment::to_string (s: internment::istring): string
{
    (internment::ival(s): string)
}
function internment::to_uppercase (s: internment::istring): string
{
    internment::istring_to_uppercase(s)
}
function internment::trim (s: internment::istring): string
{
    internment::istring_trim(s)
}
#[has_side_effects = true]
extern function log::log (module: log::module_t, level: log::log_level_t, msg: string): ()
function mult2 (x: bigint): bigint
{
    (x << 32'd1)
}
function p (): string
{
    ((var notable: string) = "hi";
     notable)
}
extern function parameterized (x: 'A, y: 'A): 'A
function parameterized2 (x: 'A, y: 'A): bool
{
    (x == y)
}
function patterns (): ()
{
    ((var a: Alt) = (C0{.x=32'd1}: Alt);
     ((var b: bool) = match (a) {
                          (C0{.x=(_: bit<32>)}: Alt) -> true,
                          (C1{.x=(_: bit<32>)}: Alt) -> false
                      };
      (var i: bit<32>) = match (a) {
                             (C0{.x=(var v: bit<32>)}: Alt) -> v,
                             (C1{.x=(var v: bit<32>)}: Alt) -> v
                         }))
}
extern function regex::regex (pattern: string): regex::Regex
extern function regex::regex_all_matches (regex: regex::Regex, text: string): std::Vec<string>
extern function regex::regex_checked (pattern: string): std::Result<regex::Regex,string>
extern function regex::regex_first_match (regex: regex::Regex, text: string): std::Option<string>
extern function regex::regex_match (regex: regex::Regex, text: string): bool
function s0 (): string
{
    "Some string"
}
function s1 (): string
{
    "\t\r\n\"\\\a"
}
function shadow (): string
{
    ((var b: std::Option<string>) = (std::None{}: std::Option<string>);
     ((var a: std::Option<string>) = (std::Some{.x="foo"}: std::Option<string>);
      match (a) {
          (std::Some{.x=(var v: string)}: std::Option<string>) -> v,
          (std::None{}: std::Option<string>) -> ""
      }))
}
function souffle_lib::acos (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::acos_d((l as double)))
}
function souffle_lib::acosh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::acosh_d((l as double)))
}
function souffle_lib::asin (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::asin_d((l as double)))
}
function souffle_lib::asinh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::asinh_d((l as double)))
}
function souffle_lib::atan (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::atan_d((l as double)))
}
function souffle_lib::atanh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::atanh_d((l as double)))
}
function souffle_lib::castTo32 (i: bit<64>): souffle_types::Tnumber
{
    (i[31:0] as souffle_types::Tnumber)
}
function souffle_lib::castTo64 (i: souffle_types::Tnumber): bit<64>
{
    (32'd0 ++ (i as bit<32>))
}
function souffle_lib::cat (s: intern::IString, t: intern::IString): intern::IString
{
    intern::string_intern((intern::istring_str(s) ++ intern::istring_str(t)))
}
function souffle_lib::contains (s: intern::IString, i: intern::IString): bool
{
    std::string_contains(intern::istring_str(i), intern::istring_str(s))
}
function souffle_lib::cos (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::cos_d((l as double)))
}
function souffle_lib::cosh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::cosh_d((l as double)))
}
function souffle_lib::exp (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::exp_d((l as double)))
}
function souffle_lib::ftoi (l: double): signed<32>
{
    match (fp::int_from_d(l)) {
        (std::None{}: std::Option<bigint>) -> 32'sd0,
        (std::Some{.x=(var x: bigint)}: std::Option<bigint>) -> (x as signed<32>)
    }
}
function souffle_lib::ftou (l: double): bit<32>
{
    match (fp::int_from_d(l)) {
        (std::None{}: std::Option<bigint>) -> 32'd0,
        (std::Some{.x=(var x: bigint)}: std::Option<bigint>) -> ((x as signed<32>) as bit<32>)
    }
}
function souffle_lib::group_count32 (g: std::Group<'K,'V>): souffle_types::Tnumber
{
    souffle_lib::castTo32(std::group_count(g))
}
function souffle_lib::group_mean (g: std::Group<'K,signed<32>>): signed<32>
{
    ((var sum: signed<32>) = (std::group_sum(g): signed<32>);
     ((var count: bit<64>) = std::group_count(g);
      (sum / ((count as signed<64>) as signed<32>))))
}
function souffle_lib::group_mean_d (g: std::Group<'K,double>): double
{
    ((var sum: double) = (std::group_sum(g): double);
     ((var count: bit<64>) = std::group_count(g);
      (sum / (count as double))))
}
function souffle_lib::itof (l: signed<32>): double
{
    (l as double)
}
function souffle_lib::itou (l: signed<32>): bit<32>
{
    (l as bit<32>)
}
function souffle_lib::land (l: souffle_types::Tnumber, r: souffle_types::Tnumber): souffle_types::Tnumber
{
    if ((l != 32'sd0) and (r != 32'sd0)) {
        32'sd1
    } else {
          32'sd0
      }
}
function souffle_lib::lnot (l: souffle_types::Tnumber): souffle_types::Tnumber
{
    if (l != 32'sd0) {
        32'sd0
    } else {
          32'sd1
      }
}
function souffle_lib::log (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::ln_d((l as double)))
}
function souffle_lib::lor (l: souffle_types::Tnumber, r: souffle_types::Tnumber): souffle_types::Tnumber
{
    if ((l == 32'sd0) and (r == 32'sd0)) {
        32'sd0
    } else {
          32'sd1
      }
}
function souffle_lib::ord (s: intern::IString): souffle_types::Tnumber
{
    (intern::istring_ord(s) as souffle_types::Tnumber)
}
function souffle_lib::random (): souffle_types::Tnumber
{
    32'sd0
}
function souffle_lib::re_match (pattern: intern::IString, s: intern::IString): bool
{
    regex::regex_match(regex::regex((("^" ++ intern::istring_str(pattern)) ++ "$")), intern::istring_str(s))
}
function souffle_lib::sin (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::sin_d((l as double)))
}
function souffle_lib::sinh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::sinh_d((l as double)))
}
function souffle_lib::strlen (s: intern::IString): souffle_types::Tnumber
{
    souffle_lib::castTo32(std::string_len(intern::istring_str(s)))
}
function souffle_lib::substr (s: intern::IString, i: souffle_types::Tnumber, l: souffle_types::Tnumber): intern::IString
{
    intern::string_intern(std::string_substr(intern::istring_str(s), souffle_lib::castTo64(i), souffle_lib::castTo64((i + l))))
}
function souffle_lib::tan (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::tan_d((l as double)))
}
function souffle_lib::tanh (l: signed<32>): signed<32>
{
    souffle_lib::ftoi(fp::tanh_d((l as double)))
}
function souffle_lib::to_istring (n: souffle_types::Tnumber): intern::IString
{
    intern::string_intern(std::__builtin_2string(n))
}
function souffle_lib::to_number (s: intern::IString): souffle_types::Tnumber
{
    match (std::parse_dec_i64(intern::istring_str(s))) {
        (std::None{}: std::Option<signed<64>>) -> 32'sd0,
        (std::Some{.x=(var x: signed<64>)}: std::Option<signed<64>>) -> (x as souffle_types::Tnumber)
    }
}
function souffle_lib::to_number (f: double): souffle_types::Tnumber
{
    match (fp::int_from_d(f)) {
        (std::None{}: std::Option<bigint>) -> 32'sd0,
        (std::Some{.x=(var x: bigint)}: std::Option<bigint>) -> (x as souffle_types::Tnumber)
    }
}
function souffle_lib::utof (l: bit<32>): double
{
    (l as double)
}
function souffle_lib::utoi (l: bit<32>): signed<32>
{
    (l as signed<32>)
}
extern function std::__builtin_2string (x: 'X): string
function std::append (v: mut std::Vec<'X>, other: std::Vec<'X>): ()
{
    std::vec_append(v, other)
}
extern function std::bigint_pow32 (base: bigint, exp: bit<32>): bigint
function std::contains (s1: string, s2: string): bool
{
    std::string_contains(s1, s2)
}
function std::contains (v: std::Vec<'X>, x: 'X): bool
{
    std::vec_contains(v, x)
}
function std::contains (s: std::Set<'X>, v: 'X): bool
{
    std::set_contains(s, v)
}
function std::contains_key (m: std::Map<'K,'V>, k: 'K): bool
{
    std::map_contains_key(m, k)
}
function std::count (g: std::Group<'K,'V>): std::usize
{
    std::group_count(g)
}
extern function std::default (): 'T
#[return_by_ref = true]
extern function std::deref (x: std::Ref<'A>): 'A
function std::difference (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_difference(s1, s2): std::Set<'X>)
}
function std::ends_with (s: string, suffix: string): bool
{
    std::string_ends_with(s, suffix)
}
function std::first (g: std::Group<'K,'V>): 'V
{
    (std::group_first(g): 'V)
}
function std::get (m: std::Map<'K,'V>, k: 'K): std::Option<'V>
{
    (std::map_get(m, k): std::Option<'V>)
}
extern function std::group_count (g: std::Group<'K,'V>): std::usize
extern function std::group_first (g: std::Group<'K,'V>): 'V
extern function std::group_key (g: std::Group<'K,'V>): 'K
extern function std::group_max (g: std::Group<'K,'V>): 'V
extern function std::group_min (g: std::Group<'K,'V>): 'V
extern function std::group_nth (g: std::Group<'K,'V>, n: std::usize): std::Option<'V>
extern function std::group_set_unions (g: std::Group<'K,std::Set<'A>>): std::Set<'A>
extern function std::group_setref_unions (g: std::Group<'K,std::Ref<std::Set<'A>>>): std::Ref<std::Set<'A>>
extern function std::group_sum (g: std::Group<'K,'V>): 'V
extern function std::group_to_map (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,'V>
extern function std::group_to_set (g: std::Group<'K,'V>): std::Set<'V>
extern function std::group_to_setmap (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,std::Set<'V>>
extern function std::group_to_vec (g: std::Group<'K,'V>): std::Vec<'V>
function std::group_unzip (g: std::Group<'K,('X, 'Y)>): (std::Vec<'X>, std::Vec<'Y>)
{
    ((var xs: std::Vec<'X>) = (std::vec_empty(): std::Vec<'X>);
     ((var ys: std::Vec<'Y>) = (std::vec_empty(): std::Vec<'Y>);
      (for (v in g) {
           (((var x: 'X), (var y: 'Y)) = v;
            (std::vec_push(xs, x);
             std::vec_push(ys, y)))
       };
       (xs, ys))))
}
extern function std::hash128 (x: 'X): bit<128>
extern function std::hash64 (x: 'X): bit<64>
extern function std::hex (x: 'X): string
extern function std::htonl (x: bit<32>): bit<32>
extern function std::htons (x: bit<16>): bit<16>
function std::insert (m: mut std::Map<'K,'V>, k: 'K, v: 'V): ()
{
    std::map_insert(m, k, v)
}
function std::insert (s: mut std::Set<'X>, v: 'X): ()
{
    std::set_insert(s, v)
}
function std::insert_imm (m: std::Map<'K,'V>, k: 'K, v: 'V): std::Map<'K,'V>
{
    (std::map_insert_imm(m, k, v): std::Map<'K,'V>)
}
function std::insert_imm (s: std::Set<'X>, v: 'X): std::Set<'X>
{
    (std::set_insert_imm(s, v): std::Set<'X>)
}
function std::intersection (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_intersection(s1, s2): std::Set<'X>)
}
function std::is_empty (v: std::Vec<'X>): bool
{
    std::vec_is_empty(v)
}
function std::is_empty (m: std::Map<'K,'V>): bool
{
    std::map_is_empty(m)
}
function std::is_empty (s: std::Set<'X>): bool
{
    std::set_is_empty(s)
}
function std::is_err (res: std::Result<'V,'E>): bool
{
    match (res) {
        (std::Ok{.res=(_: 'V)}: std::Result<'V,'E>) -> false,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> true
    }
}
function std::is_none (x: std::Option<'A>): bool
{
    match (x) {
        (std::None{}: std::Option<'A>) -> true,
        (_: std::Option<'A>) -> false
    }
}
function std::is_ok (res: std::Result<'V,'E>): bool
{
    match (res) {
        (std::Ok{.res=(_: 'V)}: std::Result<'V,'E>) -> true,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> false
    }
}
function std::is_some (x: std::Option<'A>): bool
{
    match (x) {
        (std::Some{.x=(_: 'A)}: std::Option<'A>) -> true,
        (_: std::Option<'A>) -> false
    }
}
function std::join (strings: std::Vec<string>, sep: string): string
{
    std::string_join(strings, sep)
}
function std::key (g: std::Group<'K,'V>): 'K
{
    (std::group_key(g): 'K)
}
function std::len (s: string): std::usize
{
    std::string_len(s)
}
function std::len (v: std::Vec<'X>): std::usize
{
    std::vec_len(v)
}
extern function std::map_contains_key (m: std::Map<'K,'V>, k: 'K): bool
extern function std::map_empty (): std::Map<'K,'V>
extern function std::map_get (m: std::Map<'K,'V>, k: 'K): std::Option<'V>
extern function std::map_insert (m: mut std::Map<'K,'V>, k: 'K, v: 'V): ()
extern function std::map_insert_imm (m: std::Map<'K,'V>, k: 'K, v: 'V): std::Map<'K,'V>
extern function std::map_is_empty (m: std::Map<'K,'V>): bool
extern function std::map_remove (m: mut std::Map<'K,'V>, k: 'K): ()
extern function std::map_singleton (k: 'K, v: 'V): std::Map<'K,'V>
extern function std::map_size (m: std::Map<'K,'V>): std::usize
extern function std::map_union (m1: std::Map<'K,'V>, m2: std::Map<'K,'V>): std::Map<'K,'V>
function std::max (x: 'A, y: 'A): 'A
{
    if (x > y) {
        x
    } else {
          y
      }
}
function std::max (g: std::Group<'K,'V>): 'V
{
    (std::group_max(g): 'V)
}
function std::min (x: 'A, y: 'A): 'A
{
    if (x < y) {
        x
    } else {
          y
      }
}
function std::min (g: std::Group<'K,'V>): 'V
{
    (std::group_min(g): 'V)
}
function std::nth (g: std::Group<'K,'V>, n: std::usize): std::Option<'V>
{
    (std::group_nth(g, n): std::Option<'V>)
}
function std::nth (v: std::Vec<'X>, n: std::usize): std::Option<'X>
{
    (std::vec_nth(v, n): std::Option<'X>)
}
function std::nth (s: std::Set<'X>, n: std::usize): std::Option<'X>
{
    (std::set_nth(s, n): std::Option<'X>)
}
extern function std::ntohl (x: bit<32>): bit<32>
extern function std::ntohs (x: bit<16>): bit<16>
extern function std::option_unwrap_or_default (opt: std::Option<'A>): 'A
extern function std::parse_dec_i64 (s: string): std::Option<signed<64>>
extern function std::parse_dec_u64 (s: string): std::Option<bit<64>>
function std::pow32 (base: std::u8, exp: bit<32>): std::u8
{
    std::u8_pow32(base, exp)
}
function std::pow32 (base: std::u16, exp: bit<32>): std::u16
{
    std::u16_pow32(base, exp)
}
function std::pow32 (base: std::u32, exp: bit<32>): std::u32
{
    std::u32_pow32(base, exp)
}
function std::pow32 (base: std::u64, exp: bit<32>): std::u64
{
    std::u64_pow32(base, exp)
}
function std::pow32 (base: std::u128, exp: bit<32>): std::u128
{
    std::u128_pow32(base, exp)
}
function std::pow32 (base: std::s8, exp: bit<32>): std::s8
{
    std::s8_pow32(base, exp)
}
function std::pow32 (base: std::s16, exp: bit<32>): std::s16
{
    std::s16_pow32(base, exp)
}
function std::pow32 (base: std::s32, exp: bit<32>): std::s32
{
    std::s32_pow32(base, exp)
}
function std::pow32 (base: std::s64, exp: bit<32>): std::s64
{
    std::s64_pow32(base, exp)
}
function std::pow32 (base: std::s128, exp: bit<32>): std::s128
{
    std::s128_pow32(base, exp)
}
function std::pow32 (base: bigint, exp: bit<32>): bigint
{
    std::bigint_pow32(base, exp)
}
function std::push (v: mut std::Vec<'X>, x: 'X): ()
{
    std::vec_push(v, x)
}
function std::push_imm (v: std::Vec<'X>, x: 'X): std::Vec<'X>
{
    (std::vec_push_imm(v, x): std::Vec<'X>)
}
extern function std::range (from: 'A, to: 'A, step: 'A): std::Vec<'A>
extern function std::ref_new (x: 'A): std::Ref<'A>
function std::remove (m: mut std::Map<'K,'V>, k: 'K): ()
{
    std::map_remove(m, k)
}
function std::replace (s: string, from: string, to: string): string
{
    std::string_replace(s, from, to)
}
extern function std::result_unwrap_or_default (res: std::Result<'V,'E>): 'V
function std::reverse (s: string): string
{
    std::string_reverse(s)
}
extern function std::s128_pow32 (base: std::s128, exp: bit<32>): std::s128
extern function std::s16_pow32 (base: std::s16, exp: bit<32>): std::s16
extern function std::s32_pow32 (base: std::s32, exp: bit<32>): std::s32
extern function std::s64_pow32 (base: std::s64, exp: bit<32>): std::s64
extern function std::s8_pow32 (base: std::s8, exp: bit<32>): std::s8
extern function std::set_contains (s: std::Set<'X>, v: 'X): bool
extern function std::set_difference (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_empty (): std::Set<'X>
extern function std::set_insert (s: mut std::Set<'X>, v: 'X): ()
extern function std::set_insert_imm (s: std::Set<'X>, v: 'X): std::Set<'X>
extern function std::set_intersection (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_is_empty (s: std::Set<'X>): bool
extern function std::set_nth (s: std::Set<'X>, n: std::usize): std::Option<'X>
extern function std::set_singleton (x: 'X): std::Set<'X>
extern function std::set_size (s: std::Set<'X>): std::usize
extern function std::set_to_vec (s: std::Set<'A>): std::Vec<'A>
extern function std::set_union (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
extern function std::set_unions (sets: std::Vec<std::Set<'X>>): std::Set<'X>
function std::setref_unions (g: std::Group<'K,std::Ref<std::Set<'A>>>): std::Ref<std::Set<'A>>
{
    (std::group_setref_unions(g): std::Ref<std::Set<'A>>)
}
function std::size (m: std::Map<'K,'V>): std::usize
{
    std::map_size(m)
}
function std::size (s: std::Set<'X>): std::usize
{
    std::set_size(s)
}
function std::sort (v: mut std::Vec<'X>): ()
{
    std::vec_sort(v)
}
function std::sort_imm (v: std::Vec<'X>): std::Vec<'X>
{
    (std::vec_sort_imm(v): std::Vec<'X>)
}
function std::split (s: string, sep: string): std::Vec<string>
{
    std::string_split(s, sep)
}
function std::starts_with (s: string, prefix: string): bool
{
    std::string_starts_with(s, prefix)
}
extern function std::str_to_lower (s: string): string
extern function std::string_contains (s1: string, s2: string): bool
extern function std::string_ends_with (s: string, suffix: string): bool
extern function std::string_join (strings: std::Vec<string>, sep: string): string
extern function std::string_len (s: string): std::usize
extern function std::string_replace (s: string, from: string, to: string): string
extern function std::string_reverse (s: string): string
extern function std::string_split (s: string, sep: string): std::Vec<string>
extern function std::string_starts_with (s: string, prefix: string): bool
extern function std::string_substr (s: string, start: std::usize, end: std::usize): string
extern function std::string_to_bytes (s: string): std::Vec<std::u8>
extern function std::string_to_lowercase (s: string): string
extern function std::string_to_uppercase (s: string): string
extern function std::string_trim (s: string): string
function std::substr (s: string, start: std::usize, end: std::usize): string
{
    std::string_substr(s, start, end)
}
function std::to_bytes (s: string): std::Vec<std::u8>
{
    std::string_to_bytes(s)
}
function std::to_lowercase (s: string): string
{
    std::string_to_lowercase(s)
}
function std::to_map (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,'V>
{
    (std::group_to_map(g): std::Map<'K2,'V>)
}
function std::to_set (o: std::Option<'X>): std::Set<'X>
{
    match (o) {
        (std::Some{.x=(var x: 'X)}: std::Option<'X>) -> (std::set_singleton(x): std::Set<'X>),
        (std::None{}: std::Option<'X>) -> (std::set_empty(): std::Set<'X>)
    }
}
function std::to_set (g: std::Group<'K,'V>): std::Set<'V>
{
    (std::group_to_set(g): std::Set<'V>)
}
function std::to_set (s: std::Vec<'A>): std::Set<'A>
{
    (std::vec_to_set(s): std::Set<'A>)
}
function std::to_setmap (g: std::Group<'K1,('K2, 'V)>): std::Map<'K2,std::Set<'V>>
{
    (std::group_to_setmap(g): std::Map<'K2,std::Set<'V>>)
}
function std::to_string (ts: std::DDNestedTS): string
{
    (((("(" ++ (std::__builtin_2string(ts.epoch): string)) ++ ",") ++ (std::__builtin_2string(ts.iter): string)) ++ ")")
}
function std::to_string (x: bool): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: bigint): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: float): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: double): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s8): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s16): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s32): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s64): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::s128): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u8): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u16): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u32): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u64): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: std::u128): string
{
    std::__builtin_2string(x)
}
function std::to_string (x: string): string
{
    std::__builtin_2string(x)
}
function std::to_uppercase (s: string): string
{
    std::string_to_uppercase(s)
}
function std::to_vec (o: std::Option<'X>): std::Vec<'X>
{
    match (o) {
        (std::Some{.x=(var x: 'X)}: std::Option<'X>) -> (std::vec_singleton(x): std::Vec<'X>),
        (std::None{}: std::Option<'X>) -> (std::vec_empty(): std::Vec<'X>)
    }
}
function std::to_vec (g: std::Group<'K,'V>): std::Vec<'V>
{
    (std::group_to_vec(g): std::Vec<'V>)
}
function std::to_vec (s: std::Set<'A>): std::Vec<'A>
{
    (std::set_to_vec(s): std::Vec<'A>)
}
function std::trim (s: string): string
{
    std::string_trim(s)
}
extern function std::u128_pow32 (base: std::u128, exp: bit<32>): std::u128
extern function std::u16_pow32 (base: std::u16, exp: bit<32>): std::u16
extern function std::u32_pow32 (base: std::u32, exp: bit<32>): std::u32
extern function std::u64_pow32 (base: std::u64, exp: bit<32>): std::u64
extern function std::u8_pow32 (base: std::u8, exp: bit<32>): std::u8
function std::union (m1: std::Map<'K,'V>, m2: std::Map<'K,'V>): std::Map<'K,'V>
{
    (std::map_union(m1, m2): std::Map<'K,'V>)
}
function std::union (s1: std::Set<'X>, s2: std::Set<'X>): std::Set<'X>
{
    (std::set_union(s1, s2): std::Set<'X>)
}
function std::unions (sets: std::Vec<std::Set<'X>>): std::Set<'X>
{
    (std::set_unions(sets): std::Set<'X>)
}
function std::unwrap_or (x: std::Option<'A>, def: 'A): 'A
{
    match (x) {
        (std::Some{.x=(var v: 'A)}: std::Option<'A>) -> v,
        (std::None{}: std::Option<'A>) -> def
    }
}
function std::unwrap_or (res: std::Result<'V,'E>, def: 'V): 'V
{
    match (res) {
        (std::Ok{.res=(var v: 'V)}: std::Result<'V,'E>) -> v,
        (std::Err{.err=(_: 'E)}: std::Result<'V,'E>) -> def
    }
}
function std::unwrap_or_default (opt: std::Option<'A>): 'A
{
    (std::option_unwrap_or_default(opt): 'A)
}
function std::unwrap_or_default (res: std::Result<'V,'E>): 'V
{
    (std::result_unwrap_or_default(res): 'V)
}
extern function std::vec_append (v: mut std::Vec<'X>, other: std::Vec<'X>): ()
extern function std::vec_contains (v: std::Vec<'X>, x: 'X): bool
extern function std::vec_empty (): std::Vec<'A>
extern function std::vec_is_empty (v: std::Vec<'X>): bool
extern function std::vec_len (v: std::Vec<'X>): std::usize
extern function std::vec_nth (v: std::Vec<'X>, n: std::usize): std::Option<'X>
extern function std::vec_push (v: mut std::Vec<'X>, x: 'X): ()
extern function std::vec_push_imm (v: std::Vec<'X>, x: 'X): std::Vec<'X>
extern function std::vec_singleton (x: 'X): std::Vec<'X>
extern function std::vec_sort (v: mut std::Vec<'X>): ()
extern function std::vec_sort_imm (v: std::Vec<'X>): std::Vec<'X>
extern function std::vec_to_set (s: std::Vec<'A>): std::Set<'A>
extern function std::vec_with_capacity (len: std::usize): std::Vec<'A>
extern function std::vec_with_length (len: std::usize, x: 'A): std::Vec<'A>
function strings (): ()
{
    ((var str1: string) = ("foo" ++ "bar");
     ((var str2: string) = ((("foobar" ++ "buzz") ++ "\nraw string ") ++ "quoted string");
      ((var str3: string) = ("str1: " ++ str1);
       ((var str4: string) = (((((("str1: " ++ str1) ++ ", str2: ") ++ str2) ++ ", str3: ") ++ str3) ++ ".");
        ((var str5: string) = [|str1: ${str1},
str2: ${str2},
str3: ${str3}.|];
         ((var str6: string) = ("" ++ (str1 ++ str2));
          ((var str7: string) = ("" ++ ((var x: string) = (str1 ++ str2);
                                        x));
           ((var str8: string) = ("" ++ ((var x: string) = (str1 ++ str2);
                                         dummy(x)));
            ((var b: bool) = (str1 < str2);
             ((var b1: bool) = ("" < str1);
              ((var b2: bool) = ([|${}|] < "");
               ((var b3: bool) = ((str1 != str2) and (str1 >= str2));
                ()))))))))))))
}
function to_string (x: serializable_t): string
{
    match (x) {
        (ConsInt{.x=(var v: bigint)}: serializable_t) -> (("ConsInt(" ++ (std::__builtin_2string(v): string)) ++ ")"),
        (ConsBit{.y=(var v: bit<32>)}: serializable_t) -> (("ConsBool(" ++ (std::__builtin_2string(v): string)) ++ ")"),
        (ConsBool{.z=true}: serializable_t) -> "ConsBool(true)",
        (ConsBool{.z=false}: serializable_t) -> "ConsBool(false)",
        (Cons0{}: serializable_t) -> "Cons0"
    }
}
function tostring1 (): ()
{
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        ((var err: string) = ((((((("a=" ++ (std::__builtin_2string(a): string)) ++ ", b=") ++ (std::__builtin_2string(b): string)) ++ ", c=") ++ (std::__builtin_2string(c): string)) ++ ", d=") ++ d);
         ())))))
}
function tostring2 (): ()
{
    ((var a: bigint) = 5;
     ((var b: bit<32>) = 32'd5;
      ((var c: bool) = true;
       ((var d: string) = "foo";
        ((var e: serializable_t) = (ConsInt{.x=0}: serializable_t);
         ((var err: string) = ((((((((("a=" ++ (std::__builtin_2string(a): string)) ++ ", b=") ++ (std::__builtin_2string(b): string)) ++ ", c=") ++ (std::__builtin_2string(c): string)) ++ ", d=") ++ d) ++ ", e:") ++ (to_string(e): string));
          ()))))))
}
function use_parameterized (x: string, y: string_syn): string
{
    (parameterized(x, y): string)
}
function v (): string
{
    ((var v1: string) = "hello";
     ((var v2: string) = "there";
      v2))
}
function v2 (): bool
{
    b1(true)
}
function vars (): ()
{
    ((var x: bigint) = 0;
     (x = 10;
      ((var y: C) = (C{.f1="foo", .f2="bar"}: C);
       ((var z: C) = (C{.f1="bar", .f2="foo"}: C);
        (((var a: bigint), (var b: bigint)) = ((x + 5), (x - 5));
         ((C{.f1=(var e: string), .f2=(_: string)}: C) = y;
          (C{.f1=(var c: string), .f2=(var d: string)}: C) = y))))))
}
function weird_any (xs: std::Vec<bool>): bool
{
    ((var res: bool) = false;
     (for (x in xs) {
          ((return if (x == true) {
                       true
                   } else {
                         (continue: bool)
                     }): ())
      };
      false))
}
function x (): Alt
{
    (C0{.x=32'd5}: Alt)
}
extern transformer graph::ConnectedComponents(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (CCLabels: relation[('N, 'N)])
extern transformer graph::ConnectedComponents64(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (CCLabels: relation[('N, 'N)])
extern transformer graph::SCC(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (SCCLabels: relation[('N, 'N)])
extern transformer graph::UnsafeBidirectionalEdges(Edges: relation['E], from: function(e: 'E): 'N, to: function(e: 'E): 'N) -> (BiEdges: relation[('N, 'N)])
input relation AMethod [AMethod]
input relation Address [Address]
output relation Adjusted [Adjusted]
output relation Aggregate1 [Aggregate1]
output relation Aggregate2 [Aggregate2]
output relation Aggregate3 [Aggregate3]
output relation Aggregate4 [Aggregate4]
output relation AggregateByX [AggregateByX]
output relation AggregateCnt [AggregateCnt]
output relation AggregateCnt2 [AggregateCnt2]
output relation AggregateCnt3 [AggregateCnt3]
input relation AggregateMe1 [AggregateMe1]
input relation AggregateMe3 [AggregateMe3]
input relation AggregateMeInts [AggregateMeInts]
input relation Alloc [Alloc]
relation Allocated [Allocated]
output relation Allocation [Allocation]
output relation Answer [Answer]
output relation Arithm [Arithm]
input relation BMethod [BMethod]
output relation BigintVectors [BigintVectors]
input relation Blacklist [Blacklist]
output relation CMethod [CMethod]
output relation Cast_bigint [Cast_bigint]
output relation Cast_double [Cast_double]
output relation Cast_float [Cast_float]
output relation Cast_s128 [Cast_s128]
output relation Cast_s32 [Cast_s32]
output relation Cast_s8 [Cast_s8]
output relation Cast_u24 [Cast_u24]
output relation Cast_u256 [Cast_u256]
output relation Cast_u32 [Cast_u32]
output relation Compare [Compare]
output relation Concat [Concat]
output relation ConcatString [ConcatString]
output relation ControlFlow [ControlFlow]
output relation Counts1 [Counts1]
output relation DMethod [DMethod]
input relation DdlogBinding [DdlogBinding]
input relation DdlogDependency [DdlogDependency]
input relation DdlogNode [DdlogNode]
output relation Disaggregate [Disaggregate]
output relation Doubles [Doubles]
input relation Edge [Edge]
output relation ExternalId [ExternalId]
input relation ExternalIds [ExternalIds]
output relation Filtered [Filtered]
output relation Filtered2 [Filtered2]
output relation Filtered3 [Filtered3]
output relation Floats [Floats]
input relation Gangster [Gangster]
output relation HostAddress [HostAddress]
input relation HostAddresses [HostAddresses]
input relation Human [Human]
relation IConcatString [IConcatString]
input relation IString1 [IString1]
output relation Innocent [Innocent]
output relation J [J]
input relation Links [Links]
input relation Long [Long]
output relation LongJoin [LongJoin]
output relation NewAllocation [NewAllocation]
output relation NewAllocationOpt [NewAllocationOpt]
input relation Numbers [Numbers]
input relation Parent [Parent]
output relation Power3 [Power3]
input relation R1 [R1]
relation R13 [R13]
relation R14 [R14]
input relation R1_nl [R1_nl]
input relation R2 [(bigint, bigint)]
relation R2_nl [R2_nl]
input relation R3 [R3]
relation R3_nl [R3_nl]
output relation R4 [R3]
relation R4_nl [R4_nl]
output relation R5 [bigint]
output relation R6 [R6]
output relation R7 [R7]
input relation R8 [bit<32>]
relation Re [Re]
output relation Reach [Reach]
input relation Realized [Realized]
output relation Referee [Referee]
output relation Referee2 [std::Ref<Referee2>]
input relation Referenced [Referenced]
input relation Regex [Regex]
output relation RegexMatch [RegexMatch]
input relation Rel1 [Rel1]
input relation Rel2 [Rel2]
output relation Rel3 [Rel3]
output relation Rel4 [Rel4]
input relation Request [Request]
relation Ris_true [Ris_true]
output relation SCCLabel [(bigint, bigint)]
input relation SetOfSet [SetOfSet]
output relation Sib [Sib]
output relation Signed [Signed]
input relation Signed16 [Signed16]
input relation Signed64 [Signed64]
input relation Signed8 [Signed8]
output relation Span [Span]
input relation String2 [String2]
input relation Strings [Strings]
output relation Sum [Sum]
input relation Suspect [Suspect]
output relation Symmetric1 [Symmetric1]
output relation T [T]
input relation Table1 [Table1]
output relation Table12 [Table12]
input relation Table2 [Table2]
relation ToAllocate [ToAllocate]
output relation Trees [Trees]
output relation UMinus_bigint [UMinus_bigint]
output relation UMinus_s32 [UMinus_s32]
output relation ValidDestination [ValidDestination]
output relation VecTest [VecTest]
output relation W [W]
input relation WithKey [WithKey] primary key (x) x.key
output relation WithKeyDbg [WithKeyDbg]
input relation X [X]
input relation XX [XX]
input relation XY [XY]
input relation Y [Y]
output relation YX [YX]
input relation YZX [YZX]
output relation Z [Z]
output relation ZZ [ZZ]
Sib[(Sib{.s1=x, .s2=y}: Sib)] :- Parent[(__parent0@ (Parent{.child=(x: string), .parent=(z: string)}: Parent))], Parent[(__parent1@ (Parent{.child=(y: string), .parent=(z: string)}: Parent))], Inspect debug::debug_event_join((32'd0, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __parent0, __parent1, (x, y)), (x != y), Inspect debug::debug_event((32'd0, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (x, y), (Sib{.s1=x, .s2=y}: Sib)).
Parent[(Parent{.child="Alice", .parent="Bob"}: Parent)].
Parent[(Parent{.child="Ben", .parent="Bob"}: Parent)].
Parent[(Parent{.child="Bob", .parent="Bob"}: Parent)].
Compare[(Compare{.label="true >= false", .value=(true >= false)}: Compare)].
Compare[(Compare{.label="\"\" >= \"a\"", .value=("" >= "a")}: Compare)].
Compare[(Compare{.label="5 <= 3", .value=((64'd5: std::u64) <= 64'd3)}: Compare)].
Compare[(Compare{.label="(1, 2) >= (3, 4)", .value=(((32'd1: std::u32), (32'd2: std::u32)) >= (32'd3, 32'd4))}: Compare)].
Compare[(Compare{.label="(1, 2) < (3, 4)", .value=(((32'f1.0, 64'f2.0): (float, double)) < (32'f3.0, 64'f4.0))}: Compare)].
Compare[(Compare{.label="(1, 2) < (1, 4)", .value=(((32'd1, 32'sd2): (std::u32, std::s32)) < (32'd1, 32'sd4))}: Compare)].
Compare[(Compare{.label="C{\"a\", \"b\"} > C{\"b\", \"e\"}", .value=((C{.f1="a", .f2="b"}: C) > (C{.f1="b", .f2="e"}: C))}: Compare)].
Compare[(Compare{.label="C{\"a\", \"b\"} < C{\"a\", \"e\"}", .value=((C{.f1="a", .f2="b"}: C) < (C{.f1="a", .f2="e"}: C))}: Compare)].
Compare[(Compare{.label="C0{32'd3} > C1{32'd4}", .value=((C0{.x=32'd3}: Alt) > (C1{.x=32'd4}: Alt))}: Compare)].
Compare[(Compare{.label="C0{32'd3} < C0{32'd4}", .value=((C0{.x=32'd3}: Alt) < (C0{.x=32'd4}: Alt))}: Compare)].
Compare[(Compare{.label="C0{32'd3} < C1{32'd4}", .value=((C0{.x=32'd3}: Alt) < (C1{.x=32'd4}: Alt))}: Compare)].
Compare[(Compare{.label="None < Some{1}", .value=((std::None{}: std::Option<signed<32>>) < (std::Some{.x=32'sd1}: std::Option<signed<32>>))}: Compare)].
Compare[(Compare{.label="Some{0} < Some{1}", .value=((std::Some{.x=(32'd0: std::u32)}: std::Option<bit<32>>) < (std::Some{.x=32'd1}: std::Option<bit<32>>))}: Compare)].
VecTest[(VecTest{.x=(std::vec_empty(): std::Vec<string>)}: VecTest)].
VecTest[(VecTest{.x=((var v: std::Vec<string>) = (std::vec_empty(): std::Vec<string>);
                     (std::vec_push(v, "Hello,");
                      v))}: VecTest)].
VecTest[(VecTest{.x=(std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<string>), "Hello, "): std::Vec<string>), "world!"): std::Vec<string>)}: VecTest)].
Reach[(Reach{.s1=x, .s2=y}: Reach)] :- Links[(__links0@ (Links{.l=(l: bigint), .s1=(x: string), .s2=(y: string)}: Links))], Inspect debug::debug_event((32'd20, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __links0, (Reach{.s1=x, .s2=y}: Reach)).
Reach[(Reach{.s1=x, .s2=y}: Reach)] :- Links[(__links0@ (Links{.l=(l: bigint), .s1=(y: string), .s2=(x: string)}: Links))], Inspect debug::debug_event((32'd21, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __links0, (Reach{.s1=x, .s2=y}: Reach)).
Reach[(Reach{.s1=x, .s2=y}: Reach)] :- Links[(__links0@ (Links{.l=(l: bigint), .s1=(x: string), .s2=(z: string)}: Links))], Reach[(__reach1@ (Reach{.s1=(z: string), .s2=(y: string)}: Reach))], Inspect debug::debug_event_join((32'd22, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __links0, __reach1, (Reach{.s1=x, .s2=y}: Reach)).
Answer[(Answer{.x=x}: Answer)] :- Reach[(__reach0@ (Reach{.s1="Odeon", .s2=(x: string)}: Reach))], Inspect debug::debug_event((32'd23, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __reach0, (Answer{.x=x}: Answer)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], Inspect debug::debug_event((32'd24, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(__x0@ (a: X))], Inspect debug::debug_event((32'd25, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __x0, (Z{.field=a.field}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], match (a.field) {
                                                                     1 -> true,
                                                                     2 -> false,
                                                                     (_: bigint) -> false
                                                                 }, Inspect debug::debug_event((32'd26, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=(a.field + 1)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], match (a.field) {
                                                                           1 -> false,
                                                                           2 -> true,
                                                                           (_: bigint) -> false
                                                                       }, Inspect debug::debug_event((32'd27, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a.field + 1)}: Z)).
Z[(Z{.field=(a.field - 1)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], match (a.field) {
                                                                           1 -> false,
                                                                           2 -> false,
                                                                           (_: bigint) -> true
                                                                       }, Inspect debug::debug_event((32'd28, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a.field - 1)}: Z)).
Z[(Z{.field=a}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                  1 -> true,
                                                                  2 -> false,
                                                                  (_: bigint) -> false
                                                              }, Inspect debug::debug_event((32'd29, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=a}: Z)).
Z[(Z{.field=(a + 1)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                        1 -> false,
                                                                        2 -> true,
                                                                        (_: bigint) -> false
                                                                    }, Inspect debug::debug_event((32'd30, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a + 1)}: Z)).
Z[(Z{.field=(a - 1)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                        1 -> false,
                                                                        2 -> false,
                                                                        (_: bigint) -> true
                                                                    }, Inspect debug::debug_event((32'd31, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a - 1)}: Z)).
Z[(Z{.field=a}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                  1 -> true,
                                                                  (_: bigint) -> false
                                                              }, Inspect debug::debug_event((32'd32, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=a}: Z)).
Z[(Z{.field=(a + 1)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                        1 -> false,
                                                                        2 -> true,
                                                                        (_: bigint) -> false
                                                                    }, Inspect debug::debug_event((32'd33, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a + 1)}: Z)).
Z[(Z{.field=(a - 1)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], match (a) {
                                                                        1 -> false,
                                                                        2 -> false,
                                                                        (_: bigint) -> true
                                                                    }, Inspect debug::debug_event((32'd34, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a - 1)}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], ((a.field % 2) == 0), Inspect debug::debug_event((32'd35, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], ((a.field % 2) == 0), Inspect debug::debug_event((32'd36, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=a}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], ((a % 2) == 0), Inspect debug::debug_event((32'd37, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=a}: Z)).
Z[(Z{.field=(a.field + 1)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], (a.field == 2), Inspect debug::debug_event((32'd38, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a.field + 1)}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], (not (a.field == 2)), Inspect debug::debug_event((32'd39, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=(a + 1)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (a == 2), Inspect debug::debug_event((32'd40, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a + 1)}: Z)).
Z[(Z{.field=a}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (a != 1), Inspect debug::debug_event((32'd41, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=a}: Z)).
Z[(Z{.field=a.field}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], (a.field >= 2), (a.field > 2), Inspect debug::debug_event((32'd42, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a.field}: Z)).
Z[(Z{.field=(a.field + 2)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], (a.field >= 2), (a.field > 2), Inspect debug::debug_event((32'd43, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a.field + 2)}: Z)).
Z[(Z{.field=a}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (a >= 2), (a > 2), Inspect debug::debug_event((32'd44, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=a}: Z)).
Z[(Z{.field=(a + 2)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (a >= 2), (a > 2), Inspect debug::debug_event((32'd45, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a + 2)}: Z)).
Z[(Z{.field=(a.field + b.field)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], X[(b@ (X{.field=(_: bigint)}: X))], Inspect debug::debug_event_join((32'd46, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, a, b, (Z{.field=(a.field + b.field)}: Z)).
Z[(Z{.field=(a.field + c.field)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], X[(c@ (X{.field=(_: bigint)}: X))], Inspect debug::debug_event_join((32'd47, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, a, c, (Z{.field=(a.field + c.field)}: Z)).
Z[(Z{.field=(a + b)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], X[(__x1@ (X{.field=(b: bigint)}: X))], Inspect debug::debug_event_join((32'd48, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __x0, __x1, (Z{.field=(a + b)}: Z)).
Z[(Z{.field=(a + c)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], X[(__x1@ (X{.field=(c: bigint)}: X))], Inspect debug::debug_event_join((32'd49, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __x0, __x1, (Z{.field=(a + c)}: Z)).
Z[(Z{.field=(a + b)}: Z)],
Z[(Z{.field=(a + c)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], X[(__x1@ (X{.field=(b: bigint)}: X))], Inspect debug::debug_event_join((32'd50, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __x0, __x1, (a, b)), X[(__x2@ (X{.field=(c: bigint)}: X))], Inspect debug::debug_event_join((32'd50, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, (a, b), __x2, (Z{.field=(a + b)}: Z)), Inspect debug::debug_event_join((32'd50, 32'd2, 32'd1), ddlog_weight, ddlog_timestamp, (a, b), __x2, (Z{.field=(a + c)}: Z)).
Z[(Z{.field=(a.field + b)}: Z)] :- X[(a@ (X{.field=(_: bigint)}: X))], (var b: bigint) = (a.field + 2), Inspect debug::debug_event((32'd51, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (Z{.field=(a.field + b)}: Z)).
Z[(Z{.field=(a + b)}: Z)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (var b: bigint) = (a + 2), Inspect debug::debug_event((32'd52, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __x0, (Z{.field=(a + b)}: Z)).
W[(W{.f1=a.field, .f2=b, .f3=c}: W)] :- X[(a@ (X{.field=(_: bigint)}: X))], (var b: bigint) = (a.field + 2), (var c: bigint) = (b + a.field), Inspect debug::debug_event((32'd53, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (a, b), (W{.f1=a.field, .f2=b, .f3=c}: W)).
W[(W{.f1=a, .f2=b, .f3=c}: W)] :- X[(__x0@ (X{.field=(a: bigint)}: X))], (var b: bigint) = (a + 2), (var c: bigint) = (b + a), Inspect debug::debug_event((32'd54, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (a, b), (W{.f1=a, .f2=b, .f3=c}: W)).
R1[1].
R2[(1, 2)].
R4[x] :- R3[(__r30@ (x: R3))], Inspect debug::debug_event((32'd57, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __r30, x).
R5[x.f1] :- R3[(__r30@ (x: R3))], Inspect debug::debug_event((32'd58, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __r30, x.f1).
R6[(R6{.f=x.f1}: R6)] :- R3[(__r30@ (x: R3))], Inspect debug::debug_event((32'd59, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __r30, (R6{.f=x.f1}: R6)).
ZZ[(ZZ{.x=a.b, .y=a.c}: ZZ)] :- XX[(__xx0@ (a: XX))], Inspect debug::debug_event((32'd60, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __xx0, (ZZ{.x=a.b, .y=a.c}: ZZ)).
T[(T{.x=a.b, .y=e}: T)] :- XX[(__xx0@ (a: XX))], Y[(__y1@ (Y{.b=a.d, .e=(e: string)}: Y))], Inspect debug::debug_event_join((32'd61, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __xx0, __y1, (T{.x=a.b, .y=e}: T)).
R7[(R7{.f1=1, .f2=16'd2}: R7)].
R7[(R7{.f1=1, .f2=16'd3}: R7)].
R7[(R7Other{}: R7)].
Table12[(Table12{.id=std::hash128((id, name, f2, f3)), .name=name, .f3=f3}: Table12)] :- Table1[(__table10@ (Table1{.id=(id: bit<64>), .name=(name: string)}: Table1))], Table2[(__table21@ (Table2{.name=(name: string), .f2=(f2: bigint), .f3=(f3: S)}: Table2))], Inspect debug::debug_event_join((32'd65, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __table10, __table21, (Table12{.id=std::hash128((id, name, f2, f3)), .name=name, .f3=f3}: Table12)).
R2_nl[(R2_nl{.a2=x}: R2_nl)] :- R1_nl[(__r1_nl0@ (R1_nl{.a1=(x: string)}: R1_nl))], Inspect debug::debug_event((32'd66, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __r1_nl0, (R2_nl{.a2=x}: R2_nl)).
R2_nl[(R2_nl{.a2=x}: R2_nl)] :- R3_nl[(__r3_nl0@ (R3_nl{.a3=(x: string), .b3=(y: string)}: R3_nl))], R4_nl[(__r4_nl1@ (R4_nl{.a4=(y: string), .b4=(z: string)}: R4_nl))], Inspect debug::debug_event_join((32'd67, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __r3_nl0, __r4_nl1, (R2_nl{.a2=x}: R2_nl)).
R3_nl[(R3_nl{.a3=x, .b3=y}: R3_nl)],
R4_nl[(R4_nl{.a4=x, .b4=y}: R4_nl)] :- R2_nl[(__r2_nl0@ (R2_nl{.a2=(x: string)}: R2_nl))], R2_nl[(__r2_nl1@ (R2_nl{.a2=(y: string)}: R2_nl))], Inspect debug::debug_event_join((32'd68, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __r2_nl0, __r2_nl1, (R3_nl{.a3=x, .b3=y}: R3_nl)), Inspect debug::debug_event_join((32'd68, 32'd1, 32'd1), ddlog_weight, ddlog_timestamp, __r2_nl0, __r2_nl1, (R4_nl{.a4=x, .b4=y}: R4_nl)).
Strings[(Strings{.s=""}: Strings)].
Strings[(Strings{.s="foo"}: Strings)].
Strings[(Strings{.s="bar\n"}: Strings)].
Strings[(Strings{.s="\t\tbar"}: Strings)].
Strings[(Strings{.s="\"buzz"}: Strings)].
Strings[(Strings{.s="\r\n\abuzz"}: Strings)].
Strings[(Strings{.s="\\buzz"}: Strings)].
Strings[(Strings{.s="\\buzz"}: Strings)].
Strings[(Strings{.s="bar\916"}: Strings)].
Strings[(Strings{.s=""}: Strings)].
Strings[(Strings{.s="foo"}: Strings)].
Strings[(Strings{.s="foo\nbuzz\nbar"}: Strings)].
Strings[(Strings{.s="\n    foo\n    buzz\n    bar"}: Strings)].
Strings[(Strings{.s="bar\916\n\928"}: Strings)].
Strings[(Strings{.s=("bar\916\n\928" ++ " quoted string")}: Strings)].
Strings[(Strings{.s="\n    foo\\r\\n\n    buzz\n    bar"}: Strings)].
Strings[(Strings{.s="foo-bar"}: Strings)].
Strings[(Strings{.s="foo\nbar"}: Strings)].
Strings[(Strings{.s="foo\\bar"}: Strings)].
Strings[(Strings{.s=("foo\\" ++ "bar")}: Strings)].
Strings[(Strings{.s="word1 word2"}: Strings)].
Strings[(Strings{.s="line1\nline2"}: Strings)].
Rel3[(Rel3{.x=x, .y=y, .z=z}: Rel3)] :- Rel1[(__rel10@ (Rel1{.x=(x: bigint), .y=(y: IPAddr)}: Rel1))], Rel2[(__rel21@ (Rel2{.x=(x: bigint), .z=(z: FooStruct)}: Rel2))], Inspect debug::debug_event_join((32'd91, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __rel10, __rel21, (Rel3{.x=x, .y=y, .z=z}: Rel3)).
Rel4[(Rel4{.x=x, .y=y, .b=b}: Rel4)] :- Rel1[(__rel10@ (Rel1{.x=(x: bigint), .y=(y: IPAddr)}: Rel1))], Rel2[(__rel21@ (Rel2{.x=(x: bigint), .z=(Option1{.f1=(_: bigint), .f2=(IP4{.ip4=(_: bit<32>)}: IPAddr), .f3=((b: bool), "buzz")}: FooStruct)}: Rel2))], Inspect debug::debug_event_join((32'd92, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __rel10, __rel21, (Rel4{.x=x, .y=y, .b=b}: Rel4)).
Counts1[(Counts1{.x=x, .occurrences=count}: Counts1)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_count = Aggregate(x, __debug_93_1_count_xs((__aggregateme10, y))), Inspect debug::debug_event((32'd93, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_count.0, (__inputs_count, x)), (var count: std::u64) = __inputs_count.1, Inspect debug::debug_event((32'd93, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_count, x), (Counts1{.x=x, .occurrences=count}: Counts1)).
Symmetric1[(Symmetric1{.x=x, .sym=sym}: Symmetric1)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_sym = Aggregate(x, __debug_94_1_find_x_in_group((__aggregateme10, y))), Inspect debug::debug_event((32'd94, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_sym.0, (__inputs_sym, x)), (var sym: bool) = __inputs_sym.1, Inspect debug::debug_event((32'd94, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_sym, x), (Symmetric1{.x=x, .sym=sym}: Symmetric1)).
Aggregate1[(Aggregate1{.x=x, .cnt=cnt}: Aggregate1)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_cnt = Aggregate(x, __debug_95_1_std::group_count((__aggregateme10, y))), Inspect debug::debug_event((32'd95, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_cnt.0, (__inputs_cnt, x)), (var cnt: std::usize) = __inputs_cnt.1, Inspect debug::debug_event((32'd95, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_cnt, x), (Aggregate1{.x=x, .cnt=cnt}: Aggregate1)).
AggregateCnt[(AggregateCnt{.cnt=cnt}: AggregateCnt)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_cnt = Aggregate((), __debug_96_1_std::group_count((__aggregateme10, ()))), Inspect debug::debug_event((32'd96, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_cnt.0, __inputs_cnt), (var cnt: std::usize) = __inputs_cnt.1, Inspect debug::debug_event((32'd96, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __inputs_cnt, (AggregateCnt{.cnt=cnt}: AggregateCnt)).
AggregateCnt2[(AggregateCnt2{.cnt=cnt}: AggregateCnt2)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_cnt = Aggregate((), __debug_97_1_std::group_sum((__aggregateme10, (64'd1: bit<64>)))), Inspect debug::debug_event((32'd97, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_cnt.0, __inputs_cnt), (var cnt: bit<64>) = __inputs_cnt.1, Inspect debug::debug_event((32'd97, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __inputs_cnt, (AggregateCnt2{.cnt=cnt}: AggregateCnt2)).
AggregateCnt3[(AggregateCnt3{.cnt=cnt}: AggregateCnt3)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], (y != "1"), Inspect debug::debug_event((32'd98, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __aggregateme10, (__aggregateme10, x, y)), var __inputs_cnt = Aggregate((), __debug_98_2_std::group_sum(((__aggregateme10, x, y), (64'd1: bit<64>)))), Inspect debug::debug_event((32'd98, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_cnt.0, __inputs_cnt), (var cnt: bit<64>) = __inputs_cnt.1, Inspect debug::debug_event((32'd98, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __inputs_cnt, (AggregateCnt3{.cnt=cnt}: AggregateCnt3)).
Aggregate2[(Aggregate2{.x=x, .set=set}: Aggregate2)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_set = Aggregate(x, __debug_99_1_std::group_to_set((__aggregateme10, y))), Inspect debug::debug_event((32'd99, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_set.0, (__inputs_set, x)), (var set: std::Set<string>) = __inputs_set.1, Inspect debug::debug_event((32'd99, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_set, x), (Aggregate2{.x=x, .set=set}: Aggregate2)).
Aggregate3[(Aggregate3{.x=x, .vec=vec}: Aggregate3)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_vec = Aggregate(x, __debug_100_1_std::group_to_vec((__aggregateme10, y))), Inspect debug::debug_event((32'd100, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_vec.0, (__inputs_vec, x)), (var vec: std::Vec<string>) = __inputs_vec.1, Inspect debug::debug_event((32'd100, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_vec, x), (Aggregate3{.x=x, .vec=vec}: Aggregate3)).
Aggregate4[(Aggregate4{.x=x, .map=map}: Aggregate4)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_map = Aggregate(x, __debug_101_1_std::group_to_map((__aggregateme10, (x, y)))), Inspect debug::debug_event((32'd101, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_map.0, (__inputs_map, x)), (var map: std::Map<string,string>) = __inputs_map.1, Inspect debug::debug_event((32'd101, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_map, x), (Aggregate4{.x=x, .map=map}: Aggregate4)).
Disaggregate[(Disaggregate{.x=x, .y=y}: Disaggregate)] :- AggregateMe1[(__aggregateme10@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], var __inputs_set = Aggregate(x, __debug_102_1_std::group_to_set((__aggregateme10, y))), Inspect debug::debug_event((32'd102, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_set.0, (__inputs_set, x)), (var set: std::Set<string>) = __inputs_set.1, Inspect debug::debug_event((32'd102, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_set, x), (x, set)), var y = FlatMap(set), Inspect debug::debug_event((32'd102, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", (x, set), (Disaggregate{.x=x, .y=y}: Disaggregate)).
Sum[(Sum{.x=x, .sum=sum}: Sum)] :- AggregateMeInts[(__aggregatemeints0@ (AggregateMeInts{.x=(x: string), .y=(y: bit<32>)}: AggregateMeInts))], var __inputs_sum = Aggregate(x, __debug_103_1_std::group_sum((__aggregatemeints0, y))), Inspect debug::debug_event((32'd103, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_sum.0, (__inputs_sum, x)), (var sum: bit<32>) = __inputs_sum.1, Inspect debug::debug_event((32'd103, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_sum, x), (Sum{.x=x, .sum=sum}: Sum)).
AggregateByX[(AggregateByX{.x=x, .cnt=cnt}: AggregateByX)] :- AggregateMe3[(__aggregateme30@ (AggregateMe3{.x=(x: string), .y=(y: string), .z=(z: string)}: AggregateMe3))], AggregateMe1[(__aggregateme11@ (AggregateMe1{.x=(x: string), .y=(y: string)}: AggregateMe1))], Inspect debug::debug_event_join((32'd104, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __aggregateme30, __aggregateme11, (__aggregateme30, x, y, z, __aggregateme11)), var __inputs_cnt = Aggregate(x, __debug_104_2_std::group_count(((__aggregateme30, x, y, z, __aggregateme11), ()))), Inspect debug::debug_event((32'd104, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_cnt.0, (__inputs_cnt, x)), (var cnt: std::usize) = __inputs_cnt.1, Inspect debug::debug_event((32'd104, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_cnt, x), (AggregateByX{.x=x, .cnt=cnt}: AggregateByX)).
Concat[(Concat{.s=s}: Concat)] :- AggregateMe3[(__aggregateme30@ (AggregateMe3{.x=(x: string), .y=(y: string), .z=(z: string)}: AggregateMe3))], var __inputs_s = Aggregate((x, z), __debug_105_1_concat_ys((__aggregateme30, y))), Inspect debug::debug_event((32'd105, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_s.0, __inputs_s), (var s: string) = __inputs_s.1, Inspect debug::debug_event((32'd105, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __inputs_s, (Concat{.s=s}: Concat)).
WithKeyDbg[(WithKeyDbg{.key=k, .val=v}: WithKeyDbg)] :- WithKey[(__withkey0@ (WithKey{.key=(k: bit<128>), .val=(v: string)}: WithKey))], Inspect debug::debug_event((32'd106, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __withkey0, (WithKeyDbg{.key=k, .val=v}: WithKeyDbg)).
Innocent[(Innocent{.name=name}: Innocent)] :- Suspect[(__suspect0@ (Suspect{.name=(name: string)}: Suspect))], not Gangster[(Gangster{.nickname=(_: string), .name=(name: string)}: Gangster)], Inspect debug::debug_event((32'd107, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Antijoin", __suspect0, (Innocent{.name=name}: Innocent)).
ValidDestination[(ValidDestination{.addr=addr}: ValidDestination)] :- Address[(__address0@ (Address{.addr=(addr: ip_addr_t)}: Address))], (IPAddr{.b3=(var b3: bit<8>), .b2=(var b2: bit<8>), .b1=(_: bit<8>), .b0=(_: bit<8>)}: ip_addr_t) = addr, Inspect debug::debug_event((32'd108, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __address0, (addr, b3, b2)), not Blacklist[(Blacklist{.addr=(IPAddr{.b3=(b3: bit<8>), .b2=(b2: bit<8>), .b1=(_: bit<8>), .b0=(_: bit<8>)}: ip_addr_t)}: Blacklist)], Inspect debug::debug_event((32'd108, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Antijoin", (addr, b3, b2), (ValidDestination{.addr=addr}: ValidDestination)).
HostAddress[(HostAddress{.host=host, .addr=addr}: HostAddress)] :- HostAddresses[(__hostaddresses0@ (HostAddresses{.host=(host: bit<64>), .addrs=(addrs: std::Set<string>)}: HostAddresses))], var addr = FlatMap(addrs), Inspect debug::debug_event((32'd109, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", __hostaddresses0, (HostAddress{.host=host, .addr=addr}: HostAddress)).
ExternalId[(ExternalId{.host=host, .id=id}: ExternalId)] :- ExternalIds[(__externalids0@ (ExternalIds{.host=(host: bit<64>), .ids=(ids: std::Map<string,string>)}: ExternalIds))], var id = FlatMap(ids), Inspect debug::debug_event((32'd110, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", __externalids0, (ExternalId{.host=host, .id=id}: ExternalId)).
Allocation[(Allocation{.name=name, .id=id, .x=x}: Allocation)] :- Request[(__request0@ (Request{.name=(name: string), .id=(id: string)}: Request))], Realized[(__realized1@ (Realized{.name=(name: string), .id=(id: string), .x=(x: bit<32>)}: Realized))], Inspect debug::debug_event_join((32'd111, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __request0, __realized1, (Allocation{.name=name, .id=id, .x=x}: Allocation)).
ToAllocate[(ToAllocate{.name=name, .ids=ids}: ToAllocate)] :- Request[(__request0@ (Request{.name=(name: string), .id=(id: string)}: Request))], not Realized[(Realized{.name=(name: string), .id=(id: string), .x=(_: bit<32>)}: Realized)], Inspect debug::debug_event((32'd112, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Antijoin", __request0, (__request0, name, id)), var __inputs_ids = Aggregate(name, __debug_112_2_std::group_to_vec(((__request0, name, id), id))), Inspect debug::debug_event((32'd112, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_ids.0, (__inputs_ids, name)), (var ids: std::Vec<string>) = __inputs_ids.1, Inspect debug::debug_event((32'd112, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_ids, name), (ToAllocate{.name=name, .ids=ids}: ToAllocate)).
Allocated[(Allocated{.name=name, .xs=xs}: Allocated)] :- Realized[(__realized0@ (Realized{.name=(name: string), .id=(_: string), .x=(x: bit<32>)}: Realized))], var __inputs_xs = Aggregate(name, __debug_113_1_std::group_to_set((__realized0, x))), Inspect debug::debug_event((32'd113, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_xs.0, (__inputs_xs, name)), (var xs: std::Set<bit<32>>) = __inputs_xs.1, Inspect debug::debug_event((32'd113, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_xs, name), (Allocated{.name=name, .xs=xs}: Allocated)).
Allocation[(Allocation{.name=name, .id=id, .x=x}: Allocation)] :- ToAllocate[(__toallocate0@ (ToAllocate{.name=(name: string), .ids=(ids: std::Vec<string>)}: ToAllocate))], Allocated[(__allocated1@ (Allocated{.name=(name: string), .xs=(xs: std::Set<bit<32>>)}: Allocated))], Inspect debug::debug_event_join((32'd114, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __toallocate0, __allocated1, (name, ids, xs)), var allocation = FlatMap((allocate::allocate(xs, ids, 32'd1, ((32'd1 << 32'd24) - 32'd1)): std::Vec<(string, bit<32>)>)), Inspect debug::debug_event((32'd114, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Flatmap", (name, ids, xs), (allocation, name)), ((var id: string), (var x: bit<32>)) = allocation, Inspect debug::debug_event((32'd114, 32'd3, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (allocation, name), (Allocation{.name=name, .id=id, .x=x}: Allocation)).
Referee[(Referee{.r=(std::ref_new(r): std::Ref<Referenced>)}: Referee)] :- Referenced[(r@ (Referenced{.x=(_: bool), .y=(std::Some{.x=(_: string)}: std::Option<string>)}: Referenced))], Inspect debug::debug_event((32'd115, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", r, (Referee{.r=(std::ref_new(r): std::Ref<Referenced>)}: Referee)).
Filtered[(Filtered{.r=r.r}: Filtered)] :- Referee[(r@ (Referee{.r=((&(Referenced{.x=true, .y=(_: std::Option<string>)}: Referenced)): std::Ref<Referenced>)}: Referee))], Inspect debug::debug_event((32'd116, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", r, (Filtered{.r=r.r}: Filtered)).
Referee2[(std::ref_new((Referee2{.r=r}: Referee2)): std::Ref<Referee2>)] :- Referenced[(__referenced0@ (r: Referenced))], Inspect debug::debug_event((32'd117, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __referenced0, (std::ref_new((Referee2{.r=r}: Referee2)): std::Ref<Referee2>)).
Filtered2[(Filtered2{.r=r}: Filtered2)] :- Referee2[(r@ ((&(Referee2{.r=(Referenced{.x=true, .y=(_: std::Option<string>)}: Referenced)}: Referee2)): std::Ref<Referee2>))], Inspect debug::debug_event((32'd118, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", r, (Filtered2{.r=r}: Filtered2)).
Filtered3[(Filtered3{.r=r.r}: Filtered3)] :- Referee[(r@ (Referee{.r=(_: std::Ref<Referenced>)}: Referee))], (r.r.x == true), Inspect debug::debug_event((32'd119, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", r, (Filtered3{.r=r.r}: Filtered3)).
NewAllocation[(NewAllocation{.id=id, .alloc=alloc}: NewAllocation)] :- Alloc[(__alloc0@ (Alloc{.id=(id: bigint), .allocated=(allocated: std::Map<string,bit<32>>), .toallocate=(toallocate: std::Vec<string>), .min_val=(min_val: bit<32>), .max_val=(max_val: bit<32>)}: Alloc))], (var allocated_nums: std::Set<bit<32>>) = ((var allocated_nums: std::Set<bit<32>>) = (std::set_empty(): std::Set<bit<32>>);
                                                                                                                                                                                                                                                                                                                               (for (a in allocated) {
                                                                                                                                                                                                                                                                                                                                    (((_: string), (var num: bit<32>)) = a;
                                                                                                                                                                                                                                                                                                                                     std::set_insert(allocated_nums, num))
                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                allocated_nums)), (var alloc: std::Vec<(string, bit<32>)>) = (allocate::allocate(allocated_nums, toallocate, min_val, max_val): std::Vec<(string, bit<32>)>), Inspect debug::debug_event((32'd120, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (id, toallocate, min_val, max_val, allocated_nums), (NewAllocation{.id=id, .alloc=alloc}: NewAllocation)).
NewAllocationOpt[(NewAllocationOpt{.id=id, .alloc=alloc}: NewAllocationOpt)] :- Alloc[(__alloc0@ (Alloc{.id=(id: bigint), .allocated=(allocated: std::Map<string,bit<32>>), .toallocate=(toallocate: std::Vec<string>), .min_val=(min_val: bit<32>), .max_val=(max_val: bit<32>)}: Alloc))], (var allocated_nums: std::Set<bit<32>>) = ((var allocated_nums: std::Set<bit<32>>) = (std::set_empty(): std::Set<bit<32>>);
                                                                                                                                                                                                                                                                                                                                        (for (a in allocated) {
                                                                                                                                                                                                                                                                                                                                             (((_: string), (var num: bit<32>)) = a;
                                                                                                                                                                                                                                                                                                                                              std::set_insert(allocated_nums, num))
                                                                                                                                                                                                                                                                                                                                         };
                                                                                                                                                                                                                                                                                                                                         allocated_nums)), (var alloc: std::Vec<(string, std::Option<bit<32>>)>) = (allocate::allocate_opt(allocated_nums, toallocate, min_val, max_val): std::Vec<(string, std::Option<bit<32>>)>), Inspect debug::debug_event((32'd121, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (id, toallocate, min_val, max_val, allocated_nums), (NewAllocationOpt{.id=id, .alloc=alloc}: NewAllocationOpt)).
Adjusted[(Adjusted{.id=id, .alloc=alloc}: Adjusted)] :- Alloc[(__alloc0@ (Alloc{.id=(id: bigint), .allocated=(allocated: std::Map<string,bit<32>>), .toallocate=(toallocate: std::Vec<string>), .min_val=(min_val: bit<32>), .max_val=(max_val: bit<32>)}: Alloc))], (var alloc: std::Vec<(string, bit<32>)>) = (allocate::adjust_allocation(allocated, toallocate, min_val, max_val): std::Vec<(string, bit<32>)>), Inspect debug::debug_event((32'd122, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", __alloc0, (Adjusted{.id=id, .alloc=alloc}: Adjusted)).
YX[(YX{.y=y, .x=x}: YX)] :- XY[(__xy0@ (XY{.x=(x: bigint), .y=(y: bigint)}: XY))], YZX[(__yzx1@ (YZX{.y=(y: bigint), .z=(z: bigint), .x=(x: bigint)}: YZX))], Inspect debug::debug_event_join((32'd123, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __xy0, __yzx1, (YX{.y=y, .x=x}: YX)).
IConcatString[(IConcatString{.s=intern::string_intern((intern::istring_str(s1) ++ s2))}: IConcatString)] :- IString1[(__istring10@ (IString1{.s=(s1: intern::IObj<string>)}: IString1))], String2[(__string21@ (String2{.s=(s2: string)}: String2))], Inspect debug::debug_event_join((32'd124, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __istring10, __string21, (IConcatString{.s=intern::string_intern((intern::istring_str(s1) ++ s2))}: IConcatString)).
ConcatString[(ConcatString{.s=intern::istring_str(s)}: ConcatString)] :- IConcatString[(__iconcatstring0@ (IConcatString{.s=(s: intern::IObj<string>)}: IConcatString))], Inspect debug::debug_event((32'd125, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __iconcatstring0, (ConcatString{.s=intern::istring_str(s)}: ConcatString)).
Ris_true[(Ris_true{._s=intern::string_intern("true")}: Ris_true)].
Re[(Re{._x=(32'd10 % 32'd3), ._t=intern::string_intern("10%3"), ._y=32'd1}: Re)] :- Ris_true[(__ris_true0@ (Ris_true{._s=(_: intern::IObj<string>)}: Ris_true))], Inspect debug::debug_event((32'd127, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __ris_true0, (Re{._x=(32'd10 % 32'd3), ._t=intern::string_intern("10%3"), ._y=32'd1}: Re)).
CMethod[(CMethod{.c1=a, .c2=b}: CMethod)] :- BMethod[(__bmethod0@ (BMethod{.b1=intern::string_intern("c"), .b2=(b: intern::IObj<string>)}: BMethod))], AMethod[(__amethod1@ (AMethod{.a1=(b: intern::IObj<string>), .a2=(a: intern::IObj<string>)}: AMethod))], Inspect debug::debug_event_join((32'd128, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __bmethod0, __amethod1, (CMethod{.c1=a, .c2=b}: CMethod)).
DMethod[(DMethod{.c1=a, .c2=b}: DMethod)] :- AMethod[(__amethod0@ (AMethod{.a1=(b: intern::IObj<string>), .a2=(a: intern::IObj<string>)}: AMethod))], BMethod[(__bmethod1@ (BMethod{.b1=intern::string_intern("c"), .b2=(b: intern::IObj<string>)}: BMethod))], Inspect debug::debug_event_join((32'd129, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __amethod0, __bmethod1, (DMethod{.c1=a, .c2=b}: DMethod)).
Power3[(Power3{.y=std::pow32(x, 32'd3)}: Power3)] :- Numbers[(__numbers0@ (Numbers{.x=(x: bigint)}: Numbers))], Inspect debug::debug_event((32'd130, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __numbers0, (Power3{.y=std::pow32(x, 32'd3)}: Power3)).
RegexMatch[(RegexMatch{.regex=regex, .text=text, .m=regex::regex_match(regex::regex(regex), text)}: RegexMatch)] :- Regex[(__regex0@ (Regex{.regex=(regex: string), .text=(text: string)}: Regex))], Inspect debug::debug_event((32'd131, 32'd0, 32'd0), ddlog_weight, ddlog_timestamp, "Map", __regex0, (RegexMatch{.regex=regex, .text=text, .m=regex::regex_match(regex::regex(regex), text)}: RegexMatch)).
Arithm[(Arithm{.n=32'd0}: Arithm)].
Arithm[(Arithm{.n=(32'd1 + 32'd0)}: Arithm)].
Arithm[(Arithm{.n=(32'd0 + 32'd2)}: Arithm)].
Arithm[(Arithm{.n=(32'd2 + 32'd1)}: Arithm)].
Arithm[(Arithm{.n=(32'd2 + 32'd2)}: Arithm)].
Arithm[(Arithm{.n=(32'd1 + 32'd4)}: Arithm)].
Arithm[(Arithm{.n=(32'd2 * 32'd3)}: Arithm)].
Arithm[(Arithm{.n=(32'd28 / 32'd4)}: Arithm)].
Arithm[(Arithm{.n=(32'd24 % 32'd16)}: Arithm)].
Arithm[(Arithm{.n=(32'd18 >> 32'd1)}: Arithm)].
Arithm[(Arithm{.n=(32'd5 << 32'd1)}: Arithm)].
Arithm[(Arithm{.n=(32'd10 | 32'd9)}: Arithm)].
Arithm[(Arithm{.n=(32'd15 & 32'd12)}: Arithm)].
Arithm[(Arithm{.n=(~ 32'd4294967282)}: Arithm)].
Arithm[(Arithm{.n=(32'sd14 as bit<32>)}: Arithm)].
Signed[(Signed{.n=32'sd0}: Signed)].
Signed[(Signed{.n=(32'sd1 + 32'sd0)}: Signed)].
Signed[(Signed{.n=(32'sd0 + 32'sd2)}: Signed)].
Signed[(Signed{.n=(32'sd2 + 32'sd1)}: Signed)].
Signed[(Signed{.n=(32'sd2 + 32'sd2)}: Signed)].
Signed[(Signed{.n=(32'sd1 + 32'sd4)}: Signed)].
Signed[(Signed{.n=(32'sd2 * 32'sd3)}: Signed)].
Signed[(Signed{.n=(32'sd28 / 32'sd4)}: Signed)].
Signed[(Signed{.n=(32'sd24 % 32'sd16)}: Signed)].
Signed[(Signed{.n=(32'sd18 >> 32'd1)}: Signed)].
Signed[(Signed{.n=(32'sd5 << 32'd1)}: Signed)].
Signed[(Signed{.n=(- 32'sd2147483648)}: Signed)].
Cast_u32[(Cast_u32{.description="32'd100  as bit<32>", .actual=(32'd100 as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="16'd100  as bit<32>", .actual=(16'd100 as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="8'd100   as bit<32>", .actual=(8'd100 as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="128'd100 as bit<32>", .actual=(128'd100 as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="256'd100 as bit<32>", .actual=(256'd100 as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="64'hffffffffffff as bit<32>", .actual=(64'd281474976710655 as bit<32>), .expected=32'd4294967295}: Cast_u32)].
Cast_u32[(Cast_u32{.description="128'hffffffffffffffffffff as bit<32>", .actual=(128'd1208925819614629174706175 as bit<32>), .expected=32'd4294967295}: Cast_u32)].
Cast_u32[(Cast_u32{.description="256'hffffffffffffffffffffffffffffffffffff as bit<32>", .actual=(256'd22300745198530623141535718272648361505980415 as bit<32>), .expected=32'd4294967295}: Cast_u32)].
Cast_u32[(Cast_u32{.description="(100: signed<32>) as bit<32>", .actual=((32'sd100: signed<32>) as bit<32>), .expected=32'd100}: Cast_u32)].
Cast_u32[(Cast_u32{.description="(32'sd0 - 32'sd10) as bit<32>", .actual=((32'sd0 - 32'sd10) as bit<32>), .expected=32'd4294967286}: Cast_u32)].
Cast_s32[(Cast_s32{.description="32'sd100  as signed<32>", .expected=(32'sd100 as signed<32>), .actual=32'sd100}: Cast_s32)].
Cast_s32[(Cast_s32{.description="16'sd100  as signed<32>", .expected=(16'sd100 as signed<32>), .actual=32'sd100}: Cast_s32)].
Cast_s32[(Cast_s32{.description="8'sd100   as signed<32>", .expected=(8'sd100 as signed<32>), .actual=32'sd100}: Cast_s32)].
Cast_s32[(Cast_s32{.description="128'sd100 as signed<32>", .expected=(128'sd100 as signed<32>), .actual=32'sd100}: Cast_s32)].
Cast_s32[(Cast_s32{.description="(-1: bigint as signed<32>)", .expected=((- (1: bigint)) as signed<32>), .actual=(- 32'sd1)}: Cast_s32)].
Cast_s32[(Cast_s32{.description="('hffffffffff: bigint as signed<32>)", .expected=((1099511627775: bigint) as signed<32>), .actual=(- 32'sd1)}: Cast_s32)].
Cast_s32[(Cast_s32{.description="('hff000000ff: bigint as signed<32>)", .expected=((1095216660735: bigint) as signed<32>), .actual=32'sd255}: Cast_s32)].
Cast_s32[(Cast_s32{.description="64'shffffffffffff as signed<32>", .expected=(64'sd281474976710655 as signed<32>), .actual=32'sd4294967295}: Cast_s32)].
Cast_s32[(Cast_s32{.description="128'shffffffffffffffffffff as signed<32>", .expected=(128'sd1208925819614629174706175 as signed<32>), .actual=32'sd4294967295}: Cast_s32)].
Cast_s32[(Cast_s32{.description="(100: bit<32>) as signed<32>", .expected=((32'd100: bit<32>) as signed<32>), .actual=32'sd100}: Cast_s32)].
Cast_s8[(Cast_s8{.description="(-1: bigint as signed<8>)", .expected=((- (1: bigint)) as signed<8>), .actual=(- 8'sd1)}: Cast_s8)].
Cast_s8[(Cast_s8{.description="('hffffffffff: bigint as signed<8>)", .expected=((1099511627775: bigint) as signed<8>), .actual=(- 8'sd1)}: Cast_s8)].
Cast_s8[(Cast_s8{.description="('hff0000000f: bigint as signed<8>)", .expected=((1095216660495: bigint) as signed<8>), .actual=8'sd15}: Cast_s8)].
Cast_s128[(Cast_s128{.description="(-1: bigint as signed<128>)", .expected=((- (1: bigint)) as signed<128>), .actual=(- 128'sd1)}: Cast_s128)].
Cast_s128[(Cast_s128{.description="('hffffffffffffffffffffffffffffffffff: bigint as signed<128>)", .expected=((87112285931760246646623899502532662132735: bigint) as signed<128>), .actual=(- 128'sd1)}: Cast_s128)].
Cast_s128[(Cast_s128{.description="('hff000000000000000000000000000000ff: bigint as signed<8>)", .expected=((86772003564839308183160524895100893921535: bigint) as signed<128>), .actual=128'sd255}: Cast_s128)].
Cast_u24[(Cast_u24{.description="24'd100  as bit<24>", .expected=(24'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="32'd100  as bit<24>", .expected=(32'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="16'd100  as bit<24>", .expected=(16'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="8'd100   as bit<24>", .expected=(8'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="128'd100 as bit<24>", .expected=(128'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="256'd100 as bit<24>", .expected=(256'd100 as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="64'hffffffffffff as bit<24>", .expected=(64'd281474976710655 as bit<24>), .actual=24'd16777215}: Cast_u24)].
Cast_u24[(Cast_u24{.description="128'hffffffffffffffffffff as bit<24>", .expected=(128'd1208925819614629174706175 as bit<24>), .actual=24'd16777215}: Cast_u24)].
Cast_u24[(Cast_u24{.description="256'hffffffffffffffffffffffffffffffffffff as bit<24>", .expected=(256'd22300745198530623141535718272648361505980415 as bit<24>), .actual=24'd16777215}: Cast_u24)].
Cast_u24[(Cast_u24{.description="(100: signed<32>) as bit<32> as bit<24>", .expected=(((32'sd100: signed<32>) as bit<32>) as bit<24>), .actual=24'd100}: Cast_u24)].
Cast_u24[(Cast_u24{.description="(32'sd0 - 32'sd10) as bit<32> as bit<24>", .expected=(((32'sd0 - 32'sd10) as bit<32>) as bit<24>), .actual=24'd16777206}: Cast_u24)].
Cast_u256[(Cast_u256{.description="24'd100  as bit<256>", .expected=(24'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="32'd100  as bit<256>", .expected=(32'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="16'd100  as bit<256>", .expected=(16'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="8'd100   as bit<256>", .expected=(8'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="128'd100 as bit<256>", .expected=(128'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="256'd100 as bit<256>", .expected=(256'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="512'd100 as bit<256>", .expected=(512'd100 as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bit<256>", .expected=(264'd29642774844752946028434172162224104410437116074403984394101141506025761187823610 as bit<256>), .actual=256'd115792089237316195423570985008687907853269984665640564039457584007913129639930}: Cast_u256)].
Cast_u256[(Cast_u256{.description="128'hffffffffffffffffffff as bit<256>", .expected=(128'd1208925819614629174706175 as bit<256>), .actual=256'd1208925819614629174706175}: Cast_u256)].
Cast_u256[(Cast_u256{.description="(100: signed<32>) as bit<32> as bit<256>", .expected=(((32'sd100: signed<32>) as bit<32>) as bit<256>), .actual=256'd100}: Cast_u256)].
Cast_u256[(Cast_u256{.description="(32'sd0 - 32'sd10) as bit<32> as bit<256>", .expected=(((32'sd0 - 32'sd10) as bit<32>) as bit<256>), .actual=256'd4294967286}: Cast_u256)].
Cast_bigint[(Cast_bigint{.description="24'd100  as bigint", .expected=(24'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="32'd100  as bigint", .expected=(32'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="16'd100  as bigint", .expected=(16'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="8'd100   as bigint", .expected=(8'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="128'd100 as bigint", .expected=(128'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="256'd100 as bigint", .expected=(256'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="512'd100 as bigint", .expected=(512'd100 as bigint), .actual=100}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="int_from_f(32'f3.5)", .expected=match (fp::int_from_f(32'f3.5)) {
                                                                           (std::None{}: std::Option<bigint>) -> 0,
                                                                           (std::Some{.x=(var x: bigint)}: std::Option<bigint>) -> x
                                                                       }, .actual=3}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="int_from_d(64'f3.5)", .expected=match (fp::int_from_d(64'f3.5)) {
                                                                           (std::None{}: std::Option<bigint>) -> 0,
                                                                           (std::Some{.x=(var x: bigint)}: std::Option<bigint>) -> x
                                                                       }, .actual=3}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as bigint", .expected=(264'd29642774844752946028434172162224104410437116074403984394101141506025761187823610 as bigint), .actual=29642774844752946028434172162224104410437116074403984394101141506025761187823610}: Cast_bigint)].
Cast_bigint[(Cast_bigint{.description="(32'sd0 - 32'sd10) as bigint", .expected=((32'sd0 - 32'sd10) as bigint), .actual=(0 - 10)}: Cast_bigint)].
Cast_float[(Cast_float{.description="24'd100  as float", .expected=(24'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="32'd100  as float", .expected=(32'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="16'sd100  as float", .expected=(16'sd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="-32'sd100  as float", .expected=(- (32'sd100 as float)), .actual=(- 32'f100.0)}: Cast_float)].
Cast_float[(Cast_float{.description="-16'sd100  as float", .expected=(- (16'sd100 as float)), .actual=(- 32'f100.0)}: Cast_float)].
Cast_float[(Cast_float{.description="32'sd100  as float", .expected=(32'sd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="16'd100  as float", .expected=(16'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="8'd100   as float", .expected=(8'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="128'd100 as float", .expected=(128'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="256'd100 as float", .expected=(256'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="512'd100 as float", .expected=(512'd100 as float), .actual=32'f100.0}: Cast_float)].
Cast_float[(Cast_float{.description="32'f3.5  as float", .expected=(32'f3.5 as float), .actual=32'f3.5}: Cast_float)].
Cast_float[(Cast_float{.description="64'f3.5  as float", .expected=(64'f3.5 as float), .actual=32'f3.5}: Cast_float)].
Cast_float[(Cast_float{.description="264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as float", .expected=(264'd29642774844752946028434172162224104410437116074403984394101141506025761187823610 as float), .actual=fp::nan_f()}: Cast_float)].
Cast_double[(Cast_double{.description="24'd100  as double", .expected=(24'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="32'd100  as double", .expected=(32'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="16'd100  as double", .expected=(16'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="8'd100   as double", .expected=(8'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="128'd100 as double", .expected=(128'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="256'd100 as double", .expected=(256'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="512'd100 as double", .expected=(512'd100 as double), .actual=64'f100.0}: Cast_double)].
Cast_double[(Cast_double{.description="32'f3.5  as double", .expected=(32'f3.5 as double), .actual=64'f3.5}: Cast_double)].
Cast_double[(Cast_double{.description="64'f3.5  as double", .expected=(64'f3.5 as double), .actual=64'f3.5}: Cast_double)].
Cast_double[(Cast_double{.description="264'hfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa as double", .expected=(264'd29642774844752946028434172162224104410437116074403984394101141506025761187823610 as double), .actual=64'f2.9642774844752946e79}: Cast_double)].
UMinus_s32[(UMinus_s32{.description="-32'sd100", .n=(- 32'sd100)}: UMinus_s32)].
UMinus_s32[(UMinus_s32{.description="-(-32'sd100)", .n=(- (- 32'sd100))}: UMinus_s32)].
UMinus_s32[(UMinus_s32{.description="-32768", .n=(- 32'sd32768)}: UMinus_s32)].
UMinus_bigint[(UMinus_bigint{.description="-100", .n=(- 100)}: UMinus_bigint)].
UMinus_bigint[(UMinus_bigint{.description="- -100", .n=(- (- 100))}: UMinus_bigint)].
UMinus_bigint[(UMinus_bigint{.description="-32768", .n=(- 32768)}: UMinus_bigint)].
Span[(Span{.entity=(entity: entid_t), .tns=bindings}: Span)] :- DdlogNode[(__ddlognode0@ (DdlogNode{.id=(entity: bit<32>)}: DdlogNode))], DdlogBinding[(__ddlogbinding1@ (DdlogBinding{.tn=(tn: bit<16>), .entity=(entity: bit<32>)}: DdlogBinding))], Inspect debug::debug_event_join((32'd248, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __ddlognode0, __ddlogbinding1, (__ddlognode0, entity, __ddlogbinding1, tn)), var __inputs_bindings = Aggregate(entity, __debug_248_2_std::group_to_set(((__ddlognode0, entity, __ddlogbinding1, tn), tn))), Inspect debug::debug_event((32'd248, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_bindings.0, (__inputs_bindings, entity)), (var bindings: std::Set<bit<16>>) = __inputs_bindings.1, Inspect debug::debug_event((32'd248, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_bindings, entity), (Span{.entity=(entity: entid_t), .tns=bindings}: Span)).
Span[(Span{.entity=parent, .tns=tns}: Span)] :- DdlogNode[(__ddlognode0@ (DdlogNode{.id=(parent: bit<32>)}: DdlogNode))], DdlogDependency[(__ddlogdependency1@ (DdlogDependency{.parent=(child: bit<32>), .child=(parent: bit<32>)}: DdlogDependency))], Inspect debug::debug_event_join((32'd249, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __ddlognode0, __ddlogdependency1, (__ddlognode0, parent, __ddlogdependency1, child)), Span[(__span2@ (Span{.entity=(child: bit<32>), .tns=(child_tns: std::Set<tnid_t>)}: Span))], Inspect debug::debug_event_join((32'd249, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, (__ddlognode0, parent, __ddlogdependency1, child), __span2, (__ddlognode0, parent, __ddlogdependency1, child, __span2, child_tns)), var __inputs_tns = Aggregate(parent, __debug_249_3_std::group_set_unions(((__ddlognode0, parent, __ddlogdependency1, child, __span2, child_tns), child_tns))), Inspect debug::debug_event((32'd249, 32'd3, 32'd0), ddlog_weight, ddlog_timestamp, "Aggregate", __inputs_tns.0, (__inputs_tns, parent)), (var tns: std::Set<bit<16>>) = __inputs_tns.1, Inspect debug::debug_event((32'd249, 32'd3, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", (__inputs_tns, parent), (Span{.entity=parent, .tns=tns}: Span)).
R13[(R13{.t=(1, true, "", 32'd1)}: R13)].
R14[(R14{.t=(1, (true, ("", 32'd1)))}: R14)].
R14[(R14{.t=(0, (true, ("", 32'd1)))}: R14)].
J[(J{.b=b}: J)] :- R13[(__r130@ (R13{.t=(a: (t00, t01, t02, t03))}: R13))], R14[(__r141@ (R14{.t=(c: (bigint, (bool, (string, bit<32>))))}: R14))], Inspect debug::debug_event_join((32'd253, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __r130, __r141, (a, c)), (a.3 == c.1.1.1), (var b: bool) = a.1, Inspect debug::debug_event((32'd253, 32'd3, 32'd0), ddlog_weight, ddlog_timestamp, "Condition", a, (J{.b=b}: J)).
LongJoin[(LongJoin{.x0=x0, .x1=x1, .x2=x2, .x3=x3, .x4=x4, .x5=x5, .x6=x6, .x7=x7, .x8=x8, .x9=x9, .x10=x10, .x11=x11, .x12=x12, .x13=x13, .x14=x14, .x15=x15, .x16=x16, .x17=x17, .x18=x18, .x19=x19}: LongJoin)] :- Long[(__long0@ (Long{.x0=(x0: bit<16>), .x1=(x1: bit<16>), .x2=(x2: bit<16>), .x3=(x3: bit<16>), .x4=(x4: bit<16>), .x5=(x5: bit<16>), .x6=(x6: bit<16>), .x7=(x7: bit<16>), .x8=(x8: bit<16>), .x9=(x9: bit<16>), .x10=(x10: bit<16>), .x11=(x11: bit<16>), .x12=(x12: bit<16>), .x13=(x13: bit<16>), .x14=(x14: bit<16>), .x15=(x15: bit<16>), .x16=(x16: bit<16>), .x17=(x17: bit<16>), .x18=(x18: bit<16>), .x19=(x19: bit<16>)}: Long))], Long[(__long1@ (Long{.x0=(x0: bit<16>), .x1=(x1: bit<16>), .x2=(x2: bit<16>), .x3=(x3: bit<16>), .x4=(x4: bit<16>), .x5=(x5: bit<16>), .x6=(x6: bit<16>), .x7=(x7: bit<16>), .x8=(x8: bit<16>), .x9=(x9: bit<16>), .x10=(x10: bit<16>), .x11=(x11: bit<16>), .x12=(x12: bit<16>), .x13=(x13: bit<16>), .x14=(x14: bit<16>), .x15=(x15: bit<16>), .x16=(x16: bit<16>), .x17=(x17: bit<16>), .x18=(x18: bit<16>), .x19=(x19: bit<16>)}: Long))], Inspect debug::debug_event_join((32'd254, 32'd1, 32'd0), ddlog_weight, ddlog_timestamp, __long0, __long1, (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)), Long[(__long2@ (Long{.x0=(x0: bit<16>), .x1=(x1: bit<16>), .x2=(x2: bit<16>), .x3=(x3: bit<16>), .x4=(x4: bit<16>), .x5=(x5: bit<16>), .x6=(x6: bit<16>), .x7=(x7: bit<16>), .x8=(x8: bit<16>), .x9=(x9: bit<16>), .x10=(x10: bit<16>), .x11=(x11: bit<16>), .x12=(x12: bit<16>), .x13=(x13: bit<16>), .x14=(x14: bit<16>), .x15=(x15: bit<16>), .x16=(x16: bit<16>), .x17=(x17: bit<16>), .x18=(x18: bit<16>), .x19=(x19: bit<16>)}: Long))], Inspect debug::debug_event_join((32'd254, 32'd2, 32'd0), ddlog_weight, ddlog_timestamp, (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19), __long2, (LongJoin{.x0=x0, .x1=x1, .x2=x2, .x3=x3, .x4=x4, .x5=x5, .x6=x6, .x7=x7, .x8=x8, .x9=x9, .x10=x10, .x11=x11, .x12=x12, .x13=x13, .x14=x14, .x15=x15, .x16=x16, .x17=x17, .x18=x18, .x19=x19}: LongJoin)).
ControlFlow[(ControlFlow{.expr="all(true, true, false)", .value=("" ++ (std::__builtin_2string(all((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), true): std::Vec<bool>), true): std::Vec<bool>), false): std::Vec<bool>))): string))}: ControlFlow)].
ControlFlow[(ControlFlow{.expr="all(true, true, true)", .value=("" ++ (std::__builtin_2string(all((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), true): std::Vec<bool>), true): std::Vec<bool>), true): std::Vec<bool>))): string))}: ControlFlow)].
ControlFlow[(ControlFlow{.expr="any(false, true, false)", .value=("" ++ (std::__builtin_2string(any((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), false): std::Vec<bool>), true): std::Vec<bool>), false): std::Vec<bool>))): string))}: ControlFlow)].
ControlFlow[(ControlFlow{.expr="any(false, false, false)", .value=("" ++ (std::__builtin_2string(any((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), false): std::Vec<bool>), false): std::Vec<bool>), false): std::Vec<bool>))): string))}: ControlFlow)].
ControlFlow[(ControlFlow{.expr="weird_any(false, true, false)", .value=("" ++ (std::__builtin_2string(weird_any((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), false): std::Vec<bool>), true): std::Vec<bool>), false): std::Vec<bool>))): string))}: ControlFlow)].
ControlFlow[(ControlFlow{.expr="weird_any(false, false, false)", .value=("" ++ (std::__builtin_2string(weird_any((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bool>), false): std::Vec<bool>), false): std::Vec<bool>), false): std::Vec<bool>))): string))}: ControlFlow)].
BigintVectors[(BigintVectors{.expr="filter_gt((10, 20, 30), 15)", .vec=filter_gt((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bigint>), 10): std::Vec<bigint>), 20): std::Vec<bigint>), 30): std::Vec<bigint>), 15)}: BigintVectors)].
BigintVectors[(BigintVectors{.expr="filter_C0(C0{1}, C1{2}, C1{0}, C1{3})", .vec=filter_C0((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<Alt>), (C0{.x=32'd1}: Alt)): std::Vec<Alt>), (C1{.x=32'd2}: Alt)): std::Vec<Alt>), (C1{.x=32'd0}: Alt)): std::Vec<Alt>), (C1{.x=32'd3}: Alt)): std::Vec<Alt>))}: BigintVectors)].
BigintVectors[(BigintVectors{.expr="double_evens(1,2,-1,4)", .vec=double_evens((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bigint>), 1): std::Vec<bigint>), 2): std::Vec<bigint>), (- 1)): std::Vec<bigint>), 4): std::Vec<bigint>))}: BigintVectors)].
BigintVectors[(BigintVectors{.expr="double_evens(1,2,0,4)", .vec=double_evens((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<bigint>), 1): std::Vec<bigint>), 2): std::Vec<bigint>), 0): std::Vec<bigint>), 4): std::Vec<bigint>))}: BigintVectors)].
Trees[(Trees{.tree=((var leaf1: Tree<bit<64>>) = (LeafNode{.v=64'd100}: Tree<bit<64>>);
                    ((var leaf2: Tree<bit<64>>) = (LeafNode{.v=64'd200}: Tree<bit<64>>);
                     ((var leaf3: Tree<bit<64>>) = (LeafNode{.v=64'd300}: Tree<bit<64>>);
                      ((var nonleaf: Tree<bit<64>>) = (NonLeafNode{.branches=(std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<Tree<std::u64>>), leaf1): std::Vec<Tree<bit<64>>>), leaf2): std::Vec<Tree<bit<64>>>)}: Tree<bit<64>>);
                       (NonLeafNode{.branches=(std::vec_push_imm((std::vec_push_imm((std::vec_empty(): std::Vec<Tree<std::u64>>), leaf3): std::Vec<Tree<bit<64>>>), nonleaf): std::Vec<Tree<bit<64>>>)}: Tree<std::u64>)))))}: Trees)].
Doubles[(Doubles{.s="64'f5.0", .d=64'f5.0}: Doubles)].
Doubles[(Doubles{.s="64'f5e2", .d=64'f500.0}: Doubles)].
Doubles[(Doubles{.s="-5", .d=(- 64'f5.0)}: Doubles)].
Doubles[(Doubles{.s="5 + 3", .d=(64'f5.0 + 64'f3.0)}: Doubles)].
Doubles[(Doubles{.s="5/3", .d=(64'f5.0 / 64'f3.0)}: Doubles)].
Doubles[(Doubles{.s="5*3", .d=(64'f5.0 * 64'f3.0)}: Doubles)].
Doubles[(Doubles{.s="0: double", .d=(64'f0.0: double)}: Doubles)].
Doubles[(Doubles{.s="floor_d(64'f0.1)", .d=fp::floor_d(64'f0.1)}: Doubles)].
Doubles[(Doubles{.s=("" ++ (std::__builtin_2string((64'f5.0 + 64'f5.0)): string)), .d=(64'f5.0 + 64'f3.0)}: Doubles)].
Floats[(Floats{.s="32'f5.0", .f=32'f5.0}: Floats)].
Floats[(Floats{.s="32'f5e2", .f=32'f500.0}: Floats)].
Floats[(Floats{.s="5 + 3", .f=(32'f5.0 + 32'f3.0)}: Floats)].
Floats[(Floats{.s="5/3", .f=(32'f5.0 / 32'f3.0)}: Floats)].
Floats[(Floats{.s="5*3", .f=(32'f5.0 * 32'f3.0)}: Floats)].
Floats[(Floats{.s="0: float", .f=(32'f0.0: float)}: Floats)].
Floats[(Floats{.s="floor_f(32'f0.1)", .f=fp::floor_f(32'f0.1)}: Floats)].
apply graph::SCC(Edge, edge_from, edge_to) -> (SCCLabel)

