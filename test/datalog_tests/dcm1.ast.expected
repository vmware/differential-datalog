typedef BATCHSIZE = BATCHSIZE{pending_pods_limit: signed<64>}
typedef CONTAINERHOSTPORTS = CONTAINERHOSTPORTS{pod_name: intern.IString, node_name: intern.IString, host_ip: intern.IString, host_port: signed<64>, host_protocol: intern.IString}
typedef CPUUSEDPERNODE = CPUUSEDPERNODE{name: intern.IString, cpu: signed<64>}
typedef INTERPODAFFINITYMATCHES = INTERPODAFFINITYMATCHES{pod_name: intern.IString, matches: intern.IString, node_name: intern.IString, num_matches: bit<64>}
typedef INTERPODAFFINITYMATCHESGROUPBY = INTERPODAFFINITYMATCHESGROUPBY{pod_name: intern.IString, num_matches: bit<64>}
typedef INTERPODAFFINITYMATCHESINNER = INTERPODAFFINITYMATCHESINNER{pod_name: intern.IString, matches: intern.IString, node_name: intern.IString}
typedef INTERPODAFFINITYMATCHESINNEREXISTS = INTERPODAFFINITYMATCHESINNEREXISTS{pod_name: intern.IString, matches: intern.IString, node_name: intern.IString}
typedef INTERPODAFFINITYMATCHESINNERIN = INTERPODAFFINITYMATCHESINNERIN{pod_name: intern.IString, matches: intern.IString, node_name: intern.IString}
typedef INTERPODAFFINITYMATCHESINNERNOT = INTERPODAFFINITYMATCHESINNERNOT{pod_name: intern.IString, matches: intern.IString, node_name: intern.IString}
typedef LABELSTOCHECKFORPRESENCE = LABELSTOCHECKFORPRESENCE{label_key: intern.IString, present: bool}
typedef MEMORYUSEDPERNODE = MEMORYUSEDPERNODE{name: intern.IString, memory: signed<64>}
typedef NODE = NODE{name: intern.IString, unschedulable: bool, out_of_disk: bool, memory_pressure: bool, disk_pressure: bool, pid_pressure: bool, ready: bool, network_unavailable: bool, cpu_capacity: signed<64>, memory_capacity: signed<64>, ephemeral_storage_capacity: signed<64>, pods_capacity: signed<64>, cpu_allocatable: signed<64>, memory_allocatable: signed<64>, ephemeral_storage_allocatable: signed<64>, pods_allocatable: signed<64>}
typedef NODEIMAGES = NODEIMAGES{node_name: intern.IString, image_name: intern.IString, image_size: signed<64>}
typedef NODELABELS = NODELABELS{node_name: intern.IString, label_key: intern.IString, label_value: intern.IString}
typedef NODESTHATHAVETOLERATIONS = NODESTHATHAVETOLERATIONS{node_name: intern.IString}
typedef NODETAINTS = NODETAINTS{node_name: intern.IString, taint_key: intern.IString, taint_value: intern.IString, taint_effect: intern.IString}
typedef NODETAINTSGROUP = NODETAINTSGROUP{node_name: intern.IString, num_taints: bit<64>}
typedef POD = POD{pod_name: intern.IString, status: intern.IString, node_name: intern.IString, namespace: intern.IString, cpu_request: signed<64>, memory_request: signed<64>, ephemeral_storage_request: signed<64>, pods_request: signed<64>, owner_name: intern.IString, creation_timestamp: intern.IString, priority: signed<64>, schedularName: intern.IString, has_node_selector_labels: bool, has_pod_affinity_requirements: bool}
typedef PODAFFINITYMATCHEXPRESSIONS = PODAFFINITYMATCHEXPRESSIONS{pod_name: intern.IString, label_selector: signed<64>, match_expression: signed<64>, num_match_expressions: signed<64>, label_key: intern.IString, label_operator: intern.IString, label_value: intern.IString, topology_key: intern.IString}
typedef PODANTIAFFINITYMATCHEXPRESSIONS = PODANTIAFFINITYMATCHEXPRESSIONS{pod_name: intern.IString, label_key: intern.IString, label_operator: intern.IString, label_value: intern.IString, topology_key: intern.IString}
typedef PODBYSERVICE = PODBYSERVICE{pod_name: intern.IString, service_name: intern.IString}
typedef PODIMAGES = PODIMAGES{pod_name: intern.IString, image_name: intern.IString}
typedef PODLABELS = PODLABELS{pod_name: intern.IString, label_key: intern.IString, label_value: intern.IString}
typedef PODNODESELECTORLABELS = PODNODESELECTORLABELS{pod_name: intern.IString, term: signed<64>, match_expression: signed<64>, num_match_expressions: signed<64>, label_key: intern.IString, label_operator: intern.IString, label_value: intern.IString}
typedef PODNODESELECTORMATCHES = PODNODESELECTORMATCHES{pod_name: intern.IString, node_name: intern.IString}
typedef PODNODESELECTORMATCHESEXISTS = PODNODESELECTORMATCHESEXISTS{pod_name: intern.IString, node_name: intern.IString}
typedef PODNODESELECTORMATCHESIN = PODNODESELECTORMATCHESIN{pod_name: intern.IString, node_name: intern.IString}
typedef PODNODESELECTORMATCHESNOT = PODNODESELECTORMATCHESNOT{pod_name: intern.IString, node_name: intern.IString}
typedef PODPORTSREQUEST = PODPORTSREQUEST{pod_name: intern.IString, host_ip: intern.IString, host_port: signed<64>, host_protocol: intern.IString}
typedef PODSTHATTOLERATENODETAINTS = PODSTHATTOLERATENODETAINTS{pod_name: intern.IString, node_name: intern.IString}
typedef PODSTOASSIGN = PODSTOASSIGN{pod_name: intern.IString, status: intern.IString, controllable__node_name: intern.IString, namespace: intern.IString, cpu_request: signed<64>, memory_request: signed<64>, ephemeral_storage_request: signed<64>, pods_request: signed<64>, owner_name: intern.IString, creation_timestamp: intern.IString, has_node_selector_labels: bool, has_pod_affinity_requirements: bool}
typedef PODSTOASSIGNNOLIMIT = PODSTOASSIGNNOLIMIT{pod_name: intern.IString, status: intern.IString, node_name: intern.IString, namespace: intern.IString, cpu_request: signed<64>, memory_request: signed<64>, ephemeral_storage_request: signed<64>, pods_request: signed<64>, owner_name: intern.IString, creation_timestamp: intern.IString, has_node_selector_labels: bool, has_pod_affinity_requirements: bool}
typedef PODSUSEDPERNODE = PODSUSEDPERNODE{name: intern.IString, pods: signed<64>}
typedef PODSWITHPORTREQUESTS = PODSWITHPORTREQUESTS{controllable__node_name: intern.IString, host_ip: intern.IString, host_port: signed<64>, host_protocol: intern.IString}
typedef PODTOLERATIONS = PODTOLERATIONS{pod_name: intern.IString, tolerations_key: intern.IString, tolerations_value: intern.IString, tolerations_effect: intern.IString, tolerations_operator: intern.IString}
typedef PodAllLabels = PodAllLabels{pod_name: intern.IString, node_name: intern.IString, labels: std.Map<intern.IString,intern.IString>}
typedef PodLabelSelector = PodLabelSelector{pod_name: intern.IString, expressions: std.Vec<(intern.IString, intern.IString, std.Set<intern.IString>)>}
typedef SERVICEAFFINITYLABELS = SERVICEAFFINITYLABELS{label_key: intern.IString}
typedef SPARECAPACITY = SPARECAPACITY{name: intern.IString, cpu_remaining: signed<64>, memory_remaining: signed<64>, pods_remaining: signed<64>}
typedef VOLUMELABELS = VOLUMELABELS{volume_name: intern.IString, pod_name: intern.IString, label_key: intern.IString, label_value: intern.IString}
#[size = 4]
extern type intern.IObj<'A>
typedef intern.IString = intern.IObj<string>
typedef log.log_level_t = signed<32>
typedef log.module_t = signed<32>
typedef std.Either<'A,'B> = std.Left{l: 'A} | std.Right{r: 'B}
extern type std.Group<'A>
extern type std.Map<'K,'V>
typedef std.Option<'A> = std.None{} | std.Some{x: 'A}
#[size = 8]
extern type std.Ref<'A>
typedef std.Result<'V,'E> = std.Ok{res: 'V} | std.Err{err: 'E}
extern type std.Set<'A>
extern type std.Vec<'A>
function cast_bit64_to_bigint (x: bit<64>): bigint =
    (x as bigint)
function cast_bit64_to_signedbit64 (x: bit<64>): signed<64> =
    (x as signed<64>)
function count_uniq (g: std.Group<signed<64>>): bit<64> =
    ((var set: std.Set<signed<64>>) = std.set_empty();
     (for (item in g) {
          std.set_insert(set, item)
      };
      ((var count: bit<64>) = std.set_size(set);
       count)))
function group2expressions (g: std.Group<(signed<64>, intern.IString, intern.IString, intern.IString)>): std.Vec<(intern.IString, intern.IString, std.Set<intern.IString>)> =
    ((var expressions: std.Map<signed<64>,(intern.IString, intern.IString, std.Set<intern.IString>)>) = std.map_empty();
     (for (e in g) {
          match (std.map_get(expressions, e.0)) {
              std.None{} -> std.map_insert(expressions, e.0, (e.1, e.2, std.set_singleton(e.3))),
              std.Some{.x=(var op, var k, var vals)} -> std.map_insert(expressions, e.0, (op, k, std.set_insert_imm(vals, e.3)))
          }
      };
      ((var expression_vec: std.Vec<(intern.IString, intern.IString, std.Set<intern.IString>)>) = std.vec_empty();
       (for (e in expressions) {
            std.vec_push(expression_vec, e.1)
        };
        expression_vec))))
extern function intern.istring_ord (s: intern.IString): bit<32>
extern function intern.istring_str (s: intern.IString): string
extern function intern.string_intern (s: string): intern.IString
extern function log.log (module: log.module_t, level: log.log_level_t, msg: string): bool
function pod_matches_expression (operator: intern.IString, expr_key: intern.IString, expr_vals: std.Set<intern.IString>, labels: std.Map<intern.IString,intern.IString>): bool =
    if (operator == intern.string_intern("Exists")) {
        std.is_some(std.map_get(labels, expr_key))
    } else {
          if (operator == intern.string_intern("In")) {
              match (std.map_get(labels, expr_key)) {
                  std.None{} -> false,
                  std.Some{.x=var val} -> std.set_contains(expr_vals, val)
              }
          } else {
                if (operator == intern.string_intern("DoesNotExist")) {
                    std.is_none(std.map_get(labels, expr_key))
                } else {
                      if (operator == intern.string_intern("NotIn")) {
                          match (std.map_get(labels, expr_key)) {
                              std.None{} -> true,
                              std.Some{.x=var val} -> (not std.set_contains(expr_vals, val))
                          }
                      } else {
                            false
                        }
                  }
            }
      }
function pod_matches_label_selector (expressions: std.Vec<(intern.IString, intern.IString, std.Set<intern.IString>)>, labels: std.Map<intern.IString,intern.IString>): bool =
    (var matches = true;
     (for (e in expressions) {
          if matches {
              matches = pod_matches_expression(e.0, e.1, e.2, labels)
          } else {
                ()
            }
      };
      matches))
extern function std.__builtin_2string (x: 'X): string
extern function std.deref (x: std.Ref<'A>): 'A
extern function std.group2map (g: std.Group<('K, 'V)>): std.Map<'K,'V>
extern function std.group2set (g: std.Group<'A>): std.Set<'A>
extern function std.group2vec (g: std.Group<'A>): std.Vec<'A>
extern function std.group_count (g: std.Group<'A>): bit<64>
extern function std.group_first (g: std.Group<'A>): 'A
extern function std.group_max (g: std.Group<'A>): 'A
extern function std.group_min (g: std.Group<'A>): 'A
extern function std.group_nth (g: std.Group<'A>, n: bit<64>): std.Option<'A>
extern function std.group_set_unions (g: std.Group<std.Set<'A>>): std.Set<'A>
extern function std.group_setref_unions (g: std.Group<std.Ref<std.Set<'A>>>): std.Ref<std.Set<'A>>
extern function std.group_sum (g: std.Group<'A>): 'A
function std.group_unzip (g: std.Group<('X, 'Y)>): (std.Vec<'X>, std.Vec<'Y>) =
    ((var xs: std.Vec<'X>) = std.vec_empty();
     ((var ys: std.Vec<'Y>) = std.vec_empty();
      (for (v in g) {
           ((var x, var y) = v;
            (std.vec_push(xs, x);
             std.vec_push(ys, y)))
       };
       (xs, ys))))
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
extern function std.htonl (x: bit<32>): bit<32>
extern function std.htons (x: bit<16>): bit<16>
function std.is_err (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> false,
        std.Err{.err=_} -> true
    }
function std.is_none (x: std.Option<'A>): bool =
    match (x) {
        std.None{} -> true,
        _ -> false
    }
function std.is_ok (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> true,
        std.Err{.err=_} -> false
    }
function std.is_some (x: std.Option<'A>): bool =
    match (x) {
        std.Some{.x=_} -> true,
        _ -> false
    }
extern function std.map_contains_key (m: std.Map<'K,'V>, k: 'K): bool
extern function std.map_empty (): std.Map<'K,'V>
extern function std.map_get (m: std.Map<'K,'V>, k: 'K): std.Option<'V>
extern function std.map_insert (m: mut std.Map<'K,'V>, k: 'K, v: 'V): ()
extern function std.map_insert_imm (m: std.Map<'K,'V>, k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_is_empty (m: std.Map<'K,'V>): bool
extern function std.map_remove (m: mut std.Map<'K,'V>, k: 'K): ()
extern function std.map_singleton (k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_union (m1: std.Map<'K,'V>, m2: std.Map<'K,'V>): std.Map<'K,'V>
function std.max (x: 'A, y: 'A): 'A =
    if (x > y) {
        x
    } else {
          y
      }
function std.min (x: 'A, y: 'A): 'A =
    if (x < y) {
        x
    } else {
          y
      }
extern function std.ntohl (x: bit<32>): bit<32>
extern function std.ntohs (x: bit<16>): bit<16>
function std.option_unwrap_or (x: std.Option<'A>, def: 'A): 'A =
    match (x) {
        std.Some{.x=var v} -> v,
        std.None{} -> def
    }
extern function std.parse_dec_i64 (s: string): std.Option<signed<64>>
extern function std.parse_dec_u64 (s: string): std.Option<bit<64>>
extern function std.pow32 (base: 'A, exp: bit<32>): 'A
extern function std.range (from: 'A, to: 'A, step: 'A): std.Vec<'A>
extern function std.ref_new (x: 'A): std.Ref<'A>
function std.result_unwrap_or (res: std.Result<'V,'E>, def: 'V): 'V =
    match (res) {
        std.Ok{.res=var v} -> v,
        std.Err{.err=_} -> def
    }
extern function std.set2vec (s: std.Set<'A>): std.Vec<'A>
extern function std.set_contains (s: std.Set<'X>, v: 'X): bool
extern function std.set_empty (): std.Set<'X>
extern function std.set_insert (s: mut std.Set<'X>, v: 'X): ()
extern function std.set_insert_imm (s: std.Set<'X>, v: 'X): std.Set<'X>
extern function std.set_is_empty (s: std.Set<'X>): bool
extern function std.set_nth (s: std.Set<'X>, n: bit<64>): std.Option<'X>
extern function std.set_singleton (x: 'X): std.Set<'X>
extern function std.set_size (s: std.Set<'X>): bit<64>
extern function std.set_union (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_unions (sets: std.Vec<std.Set<'X>>): std.Set<'X>
extern function std.str_to_lower (s: string): string
extern function std.string_contains (s1: string, s2: string): bool
extern function std.string_join (strings: std.Vec<string>, sep: string): string
extern function std.string_len (s: string): bit<64>
extern function std.string_split (s: string, sep: string): std.Vec<string>
extern function std.string_substr (s: string, start: bit<64>, end: bit<64>): string
extern function std.vec2set (s: std.Vec<'A>): std.Set<'A>
extern function std.vec_append (v: mut std.Vec<'X>, other: std.Vec<'X>): ()
extern function std.vec_contains (v: std.Vec<'X>, x: 'X): bool
extern function std.vec_empty (): std.Vec<'A>
extern function std.vec_is_empty (v: std.Vec<'X>): bool
extern function std.vec_len (v: std.Vec<'X>): bit<64>
extern function std.vec_nth (v: std.Vec<'X>, n: bit<64>): std.Option<'X>
extern function std.vec_push (v: mut std.Vec<'X>, x: 'X): ()
extern function std.vec_push_imm (v: std.Vec<'X>, x: 'X): std.Vec<'X>
extern function std.vec_singleton (x: 'X): std.Vec<'X>
extern function std.vec_with_length (len: bit<64>, x: 'A): std.Vec<'A>
function sum (g: std.Group<signed<64>>): signed<64> =
    ((var sum: signed<64>) = 64'sd0;
     (for (resource in g) {
          sum = (resource + sum)
      };
      sum))
input relation BATCHSIZE [BATCHSIZE]
input relation CONTAINERHOSTPORTS [CONTAINERHOSTPORTS]
relation CPUUSEDPERNODE [CPUUSEDPERNODE]
output relation INTERPODAFFINITYMATCHES [INTERPODAFFINITYMATCHES]
relation INTERPODAFFINITYMATCHESGROUPBY [INTERPODAFFINITYMATCHESGROUPBY]
output relation INTERPODAFFINITYMATCHESINNER [INTERPODAFFINITYMATCHESINNER]
relation INTERPODAFFINITYMATCHESINNEREXISTS [INTERPODAFFINITYMATCHESINNEREXISTS]
relation INTERPODAFFINITYMATCHESINNERIN [INTERPODAFFINITYMATCHESINNERIN]
relation INTERPODAFFINITYMATCHESINNERNOT [INTERPODAFFINITYMATCHESINNERNOT]
input relation LABELSTOCHECKFORPRESENCE [LABELSTOCHECKFORPRESENCE]
relation MEMORYUSEDPERNODE [MEMORYUSEDPERNODE]
input relation NODE [NODE]
input relation NODEIMAGES [NODEIMAGES]
input relation NODELABELS [NODELABELS]
output relation NODESTHATHAVETOLERATIONS [NODESTHATHAVETOLERATIONS]
input relation NODETAINTS [NODETAINTS]
relation NODETAINTSGROUP [NODETAINTSGROUP]
input relation POD [POD]
input relation PODAFFINITYMATCHEXPRESSIONS [PODAFFINITYMATCHEXPRESSIONS]
input relation PODANTIAFFINITYMATCHEXPRESSIONS [PODANTIAFFINITYMATCHEXPRESSIONS]
input relation PODBYSERVICE [PODBYSERVICE]
input relation PODIMAGES [PODIMAGES]
input relation PODLABELS [PODLABELS]
input relation PODNODESELECTORLABELS [PODNODESELECTORLABELS]
output relation PODNODESELECTORMATCHES [PODNODESELECTORMATCHES]
relation PODNODESELECTORMATCHESEXISTS [PODNODESELECTORMATCHESEXISTS]
relation PODNODESELECTORMATCHESIN [PODNODESELECTORMATCHESIN]
relation PODNODESELECTORMATCHESNOT [PODNODESELECTORMATCHESNOT]
input relation PODPORTSREQUEST [PODPORTSREQUEST]
output relation PODSTHATTOLERATENODETAINTS [PODSTHATTOLERATENODETAINTS]
output relation PODSTOASSIGN [PODSTOASSIGN]
output relation PODSTOASSIGNNOLIMIT [PODSTOASSIGNNOLIMIT]
relation PODSUSEDPERNODE [PODSUSEDPERNODE]
output relation PODSWITHPORTREQUESTS [PODSWITHPORTREQUESTS]
input relation PODTOLERATIONS [PODTOLERATIONS]
relation PodAllLabels [PodAllLabels]
relation PodLabelSelector [PodLabelSelector]
input relation SERVICEAFFINITYLABELS [SERVICEAFFINITYLABELS]
output relation SPARECAPACITY [SPARECAPACITY]
input relation VOLUMELABELS [VOLUMELABELS]
CPUUSEDPERNODE(.name=node_name, .cpu=cpu) :- POD(.pod_name=_, .status=_, .node_name=node_name, .namespace=_, .cpu_request=cpu_request, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .priority=_, .schedularName=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), var cpu = Aggregate((node_name), sum(cpu_request)).
MEMORYUSEDPERNODE(.name=node_name, .memory=memory) :- POD(.pod_name=_, .status=_, .node_name=node_name, .namespace=_, .cpu_request=_, .memory_request=memory_request, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .priority=_, .schedularName=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), var memory = Aggregate((node_name), sum(memory_request)).
PODSUSEDPERNODE(.name=node_name, .pods=pods) :- POD(.pod_name=_, .status=_, .node_name=node_name, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=pods_request, .owner_name=_, .creation_timestamp=_, .priority=_, .schedularName=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), var pods = Aggregate((node_name), sum(pods_request)).
SPARECAPACITY(.name=node_name, .cpu_remaining=cpu_remaining, .memory_remaining=memory_remaining, .pods_remaining=pods_remaining) :- POD(.pod_name=_, .status=_, .node_name=node_name, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .priority=_, .schedularName=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), (intern.istring_str(node_name) != "null"), CPUUSEDPERNODE(.name=node_name, .cpu=cpu), MEMORYUSEDPERNODE(.name=node_name, .memory=memory), PODSUSEDPERNODE(.name=node_name, .pods=pods), NODE(.name=node_name, .unschedulable=_, .out_of_disk=_, .memory_pressure=_, .disk_pressure=_, .pid_pressure=_, .ready=_, .network_unavailable=_, .cpu_capacity=_, .memory_capacity=_, .ephemeral_storage_capacity=_, .pods_capacity=_, .cpu_allocatable=cpu_allocatable, .memory_allocatable=memory_allocatable, .ephemeral_storage_allocatable=_, .pods_allocatable=pods_allocatable), var cpu_remaining = (cpu_allocatable - cpu), var memory_remaining = (memory_allocatable - memory), var pods_remaining = (pods_allocatable - pods).
PODSTOASSIGNNOLIMIT(.pod_name=pod_name, .status=status, .node_name=node_name, .namespace=namespace, .cpu_request=cpu_request, .memory_request=memory_request, .ephemeral_storage_request=ephemeral_storage_request, .pods_request=pods_request, .owner_name=owner_name, .creation_timestamp=creation_timestamp, .has_node_selector_labels=has_node_selector_labels, .has_pod_affinity_requirements=has_pod_affinity_requirements) :- POD(.pod_name=pod_name, .status=status, .node_name=node_name, .namespace=namespace, .cpu_request=cpu_request, .memory_request=memory_request, .ephemeral_storage_request=ephemeral_storage_request, .pods_request=pods_request, .owner_name=owner_name, .creation_timestamp=creation_timestamp, .priority=priority, .schedularName=schedulerName, .has_node_selector_labels=has_node_selector_labels, .has_pod_affinity_requirements=has_pod_affinity_requirements), (intern.istring_str(status) == "Pending"), (intern.istring_str(node_name) == "null"), (intern.istring_str(schedulerName) == "dcm-scheduler").
PODSTOASSIGN(.pod_name=pod_name, .status=status, .controllable__node_name=node_name, .namespace=namespace, .cpu_request=cpu_request, .memory_request=memory_request, .ephemeral_storage_request=ephemeral_storage_request, .pods_request=pods_request, .owner_name=owner_name, .creation_timestamp=creation_timestamp, .has_node_selector_labels=has_node_selector_labels, .has_pod_affinity_requirements=has_pod_affinity_requirements) :- PODSTOASSIGNNOLIMIT(.pod_name=pod_name, .status=status, .node_name=node_name, .namespace=namespace, .cpu_request=cpu_request, .memory_request=memory_request, .ephemeral_storage_request=ephemeral_storage_request, .pods_request=pods_request, .owner_name=owner_name, .creation_timestamp=creation_timestamp, .has_node_selector_labels=has_node_selector_labels, .has_pod_affinity_requirements=has_pod_affinity_requirements).
PODSWITHPORTREQUESTS(.controllable__node_name=controllable__node_name, .host_ip=host_ip, .host_port=host_port, .host_protocol=host_protocol) :- PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=controllable__node_name, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), PODPORTSREQUEST(.pod_name=pod_name, .host_ip=host_ip, .host_port=host_port, .host_protocol=host_protocol).
PODNODESELECTORMATCHESEXISTS(.pod_name=pod_name, .node_name=node_name) :- PODNODESELECTORLABELS(.pod_name=pod_name, .term=term, .match_expression=match_expression, .num_match_expressions=num_match_expressions, .label_key=label_key, .label_operator=label_operator, .label_value=label_value), (intern.istring_str(label_operator) == "Exists"), NODELABELS(.node_name=node_name, .label_key=label_key, .label_value=_), PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=_, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), var distinct_match_expression = Aggregate((pod_name,
node_name,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      term,
label_operator,
num_match_expressions), count_uniq(match_expression)), (num_match_expressions == cast_bit64_to_signedbit64(distinct_match_expression)).
PODNODESELECTORMATCHESIN(.pod_name=pod_name, .node_name=node_name) :- PODNODESELECTORLABELS(.pod_name=pod_name, .term=term, .match_expression=match_expression, .num_match_expressions=num_match_expressions, .label_key=label_key, .label_operator=label_operator, .label_value=label_value), (intern.istring_str(label_operator) == "In"), NODELABELS(.node_name=node_name, .label_key=label_key, .label_value=label_value), PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=_, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), var distinct_match_expression = Aggregate((pod_name,
node_name,
term,
label_operator,
num_match_expressions), count_uniq(match_expression)), (num_match_expressions == cast_bit64_to_signedbit64(distinct_match_expression)).
PODNODESELECTORMATCHESNOT(.pod_name=pod_name, .node_name=node_name) :- PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=_, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), NODELABELS(.node_name=node_name, .label_key=label_key_node, .label_value=label_value_node), PODNODESELECTORLABELS(.pod_name=pod_name, .term=_, .match_expression=_, .num_match_expressions=_, .label_key=label_key_pod, .label_operator=label_operator, .label_value=label_value_pod), ((intern.istring_str(label_operator) == "DoesNotExist") or (intern.istring_str(label_operator) == "NotIn")), (not (((intern.istring_str(label_operator) == "DoesNotExist") and (label_key_node == label_key_pod)) or (((intern.istring_str(label_operator) == "NotIn") and (label_key_node == label_key_pod)) and (label_value_node == label_value_pod)))).
PODNODESELECTORMATCHES(.pod_name=pod_name, .node_name=node_name) :- PODNODESELECTORMATCHESIN(.pod_name=pod_name, .node_name=node_name).
PODNODESELECTORMATCHES(.pod_name=pod_name, .node_name=node_name) :- PODNODESELECTORMATCHESEXISTS(.pod_name=pod_name, .node_name=node_name).
PODNODESELECTORMATCHES(.pod_name=pod_name, .node_name=node_name) :- PODNODESELECTORMATCHESNOT(.pod_name=pod_name, .node_name=node_name).
PodLabelSelector(.pod_name=pod_name, .expressions=expressions) :- PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=_, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), PODAFFINITYMATCHEXPRESSIONS(.pod_name=pod_name, .label_selector=label_selector, .match_expression=match_expression, .num_match_expressions=_, .label_key=label_key, .label_operator=label_operator, .label_value=label_value, .topology_key=_), var expressions = Aggregate((pod_name,
label_selector), group2expressions((match_expression, label_operator, label_key, label_value))).
PodAllLabels(.pod_name=pod_name, .node_name=node_name, .labels=labels) :- POD(.pod_name=pod_name, .status=_, .node_name=node_name, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .priority=_, .schedularName=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), PODLABELS(.pod_name=pod_name, .label_key=label_key, .label_value=label_value), var labels = Aggregate((pod_name,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               node_name), std.group2map((label_key, label_value))).
INTERPODAFFINITYMATCHESINNER(.pod_name=pod_name, .matches=matching_pod, .node_name=node_name) :- PodLabelSelector(.pod_name=pod_name, .expressions=expressions), PodAllLabels(.pod_name=matching_pod, .node_name=node_name, .labels=labels), pod_matches_label_selector(expressions, labels).
INTERPODAFFINITYMATCHESGROUPBY(.pod_name=pod_name, .num_matches=num_matches) :- INTERPODAFFINITYMATCHESINNER(.pod_name=pod_name, .matches=matches, .node_name=node_name), var num_matches = Aggregate((pod_name), std.group_count(())).
INTERPODAFFINITYMATCHES(.pod_name=pod_name, .matches=matches, .node_name=node_name, .num_matches=num_matches) :- INTERPODAFFINITYMATCHESGROUPBY(.pod_name=pod_name, .num_matches=num_matches), INTERPODAFFINITYMATCHESINNER(.pod_name=pod_name, .matches=matches, .node_name=node_name).
NODETAINTSGROUP(.node_name=node_name, .num_taints=num_taints) :- NODETAINTS(.node_name=node_name, .taint_key=taint_key, .taint_value=taint_value, .taint_effect=taint_effect), var num_taints = Aggregate((node_name), std.group_count(())).
PODSTHATTOLERATENODETAINTS(.pod_name=pod_name, .node_name=node_name) :- PODSTOASSIGN(.pod_name=pod_name, .status=_, .controllable__node_name=_, .namespace=_, .cpu_request=_, .memory_request=_, .ephemeral_storage_request=_, .pods_request=_, .owner_name=_, .creation_timestamp=_, .has_node_selector_labels=_, .has_pod_affinity_requirements=_), NODETAINTS(.node_name=node_name, .taint_key=taint_key, .taint_value=taint_value, .taint_effect=taint_effect), NODETAINTSGROUP(.node_name=node_name, .num_taints=num_taints), PODTOLERATIONS(.pod_name=pod_name, .tolerations_key=taint_key, .tolerations_value=tolerations_value, .tolerations_effect=tolerations_effect, .tolerations_operator=tolerations_operator), (((intern.istring_str(tolerations_effect) == "null") or (tolerations_effect == taint_effect)) and ((intern.istring_str(tolerations_operator) == "Exists") or (tolerations_value == taint_value))), var groupsize = Aggregate((pod_name,
node_name,
num_taints), std.group_count(())), (groupsize == num_taints).
NODESTHATHAVETOLERATIONS(.node_name=node_name) :- NODETAINTS(.node_name=node_name, .taint_key=_, .taint_value=_, .taint_effect=_).
