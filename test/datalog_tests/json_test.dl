import json

output relation JsonTest(description: string, value: string)

function to_json_string_or_default(x: 'T): string =
    result_unwrap_or_default(to_json_string(x))


typedef BoolStruct = BoolStruct {
    b: bool
}

function boolStruct1(): string = [|{"b":true}|]
function boolStruct2(): string = [|{"b":true, "foo":"bar"}|]
function boolStruct3(): string = [|{"foo":"bar"}|]

JsonTest(boolStruct1(),
         to_json_string_or_default(from_json_string(boolStruct1()): Result<BoolStruct, string>)).
JsonTest(boolStruct2(),
         to_json_string_or_default(from_json_string(boolStruct2()): Result<BoolStruct, string>)).
JsonTest(boolStruct3(),
         to_json_string_or_default(from_json_string(boolStruct3()): Result<BoolStruct, string>)).

typedef Top = Top {
    t: string,
    id: string,
    nested: Nested
}

typedef Nested = Nested {
    x: string,
    z: u64
}

function nestedStruct1(): string = [|{"t":"foo", "id":"1001001001", "nested": {"x": "x", "z": 100000}}|]

JsonTest(nestedStruct1(),
         to_json_string_or_default(from_json_string(nestedStruct1()): Result<Top, string>)).

typedef TopFlat = TopFlat {
    t: string,
    #[rust="serde(rename=\"@id\")"]
    id: string,
    #[rust="serde(flatten)"]
    nested: Nested
}

function flattenedStruct1(): string = [|{"t":"foo", "@id":"1001001001", "x": "x", "z": 100000}|]

JsonTest(flattenedStruct1(),
         to_json_string_or_default(from_json_string(flattenedStruct1()): Result<TopFlat, string>)).

typedef Array = Vec<BoolStruct>

function array1(): string = [|[{"b":true}, {"b":false}, {"b":true}, {"b":false}]|]

JsonTest(array1(),
         to_json_string_or_default(from_json_string(array1()): Result<Array, string>)).

typedef BoolMap = Map<string, BoolStruct>

function map1(): string = [|{"1":{"b":true}, "2":{"b":false}, "3":{"b":true}, "4":{"b":false}}|]

JsonTest(map1(),
         to_json_string_or_default(from_json_string(map1()): Result<BoolMap, string>)).

typedef Enum = #[rust="serde(rename = \"Variant1\")"]
               Variant1 { b: bool }
             | #[rust="serde(rename = \"Variant2\")"]
               Variant2 { u: u32 }

function enum1(): string = [|{"Variant1": {"b": true}}|]
function enum2(): string = [|{"Variant2": {"u": 100}}|]

JsonTest(enum1(),
         to_json_string_or_default(from_json_string(enum1()): Result<Enum, string>)).
JsonTest(enum2(),
         to_json_string_or_default(from_json_string(enum2()): Result<Enum, string>)).

#[rust="serde(tag = \"@type\")"]
typedef TaggedEnum = #[rust="serde(rename = \"t.V1\")"]
                     TVariant1 { b: bool }
                   | #[rust="serde(rename = \"t.V2\")"]
                     TVariant2 { u: u32 }

function tenum1(): string = [|{"@type": "t.V1", "b": true}|]
function tenum2(): string = [|{"@type": "t.V2", "u": 100}|]
function tenum3(): string = [|{"@type": "t.V2", "b": false}|]

JsonTest(tenum1(),
         to_json_string_or_default(from_json_string(tenum1()): Result<TaggedEnum, string>)).
JsonTest(tenum2(),
         to_json_string_or_default(from_json_string(tenum2()): Result<TaggedEnum, string>)).
JsonTest(tenum3(),
         to_json_string_or_default(from_json_string(tenum3()): Result<TaggedEnum, string>)).


function scalar1(): string = [|true|]
function scalar2(): string = [|100|]
function scalar3(): string = [|-100|]
function scalar4(): string = [|"foo bar"|]
function scalar5(): string = [|2.99792458e8|]

JsonTest(scalar1(),
         to_json_string_or_default(from_json_string(scalar1()): Result<JsonValue, string>)).
JsonTest(scalar2(),
         to_json_string_or_default(from_json_string(scalar2()): Result<JsonValue, string>)).
JsonTest(scalar3(),
         to_json_string_or_default(from_json_string(scalar3()): Result<JsonValue, string>)).
JsonTest(scalar4(),
         to_json_string_or_default(from_json_string(scalar4()): Result<JsonValue, string>)).
JsonTest(scalar5(),
         to_json_string_or_default(from_json_string(scalar5()): Result<JsonValue, string>)).

input relation Deserialized[TaggedEnum]
output relation ODeserialized[TaggedEnum]
ODeserialized[x] :- Deserialized[x].

typedef Optional = Optional {
    s: Option<string>,
    i: Option<u64>,
    v: Option<JsonValue>
}

function optional1(): string = [|{}|]
function optional2(): string = [|{"s": "foo"}|]
function optional3(): string = [|{"s": "foo", "i": 100000}|]
function optional4(): string = [|{"s": "foo", "i": 100000, "v": 2.5}|]

JsonTest(optional1(),
         to_json_string_or_default(from_json_string(optional1()): Result<Optional, string>)).
JsonTest(optional2(),
         to_json_string_or_default(from_json_string(optional2()): Result<Optional, string>)).
JsonTest(optional3(),
         to_json_string_or_default(from_json_string(optional3()): Result<Optional, string>)).
JsonTest(optional4(),
         to_json_string_or_default(from_json_string(optional4()): Result<Optional, string>)).

typedef StructWithKey = StructWithKey {
    key: u64,
    payload: string
}

function key_structWithKey(x: StructWithKey): u64 =
{
    x.key
}

typedef StructWithMap = StructWithMap {
    #[deserialize_from_array=key_structWithKey()]
    f: Map<u64, StructWithKey>
}

function struct_with_map1(): string = [|{"f": [{"key": 100, "payload": "foo"}]}|]

JsonTest(struct_with_map1(),
         to_json_string_or_default(from_json_string(struct_with_map1()): Result<StructWithMap, string>)).


typedef U64FromString = U64FromString {
    x: string,
    #[rust="serde(with=\"serde_string\")"]
    y: u64
}

function u64FromString1(): string = [|{"x": "x", "y": "100000"}|]
function u64FromString2(): string = [|{"x": "x", "y": "-100000"}|]

JsonTest(u64FromString1(),
         to_json_string_or_default(from_json_string(u64FromString1()): Result<U64FromString, string>)).
JsonTest(u64FromString2(),
         to_json_string_or_default(from_json_string(u64FromString2()): Result<U64FromString, string>)).

typedef S32FromString = S32FromString {
    #[rust="serde(with=\"serde_string\")"]
    x: s32
}

function s32FromString1(): string = [|{"x": "-100000"}|]
function s32FromString2(): string = [|{"x": "100000000000"}|]

JsonTest(s32FromString1(),
         to_json_string_or_default(from_json_string(s32FromString1()): Result<S32FromString, string>)).
JsonTest(s32FromString2(),
         to_json_string_or_default(from_json_string(s32FromString2()): Result<S32FromString, string>)).

typedef WrappedEnum = JsonWrapper<TaggedEnum>

function wenum1(): string = [|{"@type": "t.V1", "b": true}|]
function wenum2(): string = [|{"@type": "t.V2", "u": 100}|]
function wenum3(): string = [|{"@type": "t.V2", "b": false}|]

JsonTest("wrapped " ++ wenum1(),
         to_json_string_or_default(from_json_string(wenum1()): Result<WrappedEnum, string>)).
JsonTest("wrapped " ++ wenum2(),
         to_json_string_or_default(from_json_string(wenum2()): Result<WrappedEnum, string>)).
JsonTest("wrapped " ++ wenum3(),
         to_json_string_or_default(from_json_string(wenum3()): Result<WrappedEnum, string>)).
