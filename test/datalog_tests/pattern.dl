/* Tests for match pattern analysis logic.  Checks that:
   patterns are exhaustive (cover all possible values of the given
   type) and non-redundant. */

typedef T1 = C11{f1: bigint, f2: (bigint, string)}
           | C12{f3: bit<32>, f4: (bool, bool, bool)}

typedef T2 = C21{f1: T1, f2: bigint}
           | C22{f3: (bool, T1)}


typedef T3 = C31{f1: T1, f2: bigint, s: string, b: bit<32>}
           | C32{f3: ((bool, (bool, bool, bool)), T1)}

function f1(x: T1, y: T2, q: T3) : bool = {
    match (x) {
        C11 -> true,
        _   -> false
    };

    match (x) {
        C11 -> true,
        C12 -> false
    };

    match (y) {
        C21{_,_}        -> true,
        C22{(_, C11{})} -> true,
        _               -> false
    };

    match (y) {
        C21{_,_}        -> true,
        C22{(true, C11{})} -> true,
        C22{(true, C12{})} -> true,
        C22{(false, C11{})} -> true,
        C22{(false, C12{})} -> true
    };


    var z: (bool, (bool, (bool,bool))) = (true, (false, (true, false)));

    match (z) {
        (true, _)                   -> true,
        (false, (_,(true, true)))   -> true,
        (false, (_,(true, false)))  -> true,
        (false, (_,(false, true)))  -> true,
        (false, (_,(false, false))) -> true
    };

    match (z) {
        (_, (_,(true, true)))       -> true,
        (_, (_,(true, false)))      -> true,
        (_, (_,(false, true)))      -> true,
        (false, (_,(false, false))) -> true,
        (true, (_,(false, false)))  -> true
    };

    match (q) {
        C31{}                                                      -> true,
        C32{.f3=((true, (_, _, false)), _)}                        -> true,
        C32{.f3=((false, (_, _, false)), _)}                       -> true,
        C32{.f3=((false, (_, _, true)), _)}                        -> true,
        C32{.f3=((_, (_, _, true)), C11{})}                        -> true,
        C32{.f3=((_, (_, _, true)), C12{.f4=(true, true, true)})}  -> false,
        C32{.f3=((_, (_, _, true)), C12{.f4=(_, _, false)})}       -> false,
        C32{.f3=((_, (_, _, true)), C12{.f4=(_, _, true)})}        -> false
    };

    match (q) {
        C31{_, 0, "foo", 15}                                       -> true,
        C31{_, _, _, 15}                                           -> true,
        C31{_, 0, _, _}                                            -> true,
        C31{_, _, "foo", _}                                        -> true,
        C32{}                                                      -> true,
        C31{_, _, _, _}                                            -> true
    };

    var s: string = "bar";
    match (s) {
        "foo" -> true,
        "bar" -> true,
        _     -> false
    }
}
