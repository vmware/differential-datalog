Ack:
Ack{.m = 2, .n = 1, .a = 5}: +1
BoolVecVec:
BoolVecVec{.v = [[true, false, true], [true], [false]]}: +1
BoolVectors:
BoolVectors{.v = [true, false, true]}: +1
Fib:
Fib{.x = 0, .f = 0}: +1
Fib{.x = 1, .f = 1}: +1
Fib{.x = 2, .f = 1}: +1
Fib{.x = 3, .f = 2}: +1
Fib{.x = 4, .f = 3}: +1
Fib{.x = 10, .f = 55}: +1
Fib{.x = 20, .f = 6765}: +1
FuncTest:
FuncTest{.x = "foo"}: +1
MapOfMaps:
MapOfMaps{.m = [("bar", [(-10, (10000, true)), (200, (2, false))]), ("foo", [(1, (1, true)), (2, (4, false))]), ("foobar", [])]}: +1
MapOfVecs:
MapOfVecs{.m = [((0, 0), [0.1, -100, 0, 1000000]), ((100, -100), []), ((100, 100), [0.1, -100, 0, 1000000])]}: +1
Nested:
Nested{.descr = "1", .n = NestedStruct{.x = ddlog_std::Some{.x = ModifyMe{.x = "bar", .y = 123456789}}}}: +1
Nested{.descr = "2", .n = NestedStruct{.x = ddlog_std::Some{.x = ModifyMe{.x = "bar", .y = 0}}}}: +1
Nested{.descr = "3", .n = NestedStruct{.x = ddlog_std::Some{.x = ModifyMe{.x = "buzz", .y = 0}}}}: +1
RFloatToInt:
RFloatToInt{._x = -333}: +1
Rque:
Rque{.x = 65531}: +1
Rque{.x = 65532}: +1
Rque{.x = 65533}: +1
Rque{.x = 65534}: +1
Rque{.x = 65535}: +1
Rque{.x = 65536}: +1
Rque{.x = 65537}: +1
Rque{.x = 65538}: +1
Rque{.x = 65539}: +1
Rque{.x = 65540}: +1
Rque{.x = 65541}: +1
Rque{.x = 65542}: +1
Rque{.x = 65543}: +1
Rque{.x = 65544}: +1
Rque{.x = 65545}: +1
Rque{.x = 65546}: +1
Rque{.x = 65547}: +1
Rque{.x = 65548}: +1
Rque{.x = 65549}: +1
Rque{.x = 65550}: +1
Rque{.x = 65551}: +1
Rque{.x = 65552}: +1
Rque{.x = 65553}: +1
Rque{.x = 65554}: +1
Rque{.x = 65555}: +1
Rque{.x = 65556}: +1
Rque{.x = 65557}: +1
Rque{.x = 65558}: +1
Rque{.x = 65559}: +1
Rque{.x = 65560}: +1
Rque{.x = 65561}: +1
Rque{.x = 65562}: +1
Rque{.x = 65563}: +1
Rque{.x = 65564}: +1
Rque{.x = 65565}: +1
Rque{.x = 65566}: +1
Rque{.x = 65567}: +1
Rque{.x = 65568}: +1
Rque{.x = 65569}: +1
Rque{.x = 65570}: +1
Rque{.x = 65571}: +1
Rque{.x = 65572}: +1
Rque{.x = 65573}: +1
Rque{.x = 65574}: +1
Rque{.x = 65575}: +1
Rque{.x = 65576}: +1
Rque{.x = 65577}: +1
Rque{.x = 65578}: +1
Rque{.x = 65579}: +1
Rque{.x = 65580}: +1
Rque{.x = 65581}: +1
Rque{.x = 65582}: +1
Rque{.x = 65583}: +1
Rque{.x = 65584}: +1
Rque{.x = 65585}: +1
Rque{.x = 65586}: +1
Rque{.x = 65587}: +1
Rque{.x = 65588}: +1
Rque{.x = 65589}: +1
Rque{.x = 65590}: +1
Rque{.x = 65591}: +1
Rque{.x = 65592}: +1
Rque{.x = 65593}: +1
Rque{.x = 65594}: +1
Rque{.x = 65595}: +1
Rque{.x = 65596}: +1
Rque{.x = 65597}: +1
Rque{.x = 65598}: +1
Rque{.x = 65599}: +1
StringMaps:
StringMaps{.m = [("bar", (2, false)), ("foo", (1, true)), ("foobar", (3, false))]}: +1
Strings:
Strings{.descr = "x={10:bit<12>}, y={10:float}, z={-4:signed<125>}", .str = "x=10, y=10, z=-4"}: +1
Try1:
Try1{.description = "", .result = ddlog_std::None{}}: +1
Try1{.description = "Albert_Einstein", .result = ddlog_std::None{}}: +1
Try1{.description = "Isaac Newton", .result = ddlog_std::Some{.x = ("Isaac", "Newton")}}: +1
Try2:
Try2{.description = "", .result = ddlog_std::Err{.err = "No last name"}}: +1
Try2{.description = "Albert_Einstein", .result = ddlog_std::Err{.err = "No last name"}}: +1
Try2{.description = "Isaac Newton", .result = ddlog_std::Ok{.res = ("Isaac", "Newton")}}: +1
Try3:
Try3{.description = "", .result = ddlog_std::None{}}: +1
Try3{.description = "Albert_Einstein", .result = ddlog_std::None{}}: +1
Try3{.description = "Isaac Newton", .result = ddlog_std::Some{.x = ("Isaac", "Newton")}}: +1
VecOfMaps:
VecOfMaps{.m = [[((100, 100), 0.1)], [((100, 100), 0.1), ((1000, -100), -0.1)], [((100, 100), 0.1), ((1000, -10000000000000000000000000000000000000), 0), ((1000, -100), -0.1)]]}: +1
RFloatToInt{._x = -333}
Arrng1Arrng2:
Arrng1Arrng2{.x = 5}: +1
Arrng1Arrng2_2:
Arrng1Arrng2_2{.x = 5}: +1
TArrng1Arrng2:
TArrng1Arrng2{.x = 5}: +1
FuncTest{.x = "foo"}
SumsOfDoubles:
SumsOfDoubles{.x = 1, .y = 1, .sum = 2}: +1
SumsOfDoubles{.x = 1, .y = 2, .sum = 3}: +1
SumsOfDoubles{.x = 1, .y = 3.5, .sum = 4.5}: +1
SumsOfDoubles{.x = 2, .y = 1, .sum = 3}: +1
SumsOfDoubles{.x = 2, .y = 2, .sum = 4}: +1
SumsOfDoubles{.x = 2, .y = 3.5, .sum = 5.5}: +1
SumsOfDoubles{.x = 3.5, .y = 1, .sum = 4.5}: +1
SumsOfDoubles{.x = 3.5, .y = 2, .sum = 5.5}: +1
SumsOfDoubles{.x = 3.5, .y = 3.5, .sum = 7}: +1
InspectSimpleSum:
InspectSimpleSum{.x = 1, .total = 3}: +1
FilteredRelation:
FilteredRelation{.y = 2}: +1
FilteredRelation{.y = 3}: +1
FilteredRelation{.y = 5}: +1
FilteredRelation:
FilteredRelation{.y = 2}: -1
OutputInspectNot:
OutputInspectNot{.x = 4, .y = 4}: +1
OutputInspectNot:
OutputInspectNot{.x = 2, .y = 2}: +1
ChunkParseError:
ChunkParseError{.err = "missing field `field` at line 1 column 11"}: +1
CompressedChunk:
CompressedChunk{.json = "{\"field\":1}"}: +1
ChunkParseError:
ChunkParseError{.err = "missing field `field` at line 1 column 11"}: +1
CompressedChunk:
CompressedChunk{.json = "{\"field\":1}"}: +2
CompressedChunk{.json = "{\"field\":2}"}: +1
Fib{.x = 0, .f = 0}
Fib{.x = 1, .f = 1}
Fib{.x = 2, .f = 1}
Fib{.x = 3, .f = 2}
Fib{.x = 4, .f = 3}
Fib{.x = 10, .f = 55}
Fib{.x = 20, .f = 6765}
Ack{.m = 2, .n = 1, .a = 5}
Rseq:
Rseq{._s = TSeq1{.x = ("bar", TSeq1{.x = ("buzz", TSeqNone{})})}}: +1
Rseq{._s = TSeq1{.x = ("foo", TSeq1{.x = ("buzz", TSeqNone{})})}}: +1
