typedef uuid = bit<128>

typedef StructWithConstructor = Constructor1 {field1: type1, field2: type2}
                              | Constructor2 {}

/*
"NB_Global": {
    "columns": {
        "nb_cfg": {"type": {"key": "integer"}},
        "sb_cfg": {"type": {"key": "integer"}},
        "hv_cfg": {"type": {"key": "integer"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "connections": {
            "type": {"key": {"type": "uuid",
                             "refTable": "Connection"},
                             "min": 0,
                             "max": "unlimited"}},
        "ssl": {
            "type": {"key": {"type": "uuid",
                             "refTable": "SSL"},
                             "min": 0, "max": 1}}},
    "maxRows": 1,
    "isRoot": true},
*/

ground relation NB_Global (
    nb_cfg: int,
    sb_cfg: int,
    hv_cfg: int
)

ground relation NB_Global_external_ids (
    key:   string,
    value: string
)


/*
"Connection": {
    "columns": {
        "target": {"type": "string"},
        "max_backoff": {"type": {"key": {"type": "integer",
                                 "minInteger": 1000},
                                 "min": 0,
                                 "max": 1}},
        "inactivity_probe": {"type": {"key": "integer",
                                      "min": 0,
                                      "max": 1}},
        "other_config": {"type": {"key": "string",
                                  "value": "string",
                                  "min": 0,
                                  "max": "unlimited"}},
        "external_ids": {"type": {"key": "string",
                         "value": "string",
                         "min": 0,
                         "max": "unlimited"}},
        "is_connected": {"type": "boolean", "ephemeral": true},
        "status": {"type": {"key": "string",
                            "value": "string",
                            "min": 0,
                            "max": "unlimited"},
                            "ephemeral": true}},
    "indexes": [["target"]]},
*/
ground relation Connection (
    id:           uuid,
    target:       string,
    is_connected: bool
)

ground relation Connection_max_backoff (
    connection:  uuid,
    max_backoff: int
)

ground relation Connection_inactivity_probe (
    connection:  uuid,
    inactivity_probe: int
)

ground relation Connection_other_config (
    connection:   uuid,
    other_config: string
)

ground relation Connection_external_ids (
    connection: uuid,
    value:      string
)

ground relation Connection_status (
    connection: uuid,
    key:        string,
    value:      string
)

/*
"Logical_Switch": {
    "columns": {
        "name": {"type": "string"},
        "ports": {"type": {"key": {"type": "uuid",
                                   "refTable": "Logical_Switch_Port",
                                   "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "acls": {"type": {"key": {"type": "uuid",
                                  "refTable": "ACL",
                                  "refType": "strong"},
                          "min": 0,
                          "max": "unlimited"}},
        "qos_rules": {"type": {"key": {"type": "uuid",
                                  "refTable": "QoS",
                                  "refType": "strong"},
                          "min": 0,
                          "max": "unlimited"}},
        "load_balancer": {"type": {"key": {"type": "uuid",
                                          "refTable": "Load_Balancer",
                                          "refType": "strong"},
                                   "min": 0,
                                   "max": "unlimited"}},
        "dns_records": {"type": {"key": {"type": "uuid",
                                 "refTable": "DNS",
                                 "refType": "weak"},
                          "min": 0,
                          "max": "unlimited"}},
        "other_config": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/

ground relation Logical_Switch (
    id:         uuid,
    name:       string,
    type:       string
)

ground relation Logical_Switch_other_config (
    logical_switch: uuid,
    key:            string,
    value:          string
)

ground relation Logical_Switch_external_ids (
    logical_switch: uuid,
    key:            string,
    value:          string
)

/*
"Logical_Switch_Port": {
    "columns": {
        "name": {"type": "string"},
        "type": {"type": "string"},
        "options": {
             "type": {"key": "string",
                      "value": "string",
                      "min": 0,
                      "max": "unlimited"}},
        "parent_name": {"type": {"key": "string", "min": 0, "max": 1}},
        "tag_request": {
             "type": {"key": {"type": "integer",
                              "minInteger": 0,
                              "maxInteger": 4095},
                      "min": 0, "max": 1}},
        "tag": {
             "type": {"key": {"type": "integer",
                              "minInteger": 1,
                              "maxInteger": 4095},
                      "min": 0, "max": 1}},
        "addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": "unlimited"}},
        "dynamic_addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": 1}},
        "port_security": {"type": {"key": "string",
                                   "min": 0,
                                   "max": "unlimited"}},
        "up": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "dhcpv4_options": {"type": {"key": {"type": "uuid",
                                    "refTable": "DHCP_Options",
                                    "refType": "weak"},
                         "min": 0,
                         "max": 1}},
        "dhcpv6_options": {"type": {"key": {"type": "uuid",
                                    "refTable": "DHCP_Options",
                                    "refType": "weak"},
                         "min": 0,
                         "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false},
*/

ground relation Logical_Switch_Port (
    id:                     uuid,
    logical_switch:         uuid,
    name:                   string,
    type:                   string    
)

ground relation Logical_Switch_Port_options (
    logical_switch_port:    uuid,
    key:                    string,
    value:                  string
)

ground relation Logical_Switch_Port_parent (
    logical_switch_port:    uuid,
    parent_name:            string
)

ground relation Logical_Switch_Port_tag_request (
    logical_switch_port:    uuid,
    tag_request:            int
)

ground relation Logical_Switch_Port_tag (
    logical_switch_port:    uuid,
    tag:                    int
)

ground relation Logical_Switch_Port_addresses (
    logical_switch_port:    uuid,
    address:                string
)

ground relation Logical_Switch_Port_dynamic_addresses (
    logical_switch_port:    uuid,
    dynamic_address:        string
)

ground relation Logical_Switch_Port_port_security (
    logical_switch_port:    uuid,
    port_security:          string
)

/* can up and enabled fields really be missing */
ground relation Logical_Switch_Port_up (
    logical_switch_port:    uuid,
    up:                     bool
)

ground relation Logical_Switch_Port_enabled (
    logical_switch_port:    uuid,
    enabled:                bool
)

ground relation Logical_Switch_Port_external_ids (
    logical_switch_port:    uuid,
    key:                    string,
    value:                  string
)

ground relation Logical_Switch_Port_dhcpv6_options (
    logical_switch_port:    uuid,
    dhcp_options:           uuid
)

ground relation Logical_Switch_Port_dhcpv4_options (
    logical_switch_port:    uuid,
    dhcp_options:           uuid
)

/*
"Address_Set": {
    "columns": {
        "name": {"type": "string"},
        "addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": true},
*/

ground relation Address_Set (
    id:             uuid,
    name:           string
)

ground relation Address_Set_addresses (
    address_set:    uuid,
    address:        string
)

ground relation Address_Set_external_ids (
    address_set:    uuid,
    key:            string,
    value:          string
)

/*
"Load_Balancer": {
    "columns": {
        "name": {"type": "string"},
        "vips": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "protocol": {
            "type": {"key": {"type": "string",
                     "enum": ["set", ["tcp", "udp"]]},
                     "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/

ground relation Load_Balancer (
    id:             uuid,
    logical_switch: uuid,
    name:           string
)

ground relation Load_Balancer_protocol (
    load_balancer:  uuid,
    protocol:       string
)

ground relation Load_Balancer_vips (
    load_balancer:  uuid,
    key:            string,
    value:          string
)

ground relation Load_Balancer_external_ids (
    load_balancer:  uuid,
    key:            string,
    value:          string
)

/*
"ACL": {
    "columns": {
        "name": {"type": {"key": {"type": "string",
                                  "maxLength": 63},
                                  "min": 0, "max": 1}},
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "direction": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["from-lport", "to-lport"]]}}},
        "match": {"type": "string"},
        "action": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["allow", "allow-related", "drop", "reject"]]}}},
        "log": {"type": "boolean"},
        "severity": {"type": {"key": {"type": "string",
                                      "enum": ["set",
                                               ["alert", "warning",
                                                "notice", "info",
                                                "debug"]]},
                              "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/

ground relation ACL (
    id:                 uuid,
    logical_switch:     uuid,
    priority:           int,
    direction:          string,
    _match:             string,
    action:             string,
    log:                bool    
)

ground relation ACL_name (
    acl:                uuid,
    name:               string
)

ground relation ACL_severity (
    acl:                uuid,
    severity:           string
)

ground relation ACL_external_ids (
    acl:                uuid,
    key:                string,
    value:              string
)

/*
"QoS": {
    "columns": {
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "direction": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["from-lport", "to-lport"]]}}},
        "match": {"type": "string"},
        "action": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["dscp"]]},
                            "value": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 63},
                            "min": 0, "max": "unlimited"}},
        "bandwidth": {"type": {"key": {"type": "string",
                                       "enum": ["set", ["rate",
                                                        "burst"]]},
                               "value": {"type": "integer",
                                         "minInteger": 1,
                                         "maxInteger": 4294967295},
                               "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
ground relation QoS (
    id:             uuid,
    logical_switch: uuid,
    priority:       int,
    direction:      string,
    _match:         string    
)

ground relation QoS_action (
    qos:            uuid,
    key:            string,
    value:          int
)

ground relation QoS_bandwidth (
    qos:            uuid,
    key:            string,
    value:          int
)

ground relation QoS_external_ids (
    qos:            uuid,
    key:            string,
    value:          string
)

/*
"Logical_Router": {
    "columns": {
        "name": {"type": "string"},
        "ports": {"type": {"key": {"type": "uuid",
                                   "refTable": "Logical_Router_Port",
                                   "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "static_routes": {"type": {"key": {"type": "uuid",
                                    "refTable": "Logical_Router_Static_Route",
                                    "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "nat": {"type": {"key": {"type": "uuid",
                                 "refTable": "NAT",
                                 "refType": "strong"},
                         "min": 0,
                         "max": "unlimited"}},
        "load_balancer": {"type": {"key": {"type": "uuid",
                                          "refTable": "Load_Balancer",
                                          "refType": "strong"},
                                   "min": 0,
                                   "max": "unlimited"}},
        "options": {
             "type": {"key": "string",
                      "value": "string",
                      "min": 0,
                      "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/
ground relation Logical_Router (
    id:             uuid,
    name:           string
)

ground relation Logical_Router_enabled (
    logical_router: uuid,
    enabled:        bool
)


ground relation Logical_Router_options (
    logical_router: uuid,
    key:            string,
    value:          string
)

ground relation Logical_Router_external_ids (
    logical_router: uuid,
    key:            string,
    value:          string
)

/*
"Logical_Router_Port": {
    "columns": {
        "name": {"type": "string"},
        "gateway_chassis": {
            "type": {"key": {"type": "uuid",
                             "refTable": "Gateway_Chassis",
                             "refType": "strong"},
                     "min": 0,
                     "max": "unlimited"}},
        "options": {
            "type": {"key": "string",
                     "value": "string",
                     "min": 0,
                     "max": "unlimited"}},
        "networks": {"type": {"key": "string",
                              "min": 1,
                              "max": "unlimited"}},
        "mac": {"type": "string"},
        "peer": {"type": {"key": "string", "min": 0, "max": 1}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "ipv6_ra_configs": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false},
*/

ground relation Logical_Router_Port (
    id:                     uuid,
    logical_router:         uuid,
    name:                   string,
    mac:                    string
)

ground relation Logical_Router_Port_options (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

ground relation Logical_Router_Port_networks (
    logical_router_port:    uuid,
    network:                string
)

ground relation Logical_Router_Port_peer (
    logical_router_port:    uuid,
    peer:                   string
)

ground relation Logical_Router_Port_enabled (
    logical_router_port:    uuid,
    enabled:                bool
)


ground relation Logical_Router_Port_ipv6_ra_configs (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

ground relation Logical_Router_Port_external_ids (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

/*
"Logical_Router_Static_Route": {
    "columns": {
        "ip_prefix": {"type": "string"},
        "policy": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["src-ip",
                                                     "dst-ip"]]},
                            "min": 0, "max": 1}},
        "nexthop": {"type": "string"},
        "output_port": {"type": {"key": "string", "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
ground relation Logical_Router_Static_Route (
    id:                             uuid,
    logical_router:                 uuid,
    ip_prefix:                      string,
    nexthop:                        string
)

ground relation Logical_Router_Static_Route_policy (
    logical_router_static_route:    uuid,
    policy:                         string
)

ground relation Logical_Router_Static_Route_output_port (
    logical_router_static_route:    uuid,
    output_port:                    string
)

ground relation Logical_Router_Static_Route_external_ids (
    logical_router_static_route:    uuid,
    key:                            string,
    value:                          string
)

/*
"NAT": {
    "columns": {
        "external_ip": {"type": "string"},
        "external_mac": {"type": {"key": "string",
                                  "min": 0, "max": 1}},
        "logical_ip": {"type": "string"},
        "logical_port": {"type": {"key": "string",
                                  "min": 0, "max": 1}},
        "type": {"type": {"key": {"type": "string",
                                   "enum": ["set", ["dnat",
                                                     "snat",
                                                     "dnat_and_snat"
                                                       ]]}}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
ground relation NAT (
    id:             uuid,
    logical_router: uuid,
    external_ip:    string,
    logical_ip:     string
)

ground relation NAT_external_mac (
    nat:            uuid,
    external_mac:   string
)

ground relation NAT_logical_port (
    nat:            uuid,
    logical_port:   string
)


ground relation NAT_type (
    nat:            uuid,
    type:           string
)


ground relation NAT_external_ids (
    nat:            uuid,
    key:            string,
    value:          string
)

/*
"DHCP_Options": {
    "columns": {
        "cidr": {"type": "string"},
        "options": {"type": {"key": "string", "value": "string",
                             "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/
ground relation DHCP_Options (
    id:             uuid,
    cidr:           string
)

ground relation DHCP_Options_options (
    dhcp_options:   uuid,
    key:            string,
    value:          string
)

ground relation DHCP_Options_external_ids (
    dhcp_options:   uuid,
    key:            string,
    value:          string
)


/*
"DNS": {
    "columns": {
        "records": {"type": {"key": "string",
                             "value": "string",
                             "min": 0,
                             "max": "unlimited"}},
        "external_ids": {"type": {"key": "string",
                         "value": "string",
                         "min": 0,
                         "max": "unlimited"}}},
    "isRoot": true},
*/
ground relation DNS (
    id:             uuid,
    logical_switch: uuid
)

ground relation DNS_records (
    dns:            uuid,
    key:            string,
    value:          string
)

ground relation DNS_external_ids (
    dns:            uuid,
    key:            string,
    value:          string
)

/*
"SSL": {
    "columns": {
        "private_key": {"type": "string"},
        "certificate": {"type": "string"},
        "ca_cert": {"type": "string"},
        "bootstrap_ca_cert": {"type": "boolean"},
        "ssl_protocols": {"type": "string"},
        "ssl_ciphers": {"type": "string"},
        "external_ids": {"type": {"key": "string",
                                  "value": "string",
                                  "min": 0,
                                  "max": "unlimited"}}},
    "maxRows": 1},
*/
ground relation SSL (
    id:                 uuid,
    private_key:        string,
    certificate:        string,
    bootstrap_ca_cert:  bool,
    ssl_protocols:      string,
    ssl_ciphers:        string
)

ground relation SSL_external_ids (
    ssl:                uuid,
    key:                string,
    value:              string
)

/*
"Gateway_Chassis": {
    "columns": {
        "name": {"type": "string"},
        "chassis_name": {"type": "string"},
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "options": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false}}
*/
ground relation Gateway_Chassis (
    id:                 uuid,
    logical_router:     uuid,
    name:               string,
    chassis_name:       string,
    priority:           int
)

ground relation Gateway_Chassis_external_ids (
    gateway_chassis:    uuid,
    key:                string,
    value:              string
)

ground relation Gateway_Chassis_options (
    gateway_chassis:    uuid,
    key:                string,
    value:              string
)


/*****************************************/

typedef port_t = bit<16>
typedef opt_port_t = SomePort{port: port_t}
                   | NoPort

typedef ip_port_t = IPPort {ip: string, port: opt_port_t}


/* Load_Balancer.ip_addresses
 */
relation Load_Balancer_ip_addresses (
    load_balancer:  uuid,
    ip_address:     string
)

// external function
function ip_address_and_port_from_lb_key(key: string): ip_port_t

Load_Balancer_ip_addresses(lb, ip_address_and_port_from_lb_key(key).ip) 
    :- Load_Balancer_vips(lb, key, _)
