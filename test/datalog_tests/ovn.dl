typedef option_t<'A> = None
                    | Some {value : 'A}

function is_none(x: option_t<'A>): bool = {
    match (x) {
        None -> true,
        _    -> false
    }
}

function is_some(x: option_t<'A>): bool = {
    match (x) {
        Some{} -> true,
        _      -> false
    }
}

typedef uuid = bit<128>

typedef mac_addr_t = bit<48>
typedef ip4_addr_t = bit<32>
typedef ip6_addr_t = bit<128>
typedef ip_addr_t  = IPAddr4 {addr4 : ip4_addr_t}
                   | IPAddr6 {addr6 : ip6_addr_t}

typedef ip4_subnet_t = IP4Subnet { addr : ip4_addr_t
                                 , mask : ip4_addr_t }

typedef ip6_subnet_t = IP6Subnet { addr : ip6_addr_t
                                 , mask : ip6_addr_t }

typedef ip_subnet_t = IPSubnet4 {ip4_subnet : ip4_subnet_t}
                    | IPSubnet6 {ip6_subnet : ip6_subnet_t}

/*
"NB_Global": {
    "columns": {
        "nb_cfg": {"type": {"key": "integer"}},
        "sb_cfg": {"type": {"key": "integer"}},
        "hv_cfg": {"type": {"key": "integer"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "connections": {
            "type": {"key": {"type": "uuid",
                             "refTable": "Connection"},
                             "min": 0,
                             "max": "unlimited"}},
        "ssl": {
            "type": {"key": {"type": "uuid",
                             "refTable": "SSL"},
                             "min": 0, "max": 1}}},
    "maxRows": 1,
    "isRoot": true},
*/

input relation NB_Global (
    nb_cfg: bigint,
    sb_cfg: bigint,
    hv_cfg: bigint
)

input relation NB_Global_external_ids (
    key:   string,
    value: string
)


/*
"Connection": {
    "columns": {
        "target": {"type": "string"},
        "max_backoff": {"type": {"key": {"type": "integer",
                                 "minInteger": 1000},
                                 "min": 0,
                                 "max": 1}},
        "inactivity_probe": {"type": {"key": "integer",
                                      "min": 0,
                                      "max": 1}},
        "other_config": {"type": {"key": "string",
                                  "value": "string",
                                  "min": 0,
                                  "max": "unlimited"}},
        "external_ids": {"type": {"key": "string",
                         "value": "string",
                         "min": 0,
                         "max": "unlimited"}},
        "is_connected": {"type": "boolean", "ephemeral": true},
        "status": {"type": {"key": "string",
                            "value": "string",
                            "min": 0,
                            "max": "unlimited"},
                            "ephemeral": true}},
    "indexes": [["target"]]},
*/
input relation Connection (
    id:                 uuid,
    target:             string,
    is_connected:       bool,
    max_backoff:        option_t<bigint>,
    inactivity_probe:   option_t<bigint>
)

input relation Connection_other_config (
    connection:   uuid,
    other_config: string
)

input relation Connection_external_ids (
    connection: uuid,
    value:      string
)

input relation Connection_status (
    connection: uuid,
    key:        string,
    value:      string
)

/*
"Logical_Switch": {
    "columns": {
        "name": {"type": "string"},
        "ports": {"type": {"key": {"type": "uuid",
                                   "refTable": "Logical_Switch_Port",
                                   "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "acls": {"type": {"key": {"type": "uuid",
                                  "refTable": "ACL",
                                  "refType": "strong"},
                          "min": 0,
                          "max": "unlimited"}},
        "qos_rules": {"type": {"key": {"type": "uuid",
                                  "refTable": "QoS",
                                  "refType": "strong"},
                          "min": 0,
                          "max": "unlimited"}},
        "load_balancer": {"type": {"key": {"type": "uuid",
                                          "refTable": "Load_Balancer",
                                          "refType": "strong"},
                                   "min": 0,
                                   "max": "unlimited"}},
        "dns_records": {"type": {"key": {"type": "uuid",
                                 "refTable": "DNS",
                                 "refType": "weak"},
                          "min": 0,
                          "max": "unlimited"}},
        "other_config": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/

input relation Logical_Switch (
    id:         uuid,
    name:       string,
    _type:      string
)

input relation Logical_Switch_other_config (
    logical_switch: uuid,
    key:            string,
    value:          string
)

input relation Logical_Switch_external_ids (
    logical_switch: uuid,
    key:            string,
    value:          string
)

/*
"Logical_Switch_Port": {
    "columns": {
        "name": {"type": "string"},
        "type": {"type": "string"},
        "options": {
             "type": {"key": "string",
                      "value": "string",
                      "min": 0,
                      "max": "unlimited"}},
        "parent_name": {"type": {"key": "string", "min": 0, "max": 1}},
        "tag_request": {
             "type": {"key": {"type": "integer",
                              "minInteger": 0,
                              "maxInteger": 4095},
                      "min": 0, "max": 1}},
        "tag": {
             "type": {"key": {"type": "integer",
                              "minInteger": 1,
                              "maxInteger": 4095},
                      "min": 0, "max": 1}},
        "addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": "unlimited"}},
        "dynamic_addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": 1}},
        "port_security": {"type": {"key": "string",
                                   "min": 0,
                                   "max": "unlimited"}},
        "up": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "dhcpv4_options": {"type": {"key": {"type": "uuid",
                                    "refTable": "DHCP_Options",
                                    "refType": "weak"},
                         "min": 0,
                         "max": 1}},
        "dhcpv6_options": {"type": {"key": {"type": "uuid",
                                    "refTable": "DHCP_Options",
                                    "refType": "weak"},
                         "min": 0,
                         "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false},
*/

input relation Logical_Switch_Port (
    id:                     uuid,
    logical_switch:         uuid,
    parent:                 option_t<string>,
    tag_request:            option_t<bigint>,
    tag:                    option_t<bigint>,
    /* can up and enabled fields really be missing? */
    up:                     option_t<bool>,
    enabled:                option_t<bool>,
    dhcpv4_options:         option_t<uuid>,
    dhcpv6_options:         option_t<uuid>,
    name:                   string,
    _type:                  string
)

input relation Logical_Switch_Port_options (
    logical_switch_port:    uuid,
    key:                    string,
    value:                  string
)

input relation Logical_Switch_Port_addresses (
    logical_switch_port:    uuid,
    address:                string
)

input relation Logical_Switch_Port_dynamic_addresses (
    logical_switch_port:    uuid,
    dynamic_address:        string
)

input relation Logical_Switch_Port_port_security (
    logical_switch_port:    uuid,
    port_security:          string
)

input relation Logical_Switch_Port_external_ids (
    logical_switch_port:    uuid,
    key:                    string,
    value:                  string
)

/*
"Address_Set": {
    "columns": {
        "name": {"type": "string"},
        "addresses": {"type": {"key": "string",
                               "min": 0,
                               "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": true},
*/

input relation Address_Set (
    id:             uuid,
    name:           string
)

input relation Address_Set_addresses (
    address_set:    uuid,
    address:        string
)

input relation Address_Set_external_ids (
    address_set:    uuid,
    key:            string,
    value:          string
)

/*
"Load_Balancer": {
    "columns": {
        "name": {"type": "string"},
        "vips": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "protocol": {
            "type": {"key": {"type": "string",
                     "enum": ["set", ["tcp", "udp"]]},
                     "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/

input relation Load_Balancer (
    id:             uuid,
    logical_switch: uuid,
    protocol:       option_t<string>,
    name:           string
)

input relation Load_Balancer_vips (
    load_balancer:  uuid,
    key:            string,
    value:          string
)

input relation Load_Balancer_external_ids (
    load_balancer:  uuid,
    key:            string,
    value:          string
)

/*
"ACL": {
    "columns": {
        "name": {"type": {"key": {"type": "string",
                                  "maxLength": 63},
                                  "min": 0, "max": 1}},
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "direction": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["from-lport", "to-lport"]]}}},
        "match": {"type": "string"},
        "action": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["allow", "allow-related", "drop", "reject"]]}}},
        "log": {"type": "boolean"},
        "severity": {"type": {"key": {"type": "string",
                                      "enum": ["set",
                                               ["alert", "warning",
                                                "notice", "info",
                                                "debug"]]},
                              "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/

input relation ACL (
    id:                 uuid,
    name:               option_t<string>,
    logical_switch:     uuid,
    priority:           bigint,
    direction:          string,
    _match:             string,
    action:             string,
    log:                bool,
    severity:           option_t<string>
)

input relation ACL_external_ids (
    acl:                uuid,
    key:                string,
    value:              string
)

/*
"QoS": {
    "columns": {
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "direction": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["from-lport", "to-lport"]]}}},
        "match": {"type": "string"},
        "action": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["dscp"]]},
                            "value": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 63},
                            "min": 0, "max": "unlimited"}},
        "bandwidth": {"type": {"key": {"type": "string",
                                       "enum": ["set", ["rate",
                                                        "burst"]]},
                               "value": {"type": "integer",
                                         "minInteger": 1,
                                         "maxInteger": 4294967295},
                               "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
input relation QoS (
    id:             uuid,
    logical_switch: uuid,
    priority:       bigint,
    direction:      string,
    _match:         string
)

input relation QoS_action (
    qos:            uuid,
    key:            string,
    value:          bigint
)

input relation QoS_bandwidth (
    qos:            uuid,
    key:            string,
    value:          bigint
)

input relation QoS_external_ids (
    qos:            uuid,
    key:            string,
    value:          string
)

/*
"Logical_Router": {
    "columns": {
        "name": {"type": "string"},
        "ports": {"type": {"key": {"type": "uuid",
                                   "refTable": "Logical_Router_Port",
                                   "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "static_routes": {"type": {"key": {"type": "uuid",
                                    "refTable": "Logical_Router_Static_Route",
                                    "refType": "strong"},
                           "min": 0,
                           "max": "unlimited"}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "nat": {"type": {"key": {"type": "uuid",
                                 "refTable": "NAT",
                                 "refType": "strong"},
                         "min": 0,
                         "max": "unlimited"}},
        "load_balancer": {"type": {"key": {"type": "uuid",
                                          "refTable": "Load_Balancer",
                                          "refType": "strong"},
                                   "min": 0,
                                   "max": "unlimited"}},
        "options": {
             "type": {"key": "string",
                      "value": "string",
                      "min": 0,
                      "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/
input relation Logical_Router (
    id:             uuid,
    enabled:        option_t<bool>,
    name:           string
)

input relation Logical_Router_options (
    logical_router: uuid,
    key:            string,
    value:          string
)

input relation Logical_Router_external_ids (
    logical_router: uuid,
    key:            string,
    value:          string
)

/*
"Logical_Router_Port": {
    "columns": {
        "name": {"type": "string"},
        "gateway_chassis": {
            "type": {"key": {"type": "uuid",
                             "refTable": "Gateway_Chassis",
                             "refType": "strong"},
                     "min": 0,
                     "max": "unlimited"}},
        "options": {
            "type": {"key": "string",
                     "value": "string",
                     "min": 0,
                     "max": "unlimited"}},
        "networks": {"type": {"key": "string",
                              "min": 1,
                              "max": "unlimited"}},
        "mac": {"type": "string"},
        "peer": {"type": {"key": "string", "min": 0, "max": 1}},
        "enabled": {"type": {"key": "boolean", "min": 0, "max": 1}},
        "ipv6_ra_configs": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false},
*/

input relation Logical_Router_Port (
    id:                     uuid,
    logical_router:         uuid,
    name:                   string,
    mac:                    string,
    peer:                   option_t<string>,
    enabled:                option_t<bool>
)

input relation Logical_Router_Port_options (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

input relation Logical_Router_Port_networks (
    logical_router_port:    uuid,
    network:                string
)

input relation Logical_Router_Port_ipv6_ra_configs (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

input relation Logical_Router_Port_external_ids (
    logical_router_port:    uuid,
    key:                    string,
    value:                  string
)

/*
"Logical_Router_Static_Route": {
    "columns": {
        "ip_prefix": {"type": "string"},
        "policy": {"type": {"key": {"type": "string",
                                    "enum": ["set", ["src-ip",
                                                     "dst-ip"]]},
                            "min": 0, "max": 1}},
        "nexthop": {"type": "string"},
        "output_port": {"type": {"key": "string", "min": 0, "max": 1}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
input relation Logical_Router_Static_Route (
    id:                             uuid,
    logical_router:                 uuid,
    ip_prefix:                      string,
    policy:                         option_t<string>,
    nexthop:                        string,
    output_port:                    option_t<string>
)

input relation Logical_Router_Static_Route_external_ids (
    logical_router_static_route:    uuid,
    key:                            string,
    value:                          string
)

/*
"NAT": {
    "columns": {
        "external_ip": {"type": "string"},
        "external_mac": {"type": {"key": "string",
                                  "min": 0, "max": 1}},
        "logical_ip": {"type": "string"},
        "logical_port": {"type": {"key": "string",
                                  "min": 0, "max": 1}},
        "type": {"type": {"key": {"type": "string",
                                   "enum": ["set", ["dnat",
                                                     "snat",
                                                     "dnat_and_snat"
                                                       ]]}}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": false},
*/
input relation NAT (
    id:             uuid,
    logical_router: uuid,
    external_ip:    string,
    external_mac:   option_t<string>,
    logical_ip:     string,
    logical_port:   option_t<string>,
    _type:          option_t<string>
)

input relation NAT_external_ids (
    nat:            uuid,
    key:            string,
    value:          string
)

/*
"DHCP_Options": {
    "columns": {
        "cidr": {"type": "string"},
        "options": {"type": {"key": "string", "value": "string",
                             "min": 0, "max": "unlimited"}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "isRoot": true},
*/
input relation DHCP_Options (
    id:             uuid,
    cidr:           string
)

input relation DHCP_Options_options (
    dhcp_options:   uuid,
    key:            string,
    value:          string
)

input relation DHCP_Options_external_ids (
    dhcp_options:   uuid,
    key:            string,
    value:          string
)


/*
"DNS": {
    "columns": {
        "records": {"type": {"key": "string",
                             "value": "string",
                             "min": 0,
                             "max": "unlimited"}},
        "external_ids": {"type": {"key": "string",
                         "value": "string",
                         "min": 0,
                         "max": "unlimited"}}},
    "isRoot": true},
*/
input relation DNS (
    id:             uuid,
    logical_switch: uuid
)

input relation DNS_records (
    dns:            uuid,
    key:            string,
    value:          string
)

input relation DNS_external_ids (
    dns:            uuid,
    key:            string,
    value:          string
)

/*
"SSL": {
    "columns": {
        "private_key": {"type": "string"},
        "certificate": {"type": "string"},
        "ca_cert": {"type": "string"},
        "bootstrap_ca_cert": {"type": "boolean"},
        "ssl_protocols": {"type": "string"},
        "ssl_ciphers": {"type": "string"},
        "external_ids": {"type": {"key": "string",
                                  "value": "string",
                                  "min": 0,
                                  "max": "unlimited"}}},
    "maxRows": 1},
*/
input relation SSL (
    id:                 uuid,
    private_key:        string,
    certificate:        string,
    bootstrap_ca_cert:  bool,
    ssl_protocols:      string,
    ssl_ciphers:        string
)

input relation SSL_external_ids (
    ssl:                uuid,
    key:                string,
    value:              string
)

/*
"Gateway_Chassis": {
    "columns": {
        "name": {"type": "string"},
        "chassis_name": {"type": "string"},
        "priority": {"type": {"key": {"type": "integer",
                                      "minInteger": 0,
                                      "maxInteger": 32767}}},
        "external_ids": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}},
        "options": {
            "type": {"key": "string", "value": "string",
                     "min": 0, "max": "unlimited"}}},
    "indexes": [["name"]],
    "isRoot": false}}
*/
input relation Gateway_Chassis (
    id:                 uuid,
    logical_router:     uuid,
    name:               string,
    chassis_name:       string,
    priority:           bigint
)

input relation Gateway_Chassis_external_ids (
    gateway_chassis:    uuid,
    key:                string,
    value:              string
)

input relation Gateway_Chassis_options (
    gateway_chassis:    uuid,
    key:                string,
    value:              string
)


/*****************************************/

typedef port_t = bit<16>

typedef ip_port_t = IPPort {ip: string, port: option_t<port_t>}


/* Load_Balancer.ip_addresses
 */
relation Load_Balancer_ip_addresses (
    load_balancer:  uuid,
    ip_address:     string
)

// external function
extern function ip_address_and_port_from_lb_key(key: string): ip_port_t

Load_Balancer_ip_addresses(lb, ip_address_and_port_from_lb_key(key).ip)
    :- Load_Balancer_vips(lb, key, _).

/* Logical_Switch_Port.macs
 */
relation Logical_Switch_Port_ips (
    logical_switch_port: uuid,
    mac:                 mac_addr_t,
    ip:                  ip_addr_t
)

relation Logical_Switch_Port_macs (
    logical_switch_port: uuid,
    mac:                 mac_addr_t
)

extern function extract_ips(str: string): Set<ip_addr_t>

extern function extract_mac(str: string): (mac_addr_t, string)

Logical_Switch_Port_ips(lsp, mac, ip) :-
    Logical_Switch_Port_addresses(lsp, addrs),
    (var mac, var ips) = extract_mac(addrs),
    var ip = FlatMap(extract_ips(ips)).

Logical_Switch_Port_ips(lsp, mac, ip) :-
    Logical_Switch_Port_dynamic_addresses(lsp, addrs),
    (var mac, var ips) = extract_mac(addrs),
    var ip = FlatMap(extract_ips(ips)).

Logical_Switch_Port_macs(lsp, mac) :-
    Logical_Switch_Port_ips(lsp, mac, _).

/* Logical_Switch.has_stateful_acl
 */
relation Logical_Switch_has_stateful_acl_action (
    logical_switch:     uuid
)

Logical_Switch_has_stateful_acl_action(ls) :-
    ACL(.logical_switch=ls, .action="allow-related").

/* Logical_Switch_Port.ps_addrs
 * Logical_Switch_Port.port_security_l2
 */
relation Logical_Switch_Port_ps_ips (
    logical_switch_port: uuid,
    mac:                 mac_addr_t,
    ip:                  ip_subnet_t
)

relation Logical_Switch_Port_ps_macs (
    logical_switch_port: uuid,
    mac:                 mac_addr_t
)


extern function extract_subnets(str: string): Set<ip_subnet_t>

Logical_Switch_Port_ps_ips(lsp, mac, subnet) :-
    Logical_Switch_Port_port_security(lsp, addrs),
    (var mac, var ips) = extract_mac(addrs),
    var subnet = FlatMap(extract_subnets(ips)).

Logical_Switch_Port_ps_macs(lsp, mac) :-
    Logical_Switch_Port_ps_ips(lsp, mac, _).


/* DHCP_Options.option_args
 */
relation DHCP_Options_option_args (
    dhcp_options:       uuid,
    option:             string
)

DHCP_Options_option_args(opts, key ++ "=" ++ value) :-
    DHCP_Options_options(opts, key, value),
    (key != "server_mac" and key != "dhcpv6_stateless").

/* DHCP_Options.server_mac
 */
relation DHCP_Options_server_mac (
    dhcp_options:       uuid,
    server_mac:         mac_addr_t
)

extern function eth_addr_from_string(str: string): option_t<mac_addr_t>

DHCP_Options_server_mac(opts, mac) :-
    DHCP_Options_options(opts, "server_mac", val),
    Some{var mac} = eth_addr_from_string(val).

DHCP_Options_server_mac(opts, mac) :-
    DHCP_Options_options(opts, "server_id", val),
    Some{var mac} = eth_addr_from_string(val).

/* DHCP_Options.server_ip
 */
relation DHCP_Options_server_ip (
    dhcp_options:       uuid,
    server_ip:          string
)

extern function ip_parse(str: string): option_t<ip_addr_t>

DHCP_Options_server_ip(opts, val) :-
    DHCP_Options_options(opts, "server_id", val),
    Some{var ip4} = ip_parse(val).

extern function in6_generate_lla(mac: mac_addr_t): ip6_addr_t
extern function ipv6_string_mapped(addr: ip6_addr_t): string

DHCP_Options_server_ip(opts, ipv6_string_mapped(lla)) :-
    DHCP_Options_options(opts, "server_id", val),
    None = ip_parse(val),
    Some{var mac} = eth_addr_from_string(val),
    var lla = in6_generate_lla(mac).

/* DHCP_Options.netmask
 */
relation DHCP_Options_netmask (
    dhcp_options:       uuid,
    netmask:            string
)

extern function build_dhcp_netmask(cidr: string): string

DHCP_Options_netmask(opts, build_dhcp_netmask(cidr)) :-
    DHCP_Options(opts, cidr).

/* DHCP_Options.stateful
 */
relation DHCP_Options_stateful (
    dhcp_options:       uuid,
    stateful:           bool
)

DHCP_Options_stateful(opts, true) :-
    DHCP_Options_options(opts, "dhcpv6_stateless", "false").

DHCP_Options_stateful(opts, false) :-
    DHCP_Options_options(opts, "dhcpv6_stateless", "true").
