input relation Vector(v: Vec<bigint>)
output relation SortedVector(v: Vec<bigint>)
output relation SortedVectorInPlace(v: Vec<bigint>)

SortedVector(sorted) :-
    Vector(v),
    var sorted = v.sort_imm().

SortedVectorInPlace(sorted) :-
    Vector(v),
    var sorted = {
        var v2 = v;
        v2.sort();
        v2
    }.

output relation IntVecTest(descr: string, vec: Vec<s64>)

IntVecTest("vec0", vec0()).
IntVecTest("vec0.resize(10,-100)", {var v = vec0(); v.resize(10, -100); v}).
IntVecTest("vec0.update_nth(10, -1)", {var v = vec0(); v.update_nth(10, -1); v}).
IntVecTest("vec0.update_nth(1, -1)", {var v = vec0(); v.update_nth(1, -1); v}).
IntVecTest("vec0.swap_nth(10, -1)", {
    var v = vec0();
    var val = -1;
    v.swap_nth(10, val);
    v.push(val);
    v
}).
IntVecTest("vec0.swap_nth(5, -1)", {
    var v = vec0();
    var val = -1;
    v.swap_nth(5, val);
    v.push(val);
    v
}).


function vec0(): Vec<s64> {
    [ 0, 1, 2, 3, 4, 5]
}

output relation VecZipTest(descr: string, vec: Vec<(string, s64)>, unz: (Vec<string>, Vec<s64>), m: Map<string, s64>)

VecZipTest("same length", ["0", "1", "2", "3", "4", "1"].zip(vec0()),
                          ["0", "1", "2", "3", "4", "1"].zip(vec0()).unzip(),
                          ["0", "1", "2", "3", "4", "1"].zip(vec0()).to_map()
          ).
VecZipTest("longer", ["0", "1", "2", "3", "4", "5", "6"].zip(vec0()),
                     ["0", "1", "2", "3", "4", "5", "6"].zip(vec0()).unzip(),
                     ["0", "1", "2", "3", "4", "5", "6"].zip(vec0()).to_map()
          ).
VecZipTest("shorter", ["0", "1", "2", "3"].zip(vec0()),
                      ["0", "1", "2", "3"].zip(vec0()).unzip(),
                      ["0", "1", "2", "3"].zip(vec0()).to_map()
          ).

input relation SetPairs(s1: Set<u64>, s2: Set<u64>)
output relation SetDifference(s1: Set<u64>, s2: Set<u64>, diff: Set<u64>)

SetDifference(s1, s2, set_difference(s1, s2)) :- SetPairs(s1, s2).
SetDifference(s2, s1, set_difference(s2, s1)) :- SetPairs(s1, s2).

input relation Maps(m: Map<u64, string>)
output relation MapSizes(m: Map<u64, string>, size: usize)

MapSizes(m, m.size()) :- Maps(m).

output relation MapValues(vals: Vec<string>)

MapValues(m.values()) :- Maps(m).

output relation MapNth(n: usize, k: Option<u64>, v: Option<string>)

MapNth(0, m.nth_key(0), m.nth_value(0)),
MapNth(3, m.nth_key(3), m.nth_value(3)),
MapNth(100, m.nth_key(100), m.nth_value(100)) :- Maps(m).

output relation Pow(descr: string, val: string)

Pow("pow32(2: u32, 32)", "${pow32(2: u32, 32)}").
Pow("$pow32(2: u64, 32)", "${pow32(2: u64, 32)}").

output relation Default(descr: string, val: string)

typedef DefaultEnum = DEnum1
                    | DEnum2{ x: u32 }

function to_string(e: DefaultEnum): string {
    match (e) {
        DEnum1 -> "DEnum1",
        DEnum2{e} -> "DEnum2{${e}}"
    }
}

Default("u32", "${default(): u32}").
Default("DefaultEnum", "${default(): DefaultEnum}").

output relation MapDelete(descr: string, m: Map<usize, string>, s: Option<string>)

MapDelete("alphabet", alphabet_map(), None).
MapDelete("${d}\\${m.size() - 1}", m2, s) :-
    MapDelete(d, m, _),
    m.size() > 0,
    (var m2, var s) = {
        var m2 = m;
        var s = m2.remove(m.size() - 1);
        (m2, s)
    }.

function alphabet_map(): Map<usize, string> {
    [ 0 -> "a"
    , 1 -> "b"
    , 2 -> "c"
    , 3 -> "d"
    , 4 -> "e"
    ]
}

output relation Ranges(descr: string, rng: Vec<isize>)

Ranges("10,100,0", range_vec(10, 100, 0)).
Ranges("10,10,1", range_vec(10, 10, 1)).
Ranges("100,101,1", range_vec(100, 101, 1)).
Ranges("10,15,2", range_vec(10,15,2)).
Ranges("10,16,2", range_vec(10,16,2)).
Ranges("15,10,2", range_vec(15,10,2)).
Ranges("15,10,-1", range_vec(15,10,-1)).
