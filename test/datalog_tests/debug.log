(142,0,0), 1, 0, Map, Ris_true{._s = "true"}, Re{._x = 1, ._t = "10%3", ._y = 1}
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Bob")
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Bob")
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Bob")
(1,2,0), 1, 0, Condition, ("Alice", "Ben"), Sib{.s1 = "Ben", .s2 = "Alice"}
(1,2,0), 1, 0, Condition, ("Alice", "Bob"), Sib{.s1 = "Bob", .s2 = "Alice"}
(1,2,0), 1, 0, Condition, ("Ben", "Alice"), Sib{.s1 = "Alice", .s2 = "Ben"}
(1,2,0), 1, 0, Condition, ("Ben", "Bob"), Sib{.s1 = "Bob", .s2 = "Ben"}
(1,2,0), 1, 0, Condition, ("Bob", "Alice"), Sib{.s1 = "Alice", .s2 = "Bob"}
(1,2,0), 1, 0, Condition, ("Bob", "Ben"), Sib{.s1 = "Ben", .s2 = "Bob"}
(268,1,0), 1, 0, Join, R13{.t = (1, true, "", 1)}, R14{.t = (0, (true, ("", 1)))}, ((0, (true, ("", 1))), (1, true, "", 1))
(268,1,0), 1, 0, Join, R13{.t = (1, true, "", 1)}, R14{.t = (1, (true, ("", 1)))}, ((1, (true, ("", 1))), (1, true, "", 1))
(268,3,0), 1, 0, Condition, (1, true, "", 1), J{.b = true}
(268,3,0), 1, 0, Condition, (1, true, "", 1), J{.b = true}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "St.Germain", .s2 = "Odeon"}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Louvres", .s2 = "Palais Royal"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Tuileries", .s2 = "Concorde"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Germain"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Odeon"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "St.Michel"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Chatelet"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Palais Royal", .s2 = "Louvres"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Concorde", .s2 = "Tuileries"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "St.Michel", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Concorde", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Tuileries"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Germain"}, Reach{.s1 = "St.Germain", .s2 = "St.Germain"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Germain", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Palais Royal", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Odeon", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Palais-Royal", .s2 = "Concorde"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}, Reach{.s1 = "Palais-Royal", .s2 = "Palais-Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "St.Germain"}, Answer{.x = "St.Germain"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "St.Michel"}, Answer{.x = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Chatelet"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}, Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Louvres"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Chatelet"}, Reach{.s1 = "St.Germain", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Odeon"}, Reach{.s1 = "St.Germain", .s2 = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Louvres"}, Reach{.s1 = "Odeon", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "St.Michel"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Tuileries"}, Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Chatelet"}, Answer{.x = "Chatelet"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Odeon"}, Answer{.x = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,3}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Louvres"}, Reach{.s1 = "St.Germain", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,3}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Louvres"}, Answer{.x = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,4}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}, Reach{.s1 = "St.Germain", .s2 = "Palais Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}, Answer{.x = "Palais Royal"}
(58,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, R3{.f1 = 0, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, R3{.f1 = 1, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, R3{.f1 = 2, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, R3{.f1 = 3, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, R3{.f1 = 4, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, R3{.f1 = 5, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, R3{.f1 = 6, .f2 = true}
(59,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, 0
(59,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, 1
(59,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, 2
(59,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, 3
(59,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, 4
(59,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, 5
(59,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, 6
(60,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, R6{.f = 0}
(60,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, R6{.f = 1}
(60,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, R6{.f = 2}
(60,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, R6{.f = 3}
(60,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, R6{.f = 4}
(60,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, R6{.f = 5}
(60,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, R6{.f = 6}
(66,1,0), 1, 3, Join, Table1{.id = 125, .name = "buzzzzzzzz"}, Table2{.name = "buzzzzzzzz", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 145200715403491832341915822591998648048, .name = "buzzzzzzzz", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 90687272392819007132700790854844487357, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 275637453779188164637819723427679302195, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 287269096593558965677480771304302291489, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 88006542552931101431331088457448451944, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 302246819069250028908049720787417591078, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 216380363571705730598942393138808105858, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 163553563808451251702619476897759050220, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 3280989158102350508363827193707975381, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 319900223054536652811205922354379277241, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(106,1,0), 1, 4, Join, Rel1{.x = 0, .y = IP4{.ip4 = 100}}, Rel2{.x = 0, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}, Rel3{.x = 0, .y = IP4{.ip4 = 100}, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "2"}, ("a", "2")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "3"}, ("a", "3")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "a"}, ("a", "a")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "b", .y = "2"}, ("b", "2")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "b", .y = "3"}, ("b", "3")
(110,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate1{.x = "a", .cnt = 4}
(110,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate1{.x = "b", .cnt = 3}
(114,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate2{.x = "a", .set = ["1", "2", "3", "a"]}
(114,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate2{.x = "b", .set = ["1", "2", "3"]}
(115,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate3{.x = "a", .vec = ["1", "2", "3", "a"]}
(115,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate3{.x = "b", .vec = ["1", "2", "3"]}
(116,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(("a", "1"), 1), (("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1)]}, "a"), Aggregate4{.x = "a", .map = [("a", "a")]}
(116,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(("b", "1"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, "b"), Aggregate4{.x = "b", .map = [("b", "3")]}
(111,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [((), 1), ((), 1), ((), 1), ((), 1), ((), 1), ((), 1), ((), 1)]}, AggregateCnt{.cnt = 7}
(112,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(("a", "1"), 1), (("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1), (("b", "1"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, AggregateCnt2{.cnt = 7}
(113,3,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, AggregateCnt3{.cnt = 5}
(108,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Counts1{.x = "a", .occurrences = 1}
(108,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Counts1{.x = "b", .occurrences = 0}
(117,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), (["1", "2", "3", "a"], "a")
(117,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), (["1", "2", "3"], "b")
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "1"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "2"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "3"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "a"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "1"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "2"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "3"}
(109,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Symmetric1{.x = "a", .sym = true}
(109,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Symmetric1{.x = "b", .sym = false}
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "1", .z = "z"}, AggregateMe1{.x = "a", .y = "1"}, ("a", "1", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "2", .z = "z"}, AggregateMe1{.x = "a", .y = "2"}, ("a", "2", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "3", .z = "z"}, AggregateMe1{.x = "a", .y = "3"}, ("a", "3", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "1", .z = "z"}, AggregateMe1{.x = "b", .y = "1"}, ("b", "1", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "2", .z = "z"}, AggregateMe1{.x = "b", .y = "2"}, ("b", "2", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "3", .z = "z"}, AggregateMe1{.x = "b", .y = "3"}, ("b", "3", "z")
(120,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = ("a", "z"), .vals = [("1", 1), ("2", 1), ("3", 1)]}, Concat{.s = "a-z:123"}
(120,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = ("b", "z"), .vals = [("1", 1), ("2", 1), ("3", 1)]}, Concat{.s = "b-z:123"}
(119,3,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(("1", "z"), 1), (("2", "z"), 1), (("3", "z"), 1)]}, "a"), AggregateByX{.x = "a", .cnt = 3}
(119,3,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(("1", "z"), 1), (("2", "z"), 1), (("3", "z"), 1)]}, "b"), AggregateByX{.x = "b", .cnt = 3}
(118,2,0), 1, 6, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(1, 1), (10, 1), (100, 1)]}, "a"), Sum{.x = "a", .sum = 111}
(118,2,0), 1, 6, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10, 1), (20, 1), (30, 1)]}, "b"), Sum{.x = "b", .sum = 60}
(121,0,0), 1, 7, Map, WithKey{.key = 0, .val = "foo"}, WithKeyDbg{.key = 0, .val = "foo"}
(121,0,0), 1, 7, Map, WithKey{.key = 1, .val = "bar"}, WithKeyDbg{.key = 1, .val = "bar"}
(121,0,0), 1, 7, Map, WithKey{.key = 2, .val = "buzz"}, WithKeyDbg{.key = 2, .val = "buzz"}
(121,0,0), -1, 8, Map, WithKey{.key = 0, .val = "foo"}, WithKeyDbg{.key = 0, .val = "foo"}
(121,0,0), -1, 9, Map, WithKey{.key = 1, .val = "bar"}, WithKeyDbg{.key = 1, .val = "bar"}
(121,0,0), 1, 10, Map, WithKey{.key = 1, .val = "bar2"}, WithKeyDbg{.key = 1, .val = "bar2"}
(121,0,0), 1, 10, Map, WithKey{.key = 3, .val = "xxx"}, WithKeyDbg{.key = 3, .val = "xxx"}
(121,0,0), 1, 10, Map, WithKey{.key = 4, .val = "hello"}, WithKeyDbg{.key = 4, .val = "hello"}
(121,0,0), -1, 10, Map, WithKey{.key = 2, .val = "buzz"}, WithKeyDbg{.key = 2, .val = "buzz"}
(121,0,0), -1, 10, Map, WithKey{.key = 3, .val = "xxx"}, WithKeyDbg{.key = 3, .val = "xxx"}
(121,0,0), -1, 11, Map, WithKey{.key = 1, .val = "bar2"}, WithKeyDbg{.key = 1, .val = "bar2"}
(121,0,0), 1, 11, Map, WithKey{.key = 1, .val = "bar3"}, WithKeyDbg{.key = 1, .val = "bar3"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Arnold Squitieri"}, Innocent{.name = "Arnold Squitieri"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Bill Smith"}, Innocent{.name = "Bill Smith"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Frank Morelli"}, Innocent{.name = "Frank Morelli"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "John Doe"}, Innocent{.name = "John Doe"}
(122,1,0), -1, 12, Antijoin, Suspect{.name = "Arnold Squitieri"}, Innocent{.name = "Arnold Squitieri"}
(122,1,0), -1, 12, Antijoin, Suspect{.name = "Frank Morelli"}, Innocent{.name = "Frank Morelli"}
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5})
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.101"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.102"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.103"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.103"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.104"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.105"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.1"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.2"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.3"}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("a", "1")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("b", "2")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("c", "3")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("c", "4")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("d", "5")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("e", "6")}
(128,2,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(30, 1), (31, 1), (50, 1)]}, "a"), Allocated{.name = "a", .xs = [30, 31, 50]}
(128,2,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10000, 1), (100, 1), (16777215, 1)]}, "b"), Allocated{.name = "b", .xs = [100, 10000, 16777215]}
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "4"}, ("a", "4")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "5"}, ("a", "5")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "4"}, ("b", "4")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "5"}, ("b", "5")
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "1"}, Realized{.name = "a", .id = "1", .x = 30}, Allocation{.name = "a", .id = "1", .x = 30}
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "2"}, Realized{.name = "a", .id = "2", .x = 31}, Allocation{.name = "a", .id = "2", .x = 31}
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "3"}, Realized{.name = "a", .id = "3", .x = 50}, Allocation{.name = "a", .id = "3", .x = 50}
(126,1,0), 1, 16, Join, Request{.name = "b", .id = "1"}, Realized{.name = "b", .id = "1", .x = 10000}, Allocation{.name = "b", .id = "1", .x = 10000}
(126,1,0), 1, 16, Join, Request{.name = "b", .id = "3"}, Realized{.name = "b", .id = "3", .x = 16777215}, Allocation{.name = "b", .id = "3", .x = 16777215}
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), -1, 16, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), -1, 16, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,3,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("4", 1), ("5", 1)]}, "a"), ToAllocate{.name = "a", .ids = ["4", "5"]}
(127,3,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("4", 1), ("5", 1)]}, "b"), ToAllocate{.name = "b", .ids = ["4", "5"]}
(129,1,0), 1, 16, Join, ToAllocate{.name = "a", .ids = ["4", "5"]}, Allocated{.name = "a", .xs = [30, 31, 50]}, ([30, 31, 50], "a", ["4", "5"])
(129,1,0), 1, 16, Join, ToAllocate{.name = "b", .ids = ["4", "5"]}, Allocated{.name = "b", .xs = [100, 10000, 16777215]}, ([100, 10000, 16777215], "b", ["4", "5"])
(129,2,0), 1, 16, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("4", 51), "a")
(129,2,0), 1, 16, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("5", 52), "a")
(129,2,0), 1, 16, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("4", 1), "b")
(129,2,0), 1, 16, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("5", 2), "b")
(129,3,0), 1, 16, Condition, (("4", 51), "a"), Allocation{.name = "a", .id = "4", .x = 51}
(129,3,0), 1, 16, Condition, (("5", 52), "a"), Allocation{.name = "a", .id = "5", .x = 52}
(129,3,0), 1, 16, Condition, (("4", 1), "b"), Allocation{.name = "b", .id = "4", .x = 1}
(129,3,0), 1, 16, Condition, (("5", 2), "b"), Allocation{.name = "b", .id = "5", .x = 2}
(128,2,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(30, 1), (31, 1), (50, 1)]}, "a"), Allocated{.name = "a", .xs = [30, 31, 50]}
(128,2,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10000, 1), (100, 1), (16777215, 1)]}, "b"), Allocated{.name = "b", .xs = [100, 10000, 16777215]}
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "4"}, ("a", "4")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "5"}, ("a", "5")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "4"}, ("b", "4")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "5"}, ("b", "5")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), 1, 17, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), 1, 17, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "1"}, Realized{.name = "a", .id = "1", .x = 30}, Allocation{.name = "a", .id = "1", .x = 30}
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "2"}, Realized{.name = "a", .id = "2", .x = 31}, Allocation{.name = "a", .id = "2", .x = 31}
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "3"}, Realized{.name = "a", .id = "3", .x = 50}, Allocation{.name = "a", .id = "3", .x = 50}
(126,1,0), -1, 17, Join, Request{.name = "b", .id = "1"}, Realized{.name = "b", .id = "1", .x = 10000}, Allocation{.name = "b", .id = "1", .x = 10000}
(126,1,0), -1, 17, Join, Request{.name = "b", .id = "3"}, Realized{.name = "b", .id = "3", .x = 16777215}, Allocation{.name = "b", .id = "3", .x = 16777215}
(127,3,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("4", 1), ("5", 1)]}, "a"), ToAllocate{.name = "a", .ids = ["4", "5"]}
(127,3,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("4", 1), ("5", 1)]}, "b"), ToAllocate{.name = "b", .ids = ["4", "5"]}
(129,1,0), -1, 17, Join, ToAllocate{.name = "a", .ids = ["4", "5"]}, Allocated{.name = "a", .xs = [30, 31, 50]}, ([30, 31, 50], "a", ["4", "5"])
(129,1,0), -1, 17, Join, ToAllocate{.name = "b", .ids = ["4", "5"]}, Allocated{.name = "b", .xs = [100, 10000, 16777215]}, ([100, 10000, 16777215], "b", ["4", "5"])
(129,2,0), -1, 17, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("4", 51), "a")
(129,2,0), -1, 17, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("5", 52), "a")
(129,2,0), -1, 17, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("4", 1), "b")
(129,2,0), -1, 17, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("5", 2), "b")
(129,3,0), -1, 17, Condition, (("4", 51), "a"), Allocation{.name = "a", .id = "4", .x = 51}
(129,3,0), -1, 17, Condition, (("5", 52), "a"), Allocation{.name = "a", .id = "5", .x = 52}
(129,3,0), -1, 17, Condition, (("4", 1), "b"), Allocation{.name = "b", .id = "4", .x = 1}
(129,3,0), -1, 17, Condition, (("5", 2), "b"), Allocation{.name = "b", .id = "5", .x = 2}
(130,0,0), 1, 18, Map, Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(132,0,0), 1, 18, Map, Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}, Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(131,0,0), 1, 18, Map, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(134,1,0), 1, 18, Condition, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered3{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(133,0,0), 1, 18, Map, Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered2{.r = Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}}
(137,1,0), 1, 19, Condition, Alloc{.id = 1, .allocated = [], .toallocate = [], .min_val = 0, .max_val = 0}, Adjusted{.id = 1, .alloc = []}
(137,1,0), 1, 19, Condition, Alloc{.id = 2, .allocated = [], .toallocate = ["a"], .min_val = 0, .max_val = 0}, Adjusted{.id = 2, .alloc = [("a", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 3, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 0}, Adjusted{.id = 3, .alloc = [("a", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 4, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 1}, Adjusted{.id = 4, .alloc = [("a", 0), ("b", 1)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 5, .allocated = [], .toallocate = ["a", "b"], .min_val = 1000, .max_val = 1001}, Adjusted{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 5, .allocated = [], .toallocate = ["a", "b"], .min_val = 4294967294, .max_val = 4294967295}, Adjusted{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 6, .allocated = [], .toallocate = ["a", "b"], .min_val = 4294967292, .max_val = 4294967295}, Adjusted{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 7, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 7, .alloc = [("a", 0), ("b", 1)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 8, .allocated = [], .toallocate = ["a", "b", "c", "d", "e", "f"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 9, .allocated = [("x", 0), ("y", 1000), ("z", 10000)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 9, .alloc = [("x", 0), ("b", 10001), ("c", 10002), ("d", 10003), ("e", 10004), ("z", 10000)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 10, .allocated = [("x", 0), ("y", 4294967295), ("z", 10000)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 10, .alloc = [("x", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("z", 10000)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 11, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 10}, Adjusted{.id = 11, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 12, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q"], .min_val = 0, .max_val = 10}, Adjusted{.id = 12, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 13, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 10}, Adjusted{.id = 13, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0), ("r", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 14, .allocated = [("x", 4294967287), ("y", 4294967289), ("z", 4294967295)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967286, .max_val = 4294967295}, Adjusted{.id = 14, .alloc = [("x", 4294967287), ("b", 4294967286), ("c", 4294967288), ("d", 4294967290), ("e", 4294967291), ("z", 4294967295), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 15, .allocated = [("x", 16777207), ("y", 16777209), ("z", 16777215)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967286, .max_val = 4294967295}, Adjusted{.id = 15, .alloc = [("x", 16777207), ("b", 4294967286), ("c", 4294967287), ("d", 4294967288), ("e", 4294967289), ("z", 16777215), ("p", 4294967290), ("q", 4294967291), ("r", 4294967292)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 16, .allocated = [("x", 11), ("y", 13), ("z", 20)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 10, .max_val = 20}, Adjusted{.id = 16, .alloc = [("x", 11), ("b", 10), ("c", 12), ("d", 14), ("e", 15), ("z", 20), ("p", 16), ("q", 17), ("r", 18)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 17, .allocated = [("x", 10), ("y", 11), ("z", 12)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 10, .max_val = 12}, Adjusted{.id = 17, .alloc = [("x", 10), ("z", 12)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 18, .allocated = [("x", 4294967293), ("y", 4294967294), ("z", 4294967295)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967293, .max_val = 4294967295}, Adjusted{.id = 18, .alloc = [("x", 4294967293), ("z", 4294967295)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 19, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 2}, Adjusted{.id = 19, .alloc = [("x", 0), ("z", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 20, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 0}, Adjusted{.id = 20, .alloc = [("x", 0), ("z", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 21, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 1, .max_val = 1}, Adjusted{.id = 21, .alloc = [("x", 0), ("z", 2)]}
(135,2,0), 1, 19, Condition, ([], 1, [], 0, 0), NewAllocation{.id = 1, .alloc = []}
(135,2,0), 1, 19, Condition, ([], 2, ["a"], 0, 0), NewAllocation{.id = 2, .alloc = [("a", 0)]}
(135,2,0), 1, 19, Condition, ([], 3, ["a", "b"], 0, 0), NewAllocation{.id = 3, .alloc = [("a", 0)]}
(135,2,0), 1, 19, Condition, ([], 4, ["a", "b"], 0, 1), NewAllocation{.id = 4, .alloc = [("a", 0), ("b", 1)]}
(135,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 1000, 1001), NewAllocation{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
(135,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 4294967294, 4294967295), NewAllocation{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
(135,2,0), 1, 19, Condition, ([], 6, ["a", "b"], 4294967292, 4294967295), NewAllocation{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
(135,2,0), 1, 19, Condition, ([], 7, ["a", "b"], 0, 4294967295), NewAllocation{.id = 7, .alloc = [("a", 0), ("b", 1)]}
(135,2,0), 1, 19, Condition, ([], 8, ["a", "b", "c", "d", "e", "f"], 0, 4294967295), NewAllocation{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
(135,2,0), 1, 19, Condition, ([0, 1000, 10000], 9, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocation{.id = 9, .alloc = [("x", 10001), ("b", 10002), ("c", 10003), ("d", 10004), ("e", 10005), ("z", 10006)]}
(135,2,0), 1, 19, Condition, ([0, 10000, 4294967295], 10, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocation{.id = 10, .alloc = [("x", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("z", 6)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 11, ["x", "b", "c", "d", "e", "z"], 0, 10), NewAllocation{.id = 11, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 12, ["x", "b", "c", "d", "e", "z", "p", "q"], 0, 10), NewAllocation{.id = 12, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 13, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 10), NewAllocation{.id = 13, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
(135,2,0), 1, 19, Condition, ([4294967287, 4294967289, 4294967295], 14, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocation{.id = 14, .alloc = [("x", 4294967286), ("b", 4294967288), ("c", 4294967290), ("d", 4294967291), ("e", 4294967292), ("z", 4294967293), ("p", 4294967294)]}
(135,2,0), 1, 19, Condition, ([16777207, 16777209, 16777215], 15, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocation{.id = 15, .alloc = [("x", 4294967286), ("b", 4294967287), ("c", 4294967288), ("d", 4294967289), ("e", 4294967290), ("z", 4294967291), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
(135,2,0), 1, 19, Condition, ([11, 13, 20], 16, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 20), NewAllocation{.id = 16, .alloc = [("x", 10), ("b", 12), ("c", 14), ("d", 15), ("e", 16), ("z", 17), ("p", 18), ("q", 19)]}
(135,2,0), 1, 19, Condition, ([10, 11, 12], 17, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 12), NewAllocation{.id = 17, .alloc = []}
(135,2,0), 1, 19, Condition, ([4294967293, 4294967294, 4294967295], 18, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967293, 4294967295), NewAllocation{.id = 18, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 19, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 2), NewAllocation{.id = 19, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 20, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 0), NewAllocation{.id = 20, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 21, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 1, 1), NewAllocation{.id = 21, .alloc = []}
(136,2,0), 1, 19, Condition, ([], 1, [], 0, 0), NewAllocationOpt{.id = 1, .alloc = []}
(136,2,0), 1, 19, Condition, ([], 2, ["a"], 0, 0), NewAllocationOpt{.id = 2, .alloc = [("a", ddlog_std::Some{.x = 0})]}
(136,2,0), 1, 19, Condition, ([], 3, ["a", "b"], 0, 0), NewAllocationOpt{.id = 3, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([], 4, ["a", "b"], 0, 1), NewAllocationOpt{.id = 4, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1})]}
(136,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 1000, 1001), NewAllocationOpt{.id = 5, .alloc = [("a", ddlog_std::Some{.x = 1000}), ("b", ddlog_std::Some{.x = 1001})]}
(136,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 4294967294, 4294967295), NewAllocationOpt{.id = 5, .alloc = [("a", ddlog_std::Some{.x = 4294967294}), ("b", ddlog_std::Some{.x = 4294967295})]}
(136,2,0), 1, 19, Condition, ([], 6, ["a", "b"], 4294967292, 4294967295), NewAllocationOpt{.id = 6, .alloc = [("a", ddlog_std::Some{.x = 4294967292}), ("b", ddlog_std::Some{.x = 4294967293})]}
(136,2,0), 1, 19, Condition, ([], 7, ["a", "b"], 0, 4294967295), NewAllocationOpt{.id = 7, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1})]}
(136,2,0), 1, 19, Condition, ([], 8, ["a", "b", "c", "d", "e", "f"], 0, 4294967295), NewAllocationOpt{.id = 8, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1}), ("c", ddlog_std::Some{.x = 2}), ("d", ddlog_std::Some{.x = 3}), ("e", ddlog_std::Some{.x = 4}), ("f", ddlog_std::Some{.x = 5})]}
(136,2,0), 1, 19, Condition, ([0, 1000, 10000], 9, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocationOpt{.id = 9, .alloc = [("x", ddlog_std::Some{.x = 10001}), ("b", ddlog_std::Some{.x = 10002}), ("c", ddlog_std::Some{.x = 10003}), ("d", ddlog_std::Some{.x = 10004}), ("e", ddlog_std::Some{.x = 10005}), ("z", ddlog_std::Some{.x = 10006})]}
(136,2,0), 1, 19, Condition, ([0, 10000, 4294967295], 10, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocationOpt{.id = 10, .alloc = [("x", ddlog_std::Some{.x = 1}), ("b", ddlog_std::Some{.x = 2}), ("c", ddlog_std::Some{.x = 3}), ("d", ddlog_std::Some{.x = 4}), ("e", ddlog_std::Some{.x = 5}), ("z", ddlog_std::Some{.x = 6})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 11, ["x", "b", "c", "d", "e", "z"], 0, 10), NewAllocationOpt{.id = 11, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 12, ["x", "b", "c", "d", "e", "z", "p", "q"], 0, 10), NewAllocationOpt{.id = 12, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0}), ("p", ddlog_std::Some{.x = 2}), ("q", ddlog_std::Some{.x = 4})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 13, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 10), NewAllocationOpt{.id = 13, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0}), ("p", ddlog_std::Some{.x = 2}), ("q", ddlog_std::Some{.x = 4}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([4294967287, 4294967289, 4294967295], 14, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocationOpt{.id = 14, .alloc = [("x", ddlog_std::Some{.x = 4294967286}), ("b", ddlog_std::Some{.x = 4294967288}), ("c", ddlog_std::Some{.x = 4294967290}), ("d", ddlog_std::Some{.x = 4294967291}), ("e", ddlog_std::Some{.x = 4294967292}), ("z", ddlog_std::Some{.x = 4294967293}), ("p", ddlog_std::Some{.x = 4294967294}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([16777207, 16777209, 16777215], 15, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocationOpt{.id = 15, .alloc = [("x", ddlog_std::Some{.x = 4294967286}), ("b", ddlog_std::Some{.x = 4294967287}), ("c", ddlog_std::Some{.x = 4294967288}), ("d", ddlog_std::Some{.x = 4294967289}), ("e", ddlog_std::Some{.x = 4294967290}), ("z", ddlog_std::Some{.x = 4294967291}), ("p", ddlog_std::Some{.x = 4294967292}), ("q", ddlog_std::Some{.x = 4294967293}), ("r", ddlog_std::Some{.x = 4294967294})]}
(136,2,0), 1, 19, Condition, ([11, 13, 20], 16, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 20), NewAllocationOpt{.id = 16, .alloc = [("x", ddlog_std::Some{.x = 10}), ("b", ddlog_std::Some{.x = 12}), ("c", ddlog_std::Some{.x = 14}), ("d", ddlog_std::Some{.x = 15}), ("e", ddlog_std::Some{.x = 16}), ("z", ddlog_std::Some{.x = 17}), ("p", ddlog_std::Some{.x = 18}), ("q", ddlog_std::Some{.x = 19}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([10, 11, 12], 17, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 12), NewAllocationOpt{.id = 17, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([4294967293, 4294967294, 4294967295], 18, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967293, 4294967295), NewAllocationOpt{.id = 18, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 19, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 2), NewAllocationOpt{.id = 19, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 20, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 0), NewAllocationOpt{.id = 20, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 21, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 1, 1), NewAllocationOpt{.id = 21, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(138,1,0), 1, 20, Join, XY{.x = 1, .y = 10}, YZX{.y = 10, .z = 100, .x = 1}, YX{.y = 10, .x = 1}
(138,1,0), 1, 20, Join, XY{.x = 2, .y = 20}, YZX{.y = 20, .z = 200, .x = 2}, YX{.y = 20, .x = 2}
(138,1,0), 1, 20, Join, XY{.x = 3, .y = 30}, YZX{.y = 30, .z = 300, .x = 3}, YX{.y = 30, .x = 3}
(138,1,0), 1, 20, Join, XY{.x = 4, .y = 40}, YZX{.y = 40, .z = 400, .x = 4}, YX{.y = 40, .x = 4}
(139,1,0), 1, 22, Join, IString1{.s = "Hello, "}, String2{.s = "bar"}, IConcatString{.s = "Hello, bar"}
(139,1,0), 1, 22, Join, IString1{.s = "Foo "}, String2{.s = "bar"}, IConcatString{.s = "Foo bar"}
(139,1,0), 1, 22, Join, IString1{.s = "Hello, "}, String2{.s = "world"}, IConcatString{.s = "Hello, world"}
(139,1,0), 1, 22, Join, IString1{.s = "Foo "}, String2{.s = "world"}, IConcatString{.s = "Foo world"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Hello, bar"}, ConcatString{.s = "Hello, bar"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Foo bar"}, ConcatString{.s = "Foo bar"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Hello, world"}, ConcatString{.s = "Hello, world"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Foo world"}, ConcatString{.s = "Foo world"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "foo"}, AMethod{.a1 = "foo", .a2 = "bar"}, CMethod{.c1 = "bar", .c2 = "foo"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "foo"}, AMethod{.a1 = "foo", .a2 = "buzz"}, CMethod{.c1 = "buzz", .c2 = "foo"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "world"}, AMethod{.a1 = "world", .a2 = "hello"}, CMethod{.c1 = "hello", .c2 = "world"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "foo", .a2 = "bar"}, BMethod{.b1 = "c", .b2 = "foo"}, DMethod{.c1 = "bar", .c2 = "foo"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "foo", .a2 = "buzz"}, BMethod{.b1 = "c", .b2 = "foo"}, DMethod{.c1 = "buzz", .c2 = "foo"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "world", .a2 = "hello"}, BMethod{.b1 = "c", .b2 = "world"}, DMethod{.c1 = "hello", .c2 = "world"}
(145,0,0), 1, 24, Map, Numbers{.x = 0}, Power3{.y = 0}
(145,0,0), 1, 24, Map, Numbers{.x = 1}, Power3{.y = 1}
(145,0,0), 1, 24, Map, Numbers{.x = 2}, Power3{.y = 8}
(145,0,0), 1, 24, Map, Numbers{.x = 3}, Power3{.y = 27}
(145,0,0), 1, 24, Map, Numbers{.x = 4}, Power3{.y = 64}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333", .m = false}
(146,0,0), 1, 25, Map, Regex{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01"}, RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101"}, RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101", .m = false}
(146,0,0), 1, 25, Map, Regex{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb"}, RegexMatch{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "a+b+", .text = "aaaaabbbbbb"}, RegexMatch{.regex = "a+b+", .text = "aaaaabbbbbb", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "a+b+", .text = "AaAaAbbBBBb"}, RegexMatch{.regex = "a+b+", .text = "AaAaAbbBBBb", .m = false}
(263,1,0), 1, 26, Join, DdlogNode{.id = 9}, DdlogBinding{.tn = 0, .entity = 9}, (0, 9)
(263,1,0), 1, 26, Join, DdlogNode{.id = 10}, DdlogBinding{.tn = 1, .entity = 10}, (1, 10)
(263,1,0), 1, 26, Join, DdlogNode{.id = 11}, DdlogBinding{.tn = 2, .entity = 11}, (2, 11)
(263,1,0), 1, 26, Join, DdlogNode{.id = 12}, DdlogBinding{.tn = 3, .entity = 12}, (3, 12)
(263,1,0), 1, 26, Join, DdlogNode{.id = 13}, DdlogBinding{.tn = 4, .entity = 13}, (4, 13)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 0}, DdlogDependency{.parent = 1, .child = 0}, (1, 0)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 0}, DdlogDependency{.parent = 9, .child = 0}, (9, 0)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 0, .child = 1}, (0, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 2, .child = 1}, (2, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 11, .child = 1}, (11, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 2}, DdlogDependency{.parent = 1, .child = 2}, (1, 2)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 2}, DdlogDependency{.parent = 3, .child = 2}, (3, 2)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 3}, DdlogDependency{.parent = 2, .child = 3}, (2, 3)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 3}, DdlogDependency{.parent = 4, .child = 3}, (4, 3)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 4}, DdlogDependency{.parent = 3, .child = 4}, (3, 4)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 4}, DdlogDependency{.parent = 10, .child = 4}, (10, 4)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 3, .child = 5}, (3, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 6, .child = 5}, (6, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 12, .child = 5}, (12, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 5, .child = 6}, (5, 6)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 7, .child = 6}, (7, 6)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 6, .child = 7}, (6, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 8, .child = 7}, (8, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 13, .child = 7}, (13, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 8}, DdlogDependency{.parent = 0, .child = 8}, (0, 8)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 8}, DdlogDependency{.parent = 7, .child = 8}, (7, 8)
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 9, .vals = [(0, 1)]}, 9), Span{.entity = 9, .tns = [0]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 10, .vals = [(1, 1)]}, 10), Span{.entity = 10, .tns = [1]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 11, .vals = [(2, 1)]}, 11), Span{.entity = 11, .tns = [2]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 12, .vals = [(3, 1)]}, 12), Span{.entity = 12, .tns = [3]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 13, .vals = [(4, 1)]}, 13), Span{.entity = 13, .tns = [4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (9, 0), Span{.entity = 9, .tns = [0]}, ([0], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (10, 4), Span{.entity = 10, .tns = [1]}, ([1], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (11, 1), Span{.entity = 11, .tns = [2]}, ([2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (12, 5), Span{.entity = 12, .tns = [3]}, ([3], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (13, 7), Span{.entity = 13, .tns = [4]}, ([4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1)]}, 0), Span{.entity = 0, .tns = [0]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([2], 1)]}, 1), Span{.entity = 1, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([3], 1)]}, 5), Span{.entity = 5, .tns = [3]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([4], 1)]}, 7), Span{.entity = 7, .tns = [4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (0, 1), Span{.entity = 0, .tns = [0]}, ([0], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (0, 8), Span{.entity = 0, .tns = [0]}, ([0], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (1, 0), Span{.entity = 1, .tns = [2]}, ([2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (1, 2), Span{.entity = 1, .tns = [2]}, ([2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (4, 3), Span{.entity = 4, .tns = [1]}, ([1], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (5, 6), Span{.entity = 5, .tns = [3]}, ([3], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (7, 6), Span{.entity = 7, .tns = [4]}, ([4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (7, 8), Span{.entity = 7, .tns = [4]}, ([4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1)]}, 0), Span{.entity = 0, .tns = [0]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([2], 1)]}, 1), Span{.entity = 1, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([2], 1)]}, 2), Span{.entity = 2, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1)]}, 3), Span{.entity = 3, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (0, 1), Span{.entity = 0, .tns = [0]}, ([0], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (0, 8), Span{.entity = 0, .tns = [0]}, ([0], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (1, 0), Span{.entity = 1, .tns = [2]}, ([2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (1, 2), Span{.entity = 1, .tns = [2]}, ([2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (2, 1), Span{.entity = 2, .tns = [2]}, ([2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (2, 3), Span{.entity = 2, .tns = [2]}, ([2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 2), Span{.entity = 3, .tns = [1]}, ([1], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 4), Span{.entity = 3, .tns = [1]}, ([1], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 5), Span{.entity = 3, .tns = [1]}, ([1], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (8, 7), Span{.entity = 8, .tns = [0, 4]}, ([0, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([2], 1)]}, 2), Span{.entity = 2, .tns = [2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1)]}, 3), Span{.entity = 3, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1), ([2], 1)]}, 3), Span{.entity = 3, .tns = [1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 2)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([3], 1)]}, 5), Span{.entity = 5, .tns = [3]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([4], 1)]}, 7), Span{.entity = 7, .tns = [4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (2, 1), Span{.entity = 2, .tns = [2]}, ([2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (2, 3), Span{.entity = 2, .tns = [2]}, ([2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 2), Span{.entity = 3, .tns = [1]}, ([1], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 4), Span{.entity = 3, .tns = [1]}, ([1], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 5), Span{.entity = 3, .tns = [1]}, ([1], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 2), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 4), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 5), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (5, 6), Span{.entity = 5, .tns = [3]}, ([3], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (7, 6), Span{.entity = 7, .tns = [4]}, ([4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (7, 8), Span{.entity = 7, .tns = [4]}, ([4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 4]}, ([0, 2, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (8, 7), Span{.entity = 8, .tns = [0, 4]}, ([0, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1), ([2], 1)]}, 3), Span{.entity = 3, .tns = [1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 2)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1), ([1, 2], 1)]}, 4), Span{.entity = 4, .tns = [1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 2), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 4), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 5), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (4, 3), Span{.entity = 4, .tns = [1]}, ([1], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (4, 3), Span{.entity = 4, .tns = [1, 2]}, ([1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 4]}, ([0, 2, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1), ([1, 2], 1)]}, 4), Span{.entity = 4, .tns = [1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (4, 3), Span{.entity = 4, .tns = [1, 2]}, ([1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (7, 6), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (7, 8), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 2), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,7}, Join, (8, 7), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,7}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,4,0), -1, ddlog_std::DDNestedTS{26,7}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,7}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 2), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,1,0), 1, ddlog_std::DDNestedTS{27,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 6, .child = 1}, (6, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{27,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 1, .child = 6}, (1, 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,2}, Join, (1, 6), Span{.entity = 1, .tns = [2]}, ([2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (1, 6), Span{.entity = 1, .tns = [2]}, ([2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,4,0), 1, ddlog_std::DDNestedTS{27,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 5), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 7), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2), ([2, 3, 4], 1)]}, 1), Span{.entity = 1, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 1), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 5), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 7), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 1), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 5), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 7), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2), ([2, 3, 4], 1)]}, 1), Span{.entity = 1, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 2), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 3, 4], 1), ([0, 2, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), -2, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 2), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 3, 4], 1), ([0, 2, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -2, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 2), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 3), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2, 3, 4], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2, 3, 4], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -2, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2, 3, 4], 2), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 3)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,7}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,7}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 3)
(264,4,0), -1, ddlog_std::DDNestedTS{27,7}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,7}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(269,1,0), 1, 28, Join, Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
(269,2,0), 1, 28, Join, (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, LongJoin{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(1,1,0), 1, 1, Condition, std_test::Vector{.v = [5, 4, 3, 2, 1]}, std_test::SortedVector{.v = [1, 2, 3, 4, 5]}
(1,1,0), 1, 1, Condition, std_test::Vector{.v = []}, std_test::SortedVector{.v = []}
(1,1,0), 1, 1, Condition, std_test::Vector{.v = [5]}, std_test::SortedVector{.v = [5]}
(1,1,0), 1, 1, Condition, std_test::Vector{.v = [0, 100, -100]}, std_test::SortedVector{.v = [-100, 0, 100]}
(2,1,0), 1, 1, Condition, std_test::Vector{.v = [5, 4, 3, 2, 1]}, std_test::SortedVectorInPlace{.v = [1, 2, 3, 4, 5]}
(2,1,0), 1, 1, Condition, std_test::Vector{.v = []}, std_test::SortedVectorInPlace{.v = []}
(2,1,0), 1, 1, Condition, std_test::Vector{.v = [5]}, std_test::SortedVectorInPlace{.v = [5]}
(2,1,0), 1, 1, Condition, std_test::Vector{.v = [0, 100, -100]}, std_test::SortedVectorInPlace{.v = [-100, 0, 100]}
(12,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1, 2, 3, 4, 5], .s2 = [1, 2, 3]}, std_test::SetDifference{.s1 = [1, 2, 3, 4, 5], .s2 = [1, 2, 3], .diff = [4, 5]}
(12,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [], .s2 = []}, std_test::SetDifference{.s1 = [], .s2 = [], .diff = []}
(12,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1000], .s2 = [1]}, std_test::SetDifference{.s1 = [1000], .s2 = [1], .diff = [1000]}
(12,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1, 2, 3], .s2 = [2, 3, 4]}, std_test::SetDifference{.s1 = [1, 2, 3], .s2 = [2, 3, 4], .diff = [1]}
(13,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1, 2, 3, 4, 5], .s2 = [1, 2, 3]}, std_test::SetDifference{.s1 = [1, 2, 3], .s2 = [1, 2, 3, 4, 5], .diff = []}
(13,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [], .s2 = []}, std_test::SetDifference{.s1 = [], .s2 = [], .diff = []}
(13,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1000], .s2 = [1]}, std_test::SetDifference{.s1 = [1], .s2 = [1000], .diff = [1]}
(13,0,0), 1, 2, Map, std_test::SetPairs{.s1 = [1, 2, 3], .s2 = [2, 3, 4]}, std_test::SetDifference{.s1 = [2, 3, 4], .s2 = [1, 2, 3], .diff = [4]}
(16,0,0), 1, 3, Map, std_test::Maps{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")]}, std_test::MapNth{.n = 0, .k = ddlog_std::Some{.x = 1}, .v = ddlog_std::Some{.x = "e"}}
(16,0,1), 1, 3, Map, std_test::Maps{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")]}, std_test::MapNth{.n = 3, .k = ddlog_std::Some{.x = 4}, .v = ddlog_std::Some{.x = "b"}}
(16,0,2), 1, 3, Map, std_test::Maps{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")]}, std_test::MapNth{.n = 100, .k = ddlog_std::None{}, .v = ddlog_std::None{}}
(14,0,0), 1, 3, Map, std_test::Maps{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")]}, std_test::MapSizes{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")], .size = 5}
(15,0,0), 1, 3, Map, std_test::Maps{.m = [(1, "e"), (2, "d"), (3, "c"), (4, "b"), (5, "a")]}, std_test::MapValues{.vals = ["e", "d", "c", "b", "a"]}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(186,0,0), 1, 1, Map, json_test::TVariant1{.b = true}, json_test::TVariant1{.b = true}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(297,0,0), 1, 1, Map, fp_test::DoublesFromRecord{.s = "0.5", .d = 0.5}, fp_test::DoublesFromRecord{.s = "0.5", .d = 0.5}
(297,0,0), 1, 1, Map, fp_test::DoublesFromRecord{.s = "1.6487212181091308", .d = 1.6487212181091309}, fp_test::DoublesFromRecord{.s = "1.6487212181091308", .d = 1.6487212181091309}
(297,0,0), 1, 1, Map, fp_test::DoublesFromRecord{.s = "-0.5", .d = -0.5}, fp_test::DoublesFromRecord{.s = "-0.5", .d = -0.5}
(297,0,0), 1, 1, Map, fp_test::DoublesFromRecord{.s = "-32.0e-2", .d = -0.32}, fp_test::DoublesFromRecord{.s = "-32.0e-2", .d = -0.32}
(297,0,0), 1, 1, Map, fp_test::DoublesFromRecord{.s = "-32e2", .d = -3200}, fp_test::DoublesFromRecord{.s = "-32e2", .d = -3200}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "1", .f = 1}, fp_test::FloatsFromRecord{.s = "1", .f = 1}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "0.5", .f = 0.5}, fp_test::FloatsFromRecord{.s = "0.5", .f = 0.5}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "1.6487212181091308", .f = 1.6487212}, fp_test::FloatsFromRecord{.s = "1.6487212181091308", .f = 1.6487212}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "-0.5", .f = -0.5}, fp_test::FloatsFromRecord{.s = "-0.5", .f = -0.5}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "-32.0e-2", .f = -0.32}, fp_test::FloatsFromRecord{.s = "-32.0e-2", .f = -0.32}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "0.32", .f = 0.32}, fp_test::FloatsFromRecord{.s = "0.32", .f = 0.32}
(296,0,0), 1, 1, Map, fp_test::FloatsFromRecord{.s = "-32e2", .f = -3200}, fp_test::FloatsFromRecord{.s = "-32e2", .f = -3200}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(314,0,0), 1, 1, Map, internment_test::IInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "foo"}
(314,0,0), 1, 1, Map, internment_test::IInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "bar"}
(316,0,0), 1, 1, Map, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "foo", .ix = "foo"}
(316,0,0), 1, 1, Map, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "bar", .ix = "bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "bar ibar4", .ix = "bar ibar4"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "foo ibar4", .ix = "foo ibar4"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "bar ifoo25!", .ix = "bar ifoo25!"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "foo ifoo25!", .ix = "foo ifoo25!"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "bar ifoo25", .ix = "bar ifoo25"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "foo ifoo25", .ix = "foo ifoo25"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "bar ibar", .ix = "bar ibar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "foo ibar", .ix = "foo ibar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "bar static foo", .ix = "bar static foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "foo static foo", .ix = "foo static foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "bar ifoo", .ix = "bar ifoo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "foo ifoo", .ix = "foo ifoo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "ibar4 bar", .ix = "ibar4 bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "bar bar", .ix = "bar bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "ifoo25! bar", .ix = "ifoo25! bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "ifoo25 bar", .ix = "ifoo25 bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "ibar bar", .ix = "ibar bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "static foo bar", .ix = "static foo bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "ifoo bar", .ix = "ifoo bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "bar"}, internment_test::OInternedString{.x = "foo bar", .ix = "foo bar"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "ibar4 foo", .ix = "ibar4 foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "bar"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "bar foo", .ix = "bar foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "ifoo25! foo", .ix = "ifoo25! foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "ifoo25 foo", .ix = "ifoo25 foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "ibar foo", .ix = "ibar foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "static foo foo", .ix = "static foo foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "ifoo foo", .ix = "ifoo foo"}
(317,1,0), 1, 1, Join, internment_test::AllInternedString{.ix = "foo"}, internment_test::AllInternedString{.ix = "foo"}, internment_test::OInternedString{.x = "foo foo", .ix = "foo foo"}
(318,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, .p = "x=10000000000000000000000000"}
(318,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, .p = "x=-10000000000000000000000000"}
(319,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, .p = "t.0=-5"}
(319,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, .p = "t.0=5000"}
(320,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, .p = "t.1=5.5"}
(320,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, .p = "t.1=-1.2345"}
(321,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag1{.f1 = true}, .t = (-5, 5.5), .x = 10000000000000000000000000}, .p = "f1=true"}
(322,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, .p = "f2=10"}
(323,0,0), 1, 2, Map, internment_test::IStruct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, internment_test::Projections{.inp = internment_test::Struct{.u = internment_test::Tag2{.f2 = 10, .f3 = "foo"}, .t = (5000, -1.2345), .x = -10000000000000000000000000}, .p = "f3=foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(324,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]}, "a"), tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}
(324,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(100, 1), (200, 1), (300, 1), (400, 1), (500, 1)]}, "b"), tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}
(324,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = "c", .vals = [(4, 1), (5, 1), (100, 1), (200, 1)]}, "c"), tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Diffs{.setid1 = "a", .setid2 = "a", .set = []}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Diffs{.setid1 = "b", .setid2 = "a", .set = [100, 200, 300, 400, 500]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Diffs{.setid1 = "c", .setid2 = "a", .set = [100, 200]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Diffs{.setid1 = "a", .setid2 = "b", .set = [0, 1, 2, 3, 4, 5]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Diffs{.setid1 = "b", .setid2 = "b", .set = []}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Diffs{.setid1 = "c", .setid2 = "b", .set = [4, 5]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Diffs{.setid1 = "a", .setid2 = "c", .set = [0, 1, 2, 3]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Diffs{.setid1 = "b", .setid2 = "c", .set = [300, 400, 500]}
(327,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Diffs{.setid1 = "c", .setid2 = "c", .set = []}
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, ("a", [0, 1, 2, 3, 4, 5], "a", [0, 1, 2, 3, 4, 5])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, ("a", [0, 1, 2, 3, 4, 5], "b", [100, 200, 300, 400, 500])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, ("a", [0, 1, 2, 3, 4, 5], "c", [4, 5, 100, 200])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, ("b", [100, 200, 300, 400, 500], "a", [0, 1, 2, 3, 4, 5])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, ("b", [100, 200, 300, 400, 500], "b", [100, 200, 300, 400, 500])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, ("b", [100, 200, 300, 400, 500], "c", [4, 5, 100, 200])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, ("c", [4, 5, 100, 200], "a", [0, 1, 2, 3, 4, 5])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, ("c", [4, 5, 100, 200], "b", [100, 200, 300, 400, 500])
(325,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, ("c", [4, 5, 100, 200], "c", [4, 5, 100, 200])
(325,2,0), 1, 1, Condition, ("a", [0, 1, 2, 3, 4, 5], "a", [0, 1, 2, 3, 4, 5]), tinyset_test::Intersects{.setid1 = "a", .setid2 = "a", .set = [0, 1, 2, 3, 4, 5]}
(325,2,0), 1, 1, Condition, ("a", [0, 1, 2, 3, 4, 5], "b", [100, 200, 300, 400, 500]), tinyset_test::Intersects{.setid1 = "b", .setid2 = "a", .set = []}
(325,2,0), 1, 1, Condition, ("a", [0, 1, 2, 3, 4, 5], "c", [4, 5, 100, 200]), tinyset_test::Intersects{.setid1 = "c", .setid2 = "a", .set = [4, 5]}
(325,2,0), 1, 1, Condition, ("b", [100, 200, 300, 400, 500], "a", [0, 1, 2, 3, 4, 5]), tinyset_test::Intersects{.setid1 = "a", .setid2 = "b", .set = []}
(325,2,0), 1, 1, Condition, ("b", [100, 200, 300, 400, 500], "b", [100, 200, 300, 400, 500]), tinyset_test::Intersects{.setid1 = "b", .setid2 = "b", .set = [100, 200, 300, 400, 500]}
(325,2,0), 1, 1, Condition, ("b", [100, 200, 300, 400, 500], "c", [4, 5, 100, 200]), tinyset_test::Intersects{.setid1 = "c", .setid2 = "b", .set = [100, 200]}
(325,2,0), 1, 1, Condition, ("c", [4, 5, 100, 200], "a", [0, 1, 2, 3, 4, 5]), tinyset_test::Intersects{.setid1 = "a", .setid2 = "c", .set = [4, 5]}
(325,2,0), 1, 1, Condition, ("c", [4, 5, 100, 200], "b", [100, 200, 300, 400, 500]), tinyset_test::Intersects{.setid1 = "b", .setid2 = "c", .set = [100, 200]}
(325,2,0), 1, 1, Condition, ("c", [4, 5, 100, 200], "c", [4, 5, 100, 200]), tinyset_test::Intersects{.setid1 = "c", .setid2 = "c", .set = [4, 5, 100, 200]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Intersects2{.setid1 = "a", .setid2 = "a", .set = [0, 1, 2, 3, 4, 5]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Intersects2{.setid1 = "b", .setid2 = "a", .set = []}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Intersects2{.setid1 = "c", .setid2 = "a", .set = [4, 5]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Intersects2{.setid1 = "a", .setid2 = "b", .set = []}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Intersects2{.setid1 = "b", .setid2 = "b", .set = [100, 200, 300, 400, 500]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Intersects2{.setid1 = "c", .setid2 = "b", .set = [100, 200]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "a", .set = [0, 1, 2, 3, 4, 5]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Intersects2{.setid1 = "a", .setid2 = "c", .set = [4, 5]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "b", .set = [100, 200, 300, 400, 500]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Intersects2{.setid1 = "b", .setid2 = "c", .set = [100, 200]}
(326,1,0), 1, 1, Join, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Sets{.setid = "c", .set = [4, 5, 100, 200]}, tinyset_test::Intersects2{.setid1 = "c", .setid2 = "c", .set = [4, 5, 100, 200]}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(409,0,0), 1, 1, Map, map_test::NestedMap{.key = 1, .m = [(1, [("1", "a"), ("2", "b")]), (2, [("3", "c"), ("4", "d")])]}, map_test::NestedMap{.key = 1, .m = [(1, [("1", "a"), ("2", "b")]), (2, [("3", "c"), ("4", "d")])]}
(409,0,0), -1, 2, Map, map_test::NestedMap{.key = 1, .m = [(1, [("1", "a"), ("2", "b")]), (2, [("3", "c"), ("4", "d")])]}, map_test::NestedMap{.key = 1, .m = [(1, [("1", "a"), ("2", "b")]), (2, [("3", "c"), ("4", "d")])]}
(409,0,0), 1, 2, Map, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("1", "b"), ("30", "30")]), (2, [("3", "c"), ("4", "d")])]}, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("1", "b"), ("30", "30")]), (2, [("3", "c"), ("4", "d")])]}
(409,0,0), -1, 3, Map, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("1", "b"), ("30", "30")]), (2, [("3", "c"), ("4", "d")])]}, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("1", "b"), ("30", "30")]), (2, [("3", "c"), ("4", "d")])]}
(409,0,0), 1, 3, Map, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("a", "b"), ("c", "d")]), (2, [("3", "c"), ("4", "d")])]}, map_test::NestedMap{.key = 1, .m = [(0, [("0", "0")]), (1, [("a", "b"), ("c", "d")]), (2, [("3", "c"), ("4", "d")])]}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(430,0,0), 1, 1, Map, hashset_test::TestSetMutateI{.k = 1, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 1, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 1, Map, hashset_test::TestSetMutateI{.k = 2, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 2, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 1, Map, hashset_test::TestSetMutateI{.k = 3, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 3, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 1, Map, hashset_test::TestSetMutateI{.k = 4, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 4, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 1, Map, hashset_test::TestSetMutateI{.k = 5, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 5, .v = [4, 2, 1, 3, 5]}
(430,0,0), -1, 2, Map, hashset_test::TestSetMutateI{.k = 1, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 1, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 2, Map, hashset_test::TestSetMutateI{.k = 1, .v = []}, hashset_test::TestSetMutateO{.k = 1, .v = []}
(430,0,0), -1, 2, Map, hashset_test::TestSetMutateI{.k = 2, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 2, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 2, Map, hashset_test::TestSetMutateI{.k = 2, .v = [10, 6, 8, 9, 4, 2, 1, 3, 7, 5]}, hashset_test::TestSetMutateO{.k = 2, .v = [10, 6, 8, 9, 4, 2, 1, 3, 7, 5]}
(430,0,0), -1, 2, Map, hashset_test::TestSetMutateI{.k = 3, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 3, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 2, Map, hashset_test::TestSetMutateI{.k = 3, .v = [4, 5]}, hashset_test::TestSetMutateO{.k = 3, .v = [4, 5]}
(430,0,0), -1, 2, Map, hashset_test::TestSetMutateI{.k = 4, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 4, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 2, Map, hashset_test::TestSetMutateI{.k = 4, .v = [9, 4, 2, 7]}, hashset_test::TestSetMutateO{.k = 4, .v = [9, 4, 2, 7]}
(430,0,0), -1, 2, Map, hashset_test::TestSetMutateI{.k = 5, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 5, .v = [4, 2, 1, 3, 5]}
(430,0,0), 1, 2, Map, hashset_test::TestSetMutateI{.k = 5, .v = [4, 2, 1, 3, 5]}, hashset_test::TestSetMutateO{.k = 5, .v = [4, 2, 1, 3, 5]}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(442,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [([1, 2], 1), ([3, 4], 1), ([3, 4], 1)]}, ["1", "2"]), group_test::All1{.key = ["1", "2"], .all = true}
(442,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [([0, 1, 2], 1), ([0, 3, 4], 1), ([0, 3, 4], 1)]}, ["2", "3"]), group_test::All1{.key = ["2", "3"], .all = false}
(443,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [([1, 2], 1), ([3, 4], 1), ([3, 4], 1)]}, ["1", "2"]), group_test::Any1{.key = ["1", "2"], .all = true}
(443,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [([0, 1, 2], 1), ([0, 3, 4], 1), ([0, 3, 4], 1)]}, ["2", "3"]), group_test::Any1{.key = ["2", "3"], .all = true}
(437,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["1", "2"], 1), .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"], 1), group_test::ArgMax1{.key = (["1", "2"], 1), .val = ([3, 4], "one-2")}
(437,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["1", "2"], 2), .vals = [(([3, 4], "one-2"), 1)]}, ["1", "2"], 2), group_test::ArgMax1{.key = (["1", "2"], 2), .val = ([3, 4], "one-2")}
(437,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["2", "3"], 1), .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"], 1), group_test::ArgMax1{.key = (["2", "3"], 1), .val = ([0, 1, 2], "two-1")}
(437,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["2", "3"], 2), .vals = [(([0, 3, 4], "two-2"), 1)]}, ["2", "3"], 2), group_test::ArgMax1{.key = (["2", "3"], 2), .val = ([0, 3, 4], "two-2")}
(436,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["1", "2"], 1), .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"], 1), group_test::ArgMin1{.key = (["1", "2"], 1), .val = ([1, 2], "one-1")}
(436,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["1", "2"], 2), .vals = [(([3, 4], "one-2"), 1)]}, ["1", "2"], 2), group_test::ArgMin1{.key = (["1", "2"], 2), .val = ([3, 4], "one-2")}
(436,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["2", "3"], 1), .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"], 1), group_test::ArgMin1{.key = (["2", "3"], 1), .val = ([0, 1, 2], "two-1")}
(436,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = (["2", "3"], 2), .vals = [(([0, 3, 4], "two-2"), 1)]}, ["2", "3"], 2), group_test::ArgMin1{.key = (["2", "3"], 2), .val = ([0, 3, 4], "two-2")}
(444,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [((), 1), ((), 1), ((), 1), ((), 1)]}, 1), group_test::Count1{.x = 1, .count = 4}
(444,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [((), 1), ((), 1)]}, 2), group_test::Count1{.x = 2, .count = 2}
(440,2,0), 1, 1, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}
(441,2,0), 1, 1, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}
(438,2,0), 1, 1, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Find1{.val = group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}}
(435,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::FlatMap1{.key = ["1", "2"], .val = ["1", "2", "one-1", "3", "4", "one-2", "3", "4", "one-2"]}
(435,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::FlatMap1{.key = ["2", "3"], .val = ["0", "1", "2", "two-1", "0", "3", "4", "two-2", "0", "3", "4", "two-2"]}
(445,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([1, 2], 1), ([3, 4], 1), ([0, 1, 2], 1), ([0, 3, 4], 1)]}, 1), group_test::Fold1{.x = 1, .sum = 20}
(445,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([3, 4], 1), ([0, 3, 4], 1)]}, 2), group_test::Fold1{.x = 2, .sum = 14}
(433,2,0), 1, 1, Condition, ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, group_test::Group1{.g = ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}}
(433,2,0), 1, 1, Condition, ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, group_test::Group1{.g = ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}}
(431,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Map1{.key = ["1", "2"], .val = ["one-1: 1,2", "one-2: 3,4", "one-2: 3,4"]}
(431,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Map1{.key = ["2", "3"], .val = ["two-1: 0,1,2", "two-2: 0,3,4", "two-2: 0,3,4"]}
(432,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"])
(432,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"])
(446,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, 1), group_test::SumUp1{.x = 1, .sum = 4}
(446,2,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [(group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, 2), group_test::SumUp1{.x = 2, .sum = 3}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(440,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Filter1{.val = [group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, group_test::FilterMap1{.val = [2, 4, 4]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, group_test::FilterMap1{.val = [2, 4, 4]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, group_test::FilterMap1{.val = [2, 4, 4]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::FilterMap1{.val = [2, 4, 4]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, group_test::FilterMap1{.val = [2, 4, 4]}
(441,3,0), 1, 1, Join, ddlog_std::DDlogGroup{.key = (), .vals = [(group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, 1), (group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, 1), (group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1), (group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, 1), (group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, 1)]}, group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, group_test::FilterMap1{.val = [2, 4, 4]}
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Data{.x = 1, .y = ["1", "2"], .z = [1, 2], .q = "one-1"}, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"])
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Data{.x = 1, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"])
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Data{.x = 2, .y = ["1", "2"], .z = [3, 4], .q = "one-2"}, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"])
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 1, 2], .q = "two-1"}, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"])
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Data{.x = 1, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"])
(432,3,0), 1, 1, Join, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Data{.x = 2, .y = ["2", "3"], .z = [0, 3, 4], .q = "two-2"}, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"])
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Map1{.key = ["1", "2"], .val = ["one-1:: 1,2", "one-2:: 3,4", "one-2:: 3,4"]}
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Map1{.key = ["1", "2"], .val = ["one-1:: 1,2", "one-2:: 3,4", "one-2:: 3,4"]}
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}, ["1", "2"]), group_test::Map1{.key = ["1", "2"], .val = ["one-1:: 1,2", "one-2:: 3,4", "one-2:: 3,4"]}
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Map1{.key = ["2", "3"], .val = ["two-1:: 0,1,2", "two-2:: 0,3,4", "two-2:: 0,3,4"]}
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Map1{.key = ["2", "3"], .val = ["two-1:: 0,1,2", "two-2:: 0,3,4", "two-2:: 0,3,4"]}
(432,4,0), 1, 1, Condition, (ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}, ["2", "3"]), group_test::Map1{.key = ["2", "3"], .val = ["two-1:: 0,1,2", "two-2:: 0,3,4", "two-2:: 0,3,4"]}
(434,0,0), 1, 1, Map, group_test::Group1{.g = ddlog_std::DDlogGroup{.key = ["1", "2"], .vals = [(([1, 2], "one-1"), 1), (([3, 4], "one-2"), 1), (([3, 4], "one-2"), 1)]}}, group_test::Map1{.key = ["1", "2"], .val = ["one-1::: 1,2", "one-2::: 3,4", "one-2::: 3,4"]}
(434,0,0), 1, 1, Map, group_test::Group1{.g = ddlog_std::DDlogGroup{.key = ["2", "3"], .vals = [(([0, 1, 2], "two-1"), 1), (([0, 3, 4], "two-2"), 1), (([0, 3, 4], "two-2"), 1)]}}, group_test::Map1{.key = ["2", "3"], .val = ["two-1::: 0,1,2", "two-2::: 0,3,4", "two-2::: 0,3,4"]}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}
(315,0,0), 1, 0, Map, internment_test::StaticInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(306,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "barfoo", "foobar"], .text = "foobar", .match_found = true}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\w+", "\\d+", "\\pL+", "foo", "bar", "[", "foobar"], .text = "foobar", .match_found = false}
(307,0,0), 1, 0, Map, regex_test::RegexSetTestInput{.re = ["\\d+", "barfoo"], .text = "foobar"}, regex_test::RegexSetTestOutput{.re = ["\\d+", "barfoo"], .text = "foobar", .match_found = false}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\d+", .text = "a111b222c"}, regex_test::RegexTestOutput{.re = "\\d+", .text = "a111b222c", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "111"}, .all_matches = ["111", "222"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia."}, regex_test::RegexTestOutput{.re = "\\b\\w{13}\\b", .text = "I categorically deny having triskaidekaphobia.", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "categorically"}, .all_matches = ["categorically"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941)."}, regex_test::RegexTestOutput{.re = "'([^']+)'\\s+\\((\\d{4})\\)", .text = "Not my favorite movie: 'Citizen Kane' (1941).", .match_found = true, .match_found_checked = true, .first_match = ddlog_std::Some{.x = "'Citizen Kane' (1941)"}, .all_matches = ["'Citizen Kane' (1941)"]}
(302,0,0), 1, 0, Map, regex_test::RegexTestInput{.re = "[", .text = "foo"}, regex_test::RegexTestOutput{.re = "[", .text = "foo", .match_found = false, .match_found_checked = true, .first_match = ddlog_std::None{}, .all_matches = []}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 100}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}
(386,0,0), 1, 0, Map, vec_test::Increments{.i = 200}, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo", .ix = "static foo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo", .ix = "ifoo"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar", .ix = "ibar"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25", .ix = "ifoo25"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25!", .ix = "ifoo25!"}
(316,0,0), 1, 0, Map, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4", .ix = "ibar4"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}
(388,0,0), 1, 0, Map, vec_test::IntClosures{.f = "<closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar4 ibar4", .ix = "ibar4 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25! ibar4", .ix = "ifoo25! ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo25 ibar4", .ix = "ifoo25 ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ibar ibar4", .ix = "ibar ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "static foo ibar4", .ix = "static foo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::OInternedString{.x = "ifoo ibar4", .ix = "ifoo ibar4"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar4 ifoo25!", .ix = "ibar4 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25! ifoo25!", .ix = "ifoo25! ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo25 ifoo25!", .ix = "ifoo25 ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ibar ifoo25!", .ix = "ibar ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "static foo ifoo25!", .ix = "static foo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::OInternedString{.x = "ifoo ifoo25!", .ix = "ifoo ifoo25!"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar4 ifoo25", .ix = "ibar4 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25! ifoo25", .ix = "ifoo25! ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo25 ifoo25", .ix = "ifoo25 ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ibar ifoo25", .ix = "ibar ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "static foo ifoo25", .ix = "static foo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::OInternedString{.x = "ifoo ifoo25", .ix = "ifoo ifoo25"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar4 ibar", .ix = "ibar4 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25! ibar", .ix = "ifoo25! ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo25 ibar", .ix = "ifoo25 ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ibar ibar", .ix = "ibar ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "static foo ibar", .ix = "static foo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ibar"}, internment_test::OInternedString{.x = "ifoo ibar", .ix = "ifoo ibar"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar4 static foo", .ix = "ibar4 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25! static foo", .ix = "ifoo25! static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo25 static foo", .ix = "ifoo25 static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ibar static foo", .ix = "ibar static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "static foo static foo", .ix = "static foo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "static foo"}, internment_test::OInternedString{.x = "ifoo static foo", .ix = "ifoo static foo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar4"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar4 ifoo", .ix = "ibar4 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25!"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25! ifoo", .ix = "ifoo25! ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo25"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo25 ifoo", .ix = "ifoo25 ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ibar"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ibar ifoo", .ix = "ibar ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "static foo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "static foo ifoo", .ix = "static foo ifoo"}
(317,1,0), 1, 0, Join, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::AllInternedString{.ix = "ifoo"}, internment_test::OInternedString{.x = "ifoo ifoo", .ix = "ifoo ifoo"}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
(390,0,0), 1, 0, Map, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = true}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: signed<64>):signed<64>{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
(391,1,0), 1, 0, Join, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::IntVecClosures{.f = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>"}, vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
(22,2,0), 1, ddlog_std::DDNestedTS{0,1}, Condition, ("alphabet", [(0, "a"), (1, "b"), (2, "c"), (3, "d"), (4, "e")]), std_test::MapDelete{.descr = "alphabet\\4", .m = [(0, "a"), (1, "b"), (2, "c"), (3, "d")], .s = ddlog_std::Some{.x = "e"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,2}, Condition, ("alphabet\\4", [(0, "a"), (1, "b"), (2, "c"), (3, "d")]), std_test::MapDelete{.descr = "alphabet\\4\\3", .m = [(0, "a"), (1, "b"), (2, "c")], .s = ddlog_std::Some{.x = "d"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,3}, Condition, ("alphabet\\4\\3", [(0, "a"), (1, "b"), (2, "c")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2", .m = [(0, "a"), (1, "b")], .s = ddlog_std::Some{.x = "c"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,4}, Condition, ("alphabet\\4\\3\\2", [(0, "a"), (1, "b")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1", .m = [(0, "a")], .s = ddlog_std::Some{.x = "b"}}
(22,2,0), 1, ddlog_std::DDNestedTS{0,5}, Condition, ("alphabet\\4\\3\\2\\1", [(0, "a")]), std_test::MapDelete{.descr = "alphabet\\4\\3\\2\\1\\0", .m = [], .s = ddlog_std::Some{.x = "a"}}
(142,0,0), 1, 0, Map, Ris_true{._s = "true"}, Re{._x = 1, ._t = "10%3", ._y = 1}
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Alice", .parent = "Bob"}, ("Alice", "Bob")
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Ben", .parent = "Bob"}, ("Ben", "Bob")
(1,1,0), 1, 0, Join, Parent{.child = "Alice", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Alice")
(1,1,0), 1, 0, Join, Parent{.child = "Ben", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Ben")
(1,1,0), 1, 0, Join, Parent{.child = "Bob", .parent = "Bob"}, Parent{.child = "Bob", .parent = "Bob"}, ("Bob", "Bob")
(1,2,0), 1, 0, Condition, ("Alice", "Ben"), Sib{.s1 = "Ben", .s2 = "Alice"}
(1,2,0), 1, 0, Condition, ("Alice", "Bob"), Sib{.s1 = "Bob", .s2 = "Alice"}
(1,2,0), 1, 0, Condition, ("Ben", "Alice"), Sib{.s1 = "Alice", .s2 = "Ben"}
(1,2,0), 1, 0, Condition, ("Ben", "Bob"), Sib{.s1 = "Bob", .s2 = "Ben"}
(1,2,0), 1, 0, Condition, ("Bob", "Alice"), Sib{.s1 = "Alice", .s2 = "Bob"}
(1,2,0), 1, 0, Condition, ("Bob", "Ben"), Sib{.s1 = "Ben", .s2 = "Bob"}
(268,1,0), 1, 0, Join, R13{.t = (1, true, "", 1)}, R14{.t = (0, (true, ("", 1)))}, ((0, (true, ("", 1))), (1, true, "", 1))
(268,1,0), 1, 0, Join, R13{.t = (1, true, "", 1)}, R14{.t = (1, (true, ("", 1)))}, ((1, (true, ("", 1))), (1, true, "", 1))
(268,3,0), 1, 0, Condition, (1, true, "", 1), J{.b = true}
(268,3,0), 1, 0, Condition, (1, true, "", 1), J{.b = true}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "St.Germain", .s2 = "Odeon"}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}
(21,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Louvres", .s2 = "Palais Royal"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
(21,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Tuileries", .s2 = "Concorde"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Germain"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Odeon"}
(22,0,0), 1, 1, Map, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "St.Michel"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Chatelet"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Palais Royal", .s2 = "Louvres"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}
(22,0,0), 1, 1, Map, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Concorde", .s2 = "Tuileries"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "St.Michel", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Concorde", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Tuileries"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Germain"}, Reach{.s1 = "St.Germain", .s2 = "St.Germain"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Germain", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Louvres", .s2 = "Palais Royal"}, Reach{.s1 = "Palais Royal", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Odeon", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Concorde"}, Reach{.s1 = "Palais-Royal", .s2 = "Concorde"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,1}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Palais-Royal"}, Reach{.s1 = "Palais-Royal", .s2 = "Palais-Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "St.Germain"}, Answer{.x = "St.Germain"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "St.Michel"}, Answer{.x = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Chatelet"}, Reach{.s1 = "St.Michel", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Michel", .s2 = "Chatelet"}, Reach{.s1 = "Chatelet", .s2 = "Palais Royal"}, Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 1, .s1 = "Chatelet", .s2 = "Louvres"}, Reach{.s1 = "Louvres", .s2 = "Louvres"}, Reach{.s1 = "Chatelet", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Chatelet"}, Reach{.s1 = "St.Germain", .s2 = "Chatelet"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Odeon"}, Reach{.s1 = "St.Germain", .s2 = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Louvres"}, Reach{.s1 = "Odeon", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "St.Michel"}, Reach{.s1 = "Odeon", .s2 = "St.Michel"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,2}, Join, Links{.l = 1, .s1 = "Palais-Royal", .s2 = "Tuileries"}, Reach{.s1 = "Tuileries", .s2 = "Tuileries"}, Reach{.s1 = "Palais-Royal", .s2 = "Tuileries"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Chatelet"}, Answer{.x = "Chatelet"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Odeon"}, Answer{.x = "Odeon"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,3}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Louvres"}, Reach{.s1 = "St.Germain", .s2 = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,3}, Join, Links{.l = 4, .s1 = "Odeon", .s2 = "St.Michel"}, Reach{.s1 = "St.Michel", .s2 = "Palais Royal"}, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Louvres"}, Answer{.x = "Louvres"}
(23,1,0), 1, ddlog_std::DDNestedTS{1,4}, Join, Links{.l = 4, .s1 = "St.Germain", .s2 = "Odeon"}, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}, Reach{.s1 = "St.Germain", .s2 = "Palais Royal"}
(24,0,0), 1, 1, Map, Reach{.s1 = "Odeon", .s2 = "Palais Royal"}, Answer{.x = "Palais Royal"}
(58,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, R3{.f1 = 0, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, R3{.f1 = 1, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, R3{.f1 = 2, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, R3{.f1 = 3, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, R3{.f1 = 4, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, R3{.f1 = 5, .f2 = true}
(58,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, R3{.f1 = 6, .f2 = true}
(59,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, 0
(59,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, 1
(59,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, 2
(59,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, 3
(59,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, 4
(59,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, 5
(59,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, 6
(60,0,0), 1, 2, Map, R3{.f1 = 0, .f2 = true}, R6{.f = 0}
(60,0,0), 1, 2, Map, R3{.f1 = 1, .f2 = true}, R6{.f = 1}
(60,0,0), 1, 2, Map, R3{.f1 = 2, .f2 = true}, R6{.f = 2}
(60,0,0), 1, 2, Map, R3{.f1 = 3, .f2 = true}, R6{.f = 3}
(60,0,0), 1, 2, Map, R3{.f1 = 4, .f2 = true}, R6{.f = 4}
(60,0,0), 1, 2, Map, R3{.f1 = 5, .f2 = true}, R6{.f = 5}
(60,0,0), 1, 2, Map, R3{.f1 = 6, .f2 = true}, R6{.f = 6}
(66,1,0), 1, 3, Join, Table1{.id = 125, .name = "buzzzzzzzz"}, Table2{.name = "buzzzzzzzz", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 145200715403491832341915822591998648048, .name = "buzzzzzzzz", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 90687272392819007132700790854844487357, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 275637453779188164637819723427679302195, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 12, .f3 = S{.f1 = (true, false), .f2 = 43981}}, Table12{.id = 287269096593558965677480771304302291489, .name = "foo", .f3 = S{.f1 = (true, false), .f2 = 43981}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 88006542552931101431331088457448451944, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 302246819069250028908049720787417591078, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 1234567890, .f3 = S{.f1 = (true, true), .f2 = 5}}, Table12{.id = 216380363571705730598942393138808105858, .name = "foo", .f3 = S{.f1 = (true, true), .f2 = 5}}
(66,1,0), 1, 3, Join, Table1{.id = 0, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 163553563808451251702619476897759050220, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(66,1,0), 1, 3, Join, Table1{.id = 1, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 3280989158102350508363827193707975381, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(66,1,0), 1, 3, Join, Table1{.id = 46118400000, .name = "foo"}, Table2{.name = "foo", .f2 = 100000000000000, .f3 = S{.f1 = (false, true), .f2 = 10000}}, Table12{.id = 319900223054536652811205922354379277241, .name = "foo", .f3 = S{.f1 = (false, true), .f2 = 10000}}
(106,1,0), 1, 4, Join, Rel1{.x = 0, .y = IP4{.ip4 = 100}}, Rel2{.x = 0, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}, Rel3{.x = 0, .y = IP4{.ip4 = 100}, .z = Option1{.f1 = 0, .f2 = IP4{.ip4 = 300}, .f3 = (true, "foo")}}
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "2"}, ("a", "2")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "3"}, ("a", "3")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "a", .y = "a"}, ("a", "a")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "b", .y = "2"}, ("b", "2")
(113,1,0), 1, 5, Condition, AggregateMe1{.x = "b", .y = "3"}, ("b", "3")
(110,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate1{.x = "a", .cnt = 4}
(110,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate1{.x = "b", .cnt = 3}
(114,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate2{.x = "a", .set = ["1", "2", "3", "a"]}
(114,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate2{.x = "b", .set = ["1", "2", "3"]}
(115,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Aggregate3{.x = "a", .vec = ["1", "2", "3", "a"]}
(115,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Aggregate3{.x = "b", .vec = ["1", "2", "3"]}
(116,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(("a", "1"), 1), (("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1)]}, "a"), Aggregate4{.x = "a", .map = [("a", "a")]}
(116,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(("b", "1"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, "b"), Aggregate4{.x = "b", .map = [("b", "3")]}
(111,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [((), 1), ((), 1), ((), 1), ((), 1), ((), 1), ((), 1), ((), 1)]}, AggregateCnt{.cnt = 7}
(112,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(("a", "1"), 1), (("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1), (("b", "1"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, AggregateCnt2{.cnt = 7}
(113,3,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = (), .vals = [(("a", "2"), 1), (("a", "3"), 1), (("a", "a"), 1), (("b", "2"), 1), (("b", "3"), 1)]}, AggregateCnt3{.cnt = 5}
(108,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Counts1{.x = "a", .occurrences = 1}
(108,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Counts1{.x = "b", .occurrences = 0}
(117,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), (["1", "2", "3", "a"], "a")
(117,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), (["1", "2", "3"], "b")
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "1"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "2"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "3"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3", "a"], "a"), Disaggregate{.x = "a", .y = "a"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "1"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "2"}
(117,3,0), 1, 5, Flatmap, (["1", "2", "3"], "b"), Disaggregate{.x = "b", .y = "3"}
(109,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("1", 1), ("2", 1), ("3", 1), ("a", 1)]}, "a"), Symmetric1{.x = "a", .sym = true}
(109,2,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("1", 1), ("2", 1), ("3", 1)]}, "b"), Symmetric1{.x = "b", .sym = false}
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "1", .z = "z"}, AggregateMe1{.x = "a", .y = "1"}, ("a", "1", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "2", .z = "z"}, AggregateMe1{.x = "a", .y = "2"}, ("a", "2", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "a", .y = "3", .z = "z"}, AggregateMe1{.x = "a", .y = "3"}, ("a", "3", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "1", .z = "z"}, AggregateMe1{.x = "b", .y = "1"}, ("b", "1", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "2", .z = "z"}, AggregateMe1{.x = "b", .y = "2"}, ("b", "2", "z")
(119,1,0), 1, 5, Join, AggregateMe3{.x = "b", .y = "3", .z = "z"}, AggregateMe1{.x = "b", .y = "3"}, ("b", "3", "z")
(120,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = ("a", "z"), .vals = [("1", 1), ("2", 1), ("3", 1)]}, Concat{.s = "a-z:123"}
(120,2,0), 1, 5, Condition, ddlog_std::DDlogGroup{.key = ("b", "z"), .vals = [("1", 1), ("2", 1), ("3", 1)]}, Concat{.s = "b-z:123"}
(119,3,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(("1", "z"), 1), (("2", "z"), 1), (("3", "z"), 1)]}, "a"), AggregateByX{.x = "a", .cnt = 3}
(119,3,0), 1, 5, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(("1", "z"), 1), (("2", "z"), 1), (("3", "z"), 1)]}, "b"), AggregateByX{.x = "b", .cnt = 3}
(118,2,0), 1, 6, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(1, 1), (10, 1), (100, 1)]}, "a"), Sum{.x = "a", .sum = 111}
(118,2,0), 1, 6, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10, 1), (20, 1), (30, 1)]}, "b"), Sum{.x = "b", .sum = 60}
(121,0,0), 1, 7, Map, WithKey{.key = 0, .val = "foo"}, WithKeyDbg{.key = 0, .val = "foo"}
(121,0,0), 1, 7, Map, WithKey{.key = 1, .val = "bar"}, WithKeyDbg{.key = 1, .val = "bar"}
(121,0,0), 1, 7, Map, WithKey{.key = 2, .val = "buzz"}, WithKeyDbg{.key = 2, .val = "buzz"}
(121,0,0), -1, 8, Map, WithKey{.key = 0, .val = "foo"}, WithKeyDbg{.key = 0, .val = "foo"}
(121,0,0), -1, 9, Map, WithKey{.key = 1, .val = "bar"}, WithKeyDbg{.key = 1, .val = "bar"}
(121,0,0), 1, 10, Map, WithKey{.key = 1, .val = "bar2"}, WithKeyDbg{.key = 1, .val = "bar2"}
(121,0,0), 1, 10, Map, WithKey{.key = 3, .val = "xxx"}, WithKeyDbg{.key = 3, .val = "xxx"}
(121,0,0), 1, 10, Map, WithKey{.key = 4, .val = "hello"}, WithKeyDbg{.key = 4, .val = "hello"}
(121,0,0), -1, 10, Map, WithKey{.key = 2, .val = "buzz"}, WithKeyDbg{.key = 2, .val = "buzz"}
(121,0,0), -1, 10, Map, WithKey{.key = 3, .val = "xxx"}, WithKeyDbg{.key = 3, .val = "xxx"}
(121,0,0), -1, 11, Map, WithKey{.key = 1, .val = "bar2"}, WithKeyDbg{.key = 1, .val = "bar2"}
(121,0,0), 1, 11, Map, WithKey{.key = 1, .val = "bar3"}, WithKeyDbg{.key = 1, .val = "bar3"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Arnold Squitieri"}, Innocent{.name = "Arnold Squitieri"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Bill Smith"}, Innocent{.name = "Bill Smith"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "Frank Morelli"}, Innocent{.name = "Frank Morelli"}
(122,1,0), 1, 12, Antijoin, Suspect{.name = "John Doe"}, Innocent{.name = "John Doe"}
(122,1,0), -1, 12, Antijoin, Suspect{.name = "Arnold Squitieri"}, Innocent{.name = "Arnold Squitieri"}
(122,1,0), -1, 12, Antijoin, Suspect{.name = "Frank Morelli"}, Innocent{.name = "Frank Morelli"}
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4})
(123,1,0), 1, 13, Condition, Address{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5})
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 101}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 102}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 103}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 104}}
(123,2,0), 1, 13, Antijoin, (10, 10, IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}), ValidDestination{.addr = IPAddr{.b3 = 10, .b2 = 10, .b1 = 10, .b0 = 105}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}
(123,2,0), 1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 1}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 2}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 3}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 4}}
(123,2,0), -1, 13, Antijoin, (192, 168, IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}), ValidDestination{.addr = IPAddr{.b3 = 192, .b2 = 168, .b1 = 0, .b0 = 5}}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.101"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.102"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.101", "10.10.10.102", "10.10.10.103"]}, HostAddress{.host = 0, .addr = "10.10.10.103"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.103"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.104"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 0, .addrs = ["10.10.10.103", "10.10.10.104", "10.10.10.105"]}, HostAddress{.host = 0, .addr = "10.10.10.105"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.1"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.2"}
(124,1,0), 1, 14, Flatmap, HostAddresses{.host = 1, .addrs = ["192.168.0.1", "192.168.0.2", "192.168.0.3"]}, HostAddress{.host = 1, .addr = "192.168.0.3"}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("a", "1")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("b", "2")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("a", "1"), ("b", "2"), ("c", "3")]}, ExternalId{.host = 0, .id = ("c", "3")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("c", "4")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("d", "5")}
(125,1,0), 1, 15, Flatmap, ExternalIds{.host = 0, .ids = [("c", "4"), ("d", "5"), ("e", "6")]}, ExternalId{.host = 0, .id = ("e", "6")}
(128,2,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(30, 1), (31, 1), (50, 1)]}, "a"), Allocated{.name = "a", .xs = [30, 31, 50]}
(128,2,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10000, 1), (100, 1), (16777215, 1)]}, "b"), Allocated{.name = "b", .xs = [100, 10000, 16777215]}
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "4"}, ("a", "4")
(127,1,0), 1, 16, Antijoin, Request{.name = "a", .id = "5"}, ("a", "5")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "4"}, ("b", "4")
(127,1,0), 1, 16, Antijoin, Request{.name = "b", .id = "5"}, ("b", "5")
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "1"}, Realized{.name = "a", .id = "1", .x = 30}, Allocation{.name = "a", .id = "1", .x = 30}
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "2"}, Realized{.name = "a", .id = "2", .x = 31}, Allocation{.name = "a", .id = "2", .x = 31}
(126,1,0), 1, 16, Join, Request{.name = "a", .id = "3"}, Realized{.name = "a", .id = "3", .x = 50}, Allocation{.name = "a", .id = "3", .x = 50}
(126,1,0), 1, 16, Join, Request{.name = "b", .id = "1"}, Realized{.name = "b", .id = "1", .x = 10000}, Allocation{.name = "b", .id = "1", .x = 10000}
(126,1,0), 1, 16, Join, Request{.name = "b", .id = "3"}, Realized{.name = "b", .id = "3", .x = 16777215}, Allocation{.name = "b", .id = "3", .x = 16777215}
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), -1, 16, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), -1, 16, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), -1, 16, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,3,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("4", 1), ("5", 1)]}, "a"), ToAllocate{.name = "a", .ids = ["4", "5"]}
(127,3,0), 1, 16, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("4", 1), ("5", 1)]}, "b"), ToAllocate{.name = "b", .ids = ["4", "5"]}
(129,1,0), 1, 16, Join, ToAllocate{.name = "a", .ids = ["4", "5"]}, Allocated{.name = "a", .xs = [30, 31, 50]}, ([30, 31, 50], "a", ["4", "5"])
(129,1,0), 1, 16, Join, ToAllocate{.name = "b", .ids = ["4", "5"]}, Allocated{.name = "b", .xs = [100, 10000, 16777215]}, ([100, 10000, 16777215], "b", ["4", "5"])
(129,2,0), 1, 16, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("4", 51), "a")
(129,2,0), 1, 16, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("5", 52), "a")
(129,2,0), 1, 16, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("4", 1), "b")
(129,2,0), 1, 16, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("5", 2), "b")
(129,3,0), 1, 16, Condition, (("4", 51), "a"), Allocation{.name = "a", .id = "4", .x = 51}
(129,3,0), 1, 16, Condition, (("5", 52), "a"), Allocation{.name = "a", .id = "5", .x = 52}
(129,3,0), 1, 16, Condition, (("4", 1), "b"), Allocation{.name = "b", .id = "4", .x = 1}
(129,3,0), 1, 16, Condition, (("5", 2), "b"), Allocation{.name = "b", .id = "5", .x = 2}
(128,2,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [(30, 1), (31, 1), (50, 1)]}, "a"), Allocated{.name = "a", .xs = [30, 31, 50]}
(128,2,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [(10000, 1), (100, 1), (16777215, 1)]}, "b"), Allocated{.name = "b", .xs = [100, 10000, 16777215]}
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "4"}, ("a", "4")
(127,1,0), -1, 17, Antijoin, Request{.name = "a", .id = "5"}, ("a", "5")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "4"}, ("b", "4")
(127,1,0), -1, 17, Antijoin, Request{.name = "b", .id = "5"}, ("b", "5")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "1"}, ("a", "1")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "2"}, ("a", "2")
(127,1,0), 1, 17, Antijoin, Request{.name = "a", .id = "3"}, ("a", "3")
(127,1,0), 1, 17, Antijoin, Request{.name = "b", .id = "1"}, ("b", "1")
(127,1,0), 1, 17, Antijoin, Request{.name = "b", .id = "3"}, ("b", "3")
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "1"}, Realized{.name = "a", .id = "1", .x = 30}, Allocation{.name = "a", .id = "1", .x = 30}
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "2"}, Realized{.name = "a", .id = "2", .x = 31}, Allocation{.name = "a", .id = "2", .x = 31}
(126,1,0), -1, 17, Join, Request{.name = "a", .id = "3"}, Realized{.name = "a", .id = "3", .x = 50}, Allocation{.name = "a", .id = "3", .x = 50}
(126,1,0), -1, 17, Join, Request{.name = "b", .id = "1"}, Realized{.name = "b", .id = "1", .x = 10000}, Allocation{.name = "b", .id = "1", .x = 10000}
(126,1,0), -1, 17, Join, Request{.name = "b", .id = "3"}, Realized{.name = "b", .id = "3", .x = 16777215}, Allocation{.name = "b", .id = "3", .x = 16777215}
(127,3,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "a", .vals = [("4", 1), ("5", 1)]}, "a"), ToAllocate{.name = "a", .ids = ["4", "5"]}
(127,3,0), -1, 17, Condition, (ddlog_std::DDlogGroup{.key = "b", .vals = [("4", 1), ("5", 1)]}, "b"), ToAllocate{.name = "b", .ids = ["4", "5"]}
(129,1,0), -1, 17, Join, ToAllocate{.name = "a", .ids = ["4", "5"]}, Allocated{.name = "a", .xs = [30, 31, 50]}, ([30, 31, 50], "a", ["4", "5"])
(129,1,0), -1, 17, Join, ToAllocate{.name = "b", .ids = ["4", "5"]}, Allocated{.name = "b", .xs = [100, 10000, 16777215]}, ([100, 10000, 16777215], "b", ["4", "5"])
(129,2,0), -1, 17, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("4", 51), "a")
(129,2,0), -1, 17, Flatmap, ([30, 31, 50], "a", ["4", "5"]), (("5", 52), "a")
(129,2,0), -1, 17, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("4", 1), "b")
(129,2,0), -1, 17, Flatmap, ([100, 10000, 16777215], "b", ["4", "5"]), (("5", 2), "b")
(129,3,0), -1, 17, Condition, (("4", 51), "a"), Allocation{.name = "a", .id = "4", .x = 51}
(129,3,0), -1, 17, Condition, (("5", 52), "a"), Allocation{.name = "a", .id = "5", .x = 52}
(129,3,0), -1, 17, Condition, (("4", 1), "b"), Allocation{.name = "b", .id = "4", .x = 1}
(129,3,0), -1, 17, Condition, (("5", 2), "b"), Allocation{.name = "b", .id = "5", .x = 2}
(130,0,0), 1, 18, Map, Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(132,0,0), 1, 18, Map, Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}, Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(131,0,0), 1, 18, Map, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(134,1,0), 1, 18, Condition, Referee{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered3{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}
(133,0,0), 1, 18, Map, Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}, Filtered2{.r = Referee2{.r = Referenced{.x = true, .y = ddlog_std::Some{.x = "hello"}}}}
(137,1,0), 1, 19, Condition, Alloc{.id = 1, .allocated = [], .toallocate = [], .min_val = 0, .max_val = 0}, Adjusted{.id = 1, .alloc = []}
(137,1,0), 1, 19, Condition, Alloc{.id = 2, .allocated = [], .toallocate = ["a"], .min_val = 0, .max_val = 0}, Adjusted{.id = 2, .alloc = [("a", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 3, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 0}, Adjusted{.id = 3, .alloc = [("a", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 4, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 1}, Adjusted{.id = 4, .alloc = [("a", 0), ("b", 1)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 5, .allocated = [], .toallocate = ["a", "b"], .min_val = 1000, .max_val = 1001}, Adjusted{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 5, .allocated = [], .toallocate = ["a", "b"], .min_val = 4294967294, .max_val = 4294967295}, Adjusted{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 6, .allocated = [], .toallocate = ["a", "b"], .min_val = 4294967292, .max_val = 4294967295}, Adjusted{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 7, .allocated = [], .toallocate = ["a", "b"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 7, .alloc = [("a", 0), ("b", 1)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 8, .allocated = [], .toallocate = ["a", "b", "c", "d", "e", "f"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 9, .allocated = [("x", 0), ("y", 1000), ("z", 10000)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 9, .alloc = [("x", 0), ("b", 10001), ("c", 10002), ("d", 10003), ("e", 10004), ("z", 10000)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 10, .allocated = [("x", 0), ("y", 4294967295), ("z", 10000)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 4294967295}, Adjusted{.id = 10, .alloc = [("x", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("z", 10000)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 11, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z"], .min_val = 0, .max_val = 10}, Adjusted{.id = 11, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 12, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q"], .min_val = 0, .max_val = 10}, Adjusted{.id = 12, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 13, .allocated = [("x", 1), ("y", 3), ("z", 5)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 10}, Adjusted{.id = 13, .alloc = [("x", 1), ("b", 6), ("c", 7), ("d", 8), ("e", 9), ("z", 5), ("p", 10), ("q", 0), ("r", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 14, .allocated = [("x", 4294967287), ("y", 4294967289), ("z", 4294967295)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967286, .max_val = 4294967295}, Adjusted{.id = 14, .alloc = [("x", 4294967287), ("b", 4294967286), ("c", 4294967288), ("d", 4294967290), ("e", 4294967291), ("z", 4294967295), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 15, .allocated = [("x", 16777207), ("y", 16777209), ("z", 16777215)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967286, .max_val = 4294967295}, Adjusted{.id = 15, .alloc = [("x", 16777207), ("b", 4294967286), ("c", 4294967287), ("d", 4294967288), ("e", 4294967289), ("z", 16777215), ("p", 4294967290), ("q", 4294967291), ("r", 4294967292)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 16, .allocated = [("x", 11), ("y", 13), ("z", 20)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 10, .max_val = 20}, Adjusted{.id = 16, .alloc = [("x", 11), ("b", 10), ("c", 12), ("d", 14), ("e", 15), ("z", 20), ("p", 16), ("q", 17), ("r", 18)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 17, .allocated = [("x", 10), ("y", 11), ("z", 12)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 10, .max_val = 12}, Adjusted{.id = 17, .alloc = [("x", 10), ("z", 12)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 18, .allocated = [("x", 4294967293), ("y", 4294967294), ("z", 4294967295)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 4294967293, .max_val = 4294967295}, Adjusted{.id = 18, .alloc = [("x", 4294967293), ("z", 4294967295)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 19, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 2}, Adjusted{.id = 19, .alloc = [("x", 0), ("z", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 20, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 0, .max_val = 0}, Adjusted{.id = 20, .alloc = [("x", 0), ("z", 2)]}
(137,1,0), 1, 19, Condition, Alloc{.id = 21, .allocated = [("x", 0), ("y", 1), ("z", 2)], .toallocate = ["x", "b", "c", "d", "e", "z", "p", "q", "r"], .min_val = 1, .max_val = 1}, Adjusted{.id = 21, .alloc = [("x", 0), ("z", 2)]}
(135,2,0), 1, 19, Condition, ([], 1, [], 0, 0), NewAllocation{.id = 1, .alloc = []}
(135,2,0), 1, 19, Condition, ([], 2, ["a"], 0, 0), NewAllocation{.id = 2, .alloc = [("a", 0)]}
(135,2,0), 1, 19, Condition, ([], 3, ["a", "b"], 0, 0), NewAllocation{.id = 3, .alloc = [("a", 0)]}
(135,2,0), 1, 19, Condition, ([], 4, ["a", "b"], 0, 1), NewAllocation{.id = 4, .alloc = [("a", 0), ("b", 1)]}
(135,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 1000, 1001), NewAllocation{.id = 5, .alloc = [("a", 1000), ("b", 1001)]}
(135,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 4294967294, 4294967295), NewAllocation{.id = 5, .alloc = [("a", 4294967294), ("b", 4294967295)]}
(135,2,0), 1, 19, Condition, ([], 6, ["a", "b"], 4294967292, 4294967295), NewAllocation{.id = 6, .alloc = [("a", 4294967292), ("b", 4294967293)]}
(135,2,0), 1, 19, Condition, ([], 7, ["a", "b"], 0, 4294967295), NewAllocation{.id = 7, .alloc = [("a", 0), ("b", 1)]}
(135,2,0), 1, 19, Condition, ([], 8, ["a", "b", "c", "d", "e", "f"], 0, 4294967295), NewAllocation{.id = 8, .alloc = [("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5)]}
(135,2,0), 1, 19, Condition, ([0, 1000, 10000], 9, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocation{.id = 9, .alloc = [("x", 10001), ("b", 10002), ("c", 10003), ("d", 10004), ("e", 10005), ("z", 10006)]}
(135,2,0), 1, 19, Condition, ([0, 10000, 4294967295], 10, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocation{.id = 10, .alloc = [("x", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("z", 6)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 11, ["x", "b", "c", "d", "e", "z"], 0, 10), NewAllocation{.id = 11, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 12, ["x", "b", "c", "d", "e", "z", "p", "q"], 0, 10), NewAllocation{.id = 12, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
(135,2,0), 1, 19, Condition, ([1, 3, 5], 13, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 10), NewAllocation{.id = 13, .alloc = [("x", 6), ("b", 7), ("c", 8), ("d", 9), ("e", 10), ("z", 0), ("p", 2), ("q", 4)]}
(135,2,0), 1, 19, Condition, ([4294967287, 4294967289, 4294967295], 14, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocation{.id = 14, .alloc = [("x", 4294967286), ("b", 4294967288), ("c", 4294967290), ("d", 4294967291), ("e", 4294967292), ("z", 4294967293), ("p", 4294967294)]}
(135,2,0), 1, 19, Condition, ([16777207, 16777209, 16777215], 15, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocation{.id = 15, .alloc = [("x", 4294967286), ("b", 4294967287), ("c", 4294967288), ("d", 4294967289), ("e", 4294967290), ("z", 4294967291), ("p", 4294967292), ("q", 4294967293), ("r", 4294967294)]}
(135,2,0), 1, 19, Condition, ([11, 13, 20], 16, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 20), NewAllocation{.id = 16, .alloc = [("x", 10), ("b", 12), ("c", 14), ("d", 15), ("e", 16), ("z", 17), ("p", 18), ("q", 19)]}
(135,2,0), 1, 19, Condition, ([10, 11, 12], 17, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 12), NewAllocation{.id = 17, .alloc = []}
(135,2,0), 1, 19, Condition, ([4294967293, 4294967294, 4294967295], 18, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967293, 4294967295), NewAllocation{.id = 18, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 19, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 2), NewAllocation{.id = 19, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 20, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 0), NewAllocation{.id = 20, .alloc = []}
(135,2,0), 1, 19, Condition, ([0, 1, 2], 21, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 1, 1), NewAllocation{.id = 21, .alloc = []}
(136,2,0), 1, 19, Condition, ([], 1, [], 0, 0), NewAllocationOpt{.id = 1, .alloc = []}
(136,2,0), 1, 19, Condition, ([], 2, ["a"], 0, 0), NewAllocationOpt{.id = 2, .alloc = [("a", ddlog_std::Some{.x = 0})]}
(136,2,0), 1, 19, Condition, ([], 3, ["a", "b"], 0, 0), NewAllocationOpt{.id = 3, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([], 4, ["a", "b"], 0, 1), NewAllocationOpt{.id = 4, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1})]}
(136,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 1000, 1001), NewAllocationOpt{.id = 5, .alloc = [("a", ddlog_std::Some{.x = 1000}), ("b", ddlog_std::Some{.x = 1001})]}
(136,2,0), 1, 19, Condition, ([], 5, ["a", "b"], 4294967294, 4294967295), NewAllocationOpt{.id = 5, .alloc = [("a", ddlog_std::Some{.x = 4294967294}), ("b", ddlog_std::Some{.x = 4294967295})]}
(136,2,0), 1, 19, Condition, ([], 6, ["a", "b"], 4294967292, 4294967295), NewAllocationOpt{.id = 6, .alloc = [("a", ddlog_std::Some{.x = 4294967292}), ("b", ddlog_std::Some{.x = 4294967293})]}
(136,2,0), 1, 19, Condition, ([], 7, ["a", "b"], 0, 4294967295), NewAllocationOpt{.id = 7, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1})]}
(136,2,0), 1, 19, Condition, ([], 8, ["a", "b", "c", "d", "e", "f"], 0, 4294967295), NewAllocationOpt{.id = 8, .alloc = [("a", ddlog_std::Some{.x = 0}), ("b", ddlog_std::Some{.x = 1}), ("c", ddlog_std::Some{.x = 2}), ("d", ddlog_std::Some{.x = 3}), ("e", ddlog_std::Some{.x = 4}), ("f", ddlog_std::Some{.x = 5})]}
(136,2,0), 1, 19, Condition, ([0, 1000, 10000], 9, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocationOpt{.id = 9, .alloc = [("x", ddlog_std::Some{.x = 10001}), ("b", ddlog_std::Some{.x = 10002}), ("c", ddlog_std::Some{.x = 10003}), ("d", ddlog_std::Some{.x = 10004}), ("e", ddlog_std::Some{.x = 10005}), ("z", ddlog_std::Some{.x = 10006})]}
(136,2,0), 1, 19, Condition, ([0, 10000, 4294967295], 10, ["x", "b", "c", "d", "e", "z"], 0, 4294967295), NewAllocationOpt{.id = 10, .alloc = [("x", ddlog_std::Some{.x = 1}), ("b", ddlog_std::Some{.x = 2}), ("c", ddlog_std::Some{.x = 3}), ("d", ddlog_std::Some{.x = 4}), ("e", ddlog_std::Some{.x = 5}), ("z", ddlog_std::Some{.x = 6})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 11, ["x", "b", "c", "d", "e", "z"], 0, 10), NewAllocationOpt{.id = 11, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 12, ["x", "b", "c", "d", "e", "z", "p", "q"], 0, 10), NewAllocationOpt{.id = 12, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0}), ("p", ddlog_std::Some{.x = 2}), ("q", ddlog_std::Some{.x = 4})]}
(136,2,0), 1, 19, Condition, ([1, 3, 5], 13, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 10), NewAllocationOpt{.id = 13, .alloc = [("x", ddlog_std::Some{.x = 6}), ("b", ddlog_std::Some{.x = 7}), ("c", ddlog_std::Some{.x = 8}), ("d", ddlog_std::Some{.x = 9}), ("e", ddlog_std::Some{.x = 10}), ("z", ddlog_std::Some{.x = 0}), ("p", ddlog_std::Some{.x = 2}), ("q", ddlog_std::Some{.x = 4}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([4294967287, 4294967289, 4294967295], 14, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocationOpt{.id = 14, .alloc = [("x", ddlog_std::Some{.x = 4294967286}), ("b", ddlog_std::Some{.x = 4294967288}), ("c", ddlog_std::Some{.x = 4294967290}), ("d", ddlog_std::Some{.x = 4294967291}), ("e", ddlog_std::Some{.x = 4294967292}), ("z", ddlog_std::Some{.x = 4294967293}), ("p", ddlog_std::Some{.x = 4294967294}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([16777207, 16777209, 16777215], 15, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967286, 4294967295), NewAllocationOpt{.id = 15, .alloc = [("x", ddlog_std::Some{.x = 4294967286}), ("b", ddlog_std::Some{.x = 4294967287}), ("c", ddlog_std::Some{.x = 4294967288}), ("d", ddlog_std::Some{.x = 4294967289}), ("e", ddlog_std::Some{.x = 4294967290}), ("z", ddlog_std::Some{.x = 4294967291}), ("p", ddlog_std::Some{.x = 4294967292}), ("q", ddlog_std::Some{.x = 4294967293}), ("r", ddlog_std::Some{.x = 4294967294})]}
(136,2,0), 1, 19, Condition, ([11, 13, 20], 16, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 20), NewAllocationOpt{.id = 16, .alloc = [("x", ddlog_std::Some{.x = 10}), ("b", ddlog_std::Some{.x = 12}), ("c", ddlog_std::Some{.x = 14}), ("d", ddlog_std::Some{.x = 15}), ("e", ddlog_std::Some{.x = 16}), ("z", ddlog_std::Some{.x = 17}), ("p", ddlog_std::Some{.x = 18}), ("q", ddlog_std::Some{.x = 19}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([10, 11, 12], 17, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 10, 12), NewAllocationOpt{.id = 17, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([4294967293, 4294967294, 4294967295], 18, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 4294967293, 4294967295), NewAllocationOpt{.id = 18, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 19, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 2), NewAllocationOpt{.id = 19, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 20, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 0, 0), NewAllocationOpt{.id = 20, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(136,2,0), 1, 19, Condition, ([0, 1, 2], 21, ["x", "b", "c", "d", "e", "z", "p", "q", "r"], 1, 1), NewAllocationOpt{.id = 21, .alloc = [("x", ddlog_std::None{}), ("b", ddlog_std::None{}), ("c", ddlog_std::None{}), ("d", ddlog_std::None{}), ("e", ddlog_std::None{}), ("z", ddlog_std::None{}), ("p", ddlog_std::None{}), ("q", ddlog_std::None{}), ("r", ddlog_std::None{})]}
(138,1,0), 1, 20, Join, XY{.x = 1, .y = 10}, YZX{.y = 10, .z = 100, .x = 1}, YX{.y = 10, .x = 1}
(138,1,0), 1, 20, Join, XY{.x = 2, .y = 20}, YZX{.y = 20, .z = 200, .x = 2}, YX{.y = 20, .x = 2}
(138,1,0), 1, 20, Join, XY{.x = 3, .y = 30}, YZX{.y = 30, .z = 300, .x = 3}, YX{.y = 30, .x = 3}
(138,1,0), 1, 20, Join, XY{.x = 4, .y = 40}, YZX{.y = 40, .z = 400, .x = 4}, YX{.y = 40, .x = 4}
(139,1,0), 1, 22, Join, IString1{.s = "Hello, "}, String2{.s = "bar"}, IConcatString{.s = "Hello, bar"}
(139,1,0), 1, 22, Join, IString1{.s = "Foo "}, String2{.s = "bar"}, IConcatString{.s = "Foo bar"}
(139,1,0), 1, 22, Join, IString1{.s = "Hello, "}, String2{.s = "world"}, IConcatString{.s = "Hello, world"}
(139,1,0), 1, 22, Join, IString1{.s = "Foo "}, String2{.s = "world"}, IConcatString{.s = "Foo world"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Hello, bar"}, ConcatString{.s = "Hello, bar"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Foo bar"}, ConcatString{.s = "Foo bar"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Hello, world"}, ConcatString{.s = "Hello, world"}
(140,0,0), 1, 22, Map, IConcatString{.s = "Foo world"}, ConcatString{.s = "Foo world"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "foo"}, AMethod{.a1 = "foo", .a2 = "bar"}, CMethod{.c1 = "bar", .c2 = "foo"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "foo"}, AMethod{.a1 = "foo", .a2 = "buzz"}, CMethod{.c1 = "buzz", .c2 = "foo"}
(143,1,0), 1, 23, Join, BMethod{.b1 = "c", .b2 = "world"}, AMethod{.a1 = "world", .a2 = "hello"}, CMethod{.c1 = "hello", .c2 = "world"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "foo", .a2 = "bar"}, BMethod{.b1 = "c", .b2 = "foo"}, DMethod{.c1 = "bar", .c2 = "foo"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "foo", .a2 = "buzz"}, BMethod{.b1 = "c", .b2 = "foo"}, DMethod{.c1 = "buzz", .c2 = "foo"}
(144,1,0), 1, 23, Join, AMethod{.a1 = "world", .a2 = "hello"}, BMethod{.b1 = "c", .b2 = "world"}, DMethod{.c1 = "hello", .c2 = "world"}
(145,0,0), 1, 24, Map, Numbers{.x = 0}, Power3{.y = 0}
(145,0,0), 1, 24, Map, Numbers{.x = 1}, Power3{.y = 1}
(145,0,0), 1, 24, Map, Numbers{.x = 2}, Power3{.y = 8}
(145,0,0), 1, 24, Map, Numbers{.x = 3}, Power3{.y = 27}
(145,0,0), 1, 24, Map, Numbers{.x = 4}, Power3{.y = 64}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "phone: 111-222-3333", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-3333", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333"}, RegexMatch{.regex = "[0-9]{3}-[0-9]{3}-[0-9]{4}", .text = "111-222-333", .m = false}
(146,0,0), 1, 25, Map, Regex{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01"}, RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-01-01", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101"}, RegexMatch{.regex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$", .text = "2014-0101", .m = false}
(146,0,0), 1, 25, Map, Regex{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb"}, RegexMatch{.regex = "(?i)a+(?-i)b+", .text = "AaAaAbbBBBb", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "a+b+", .text = "aaaaabbbbbb"}, RegexMatch{.regex = "a+b+", .text = "aaaaabbbbbb", .m = true}
(146,0,0), 1, 25, Map, Regex{.regex = "a+b+", .text = "AaAaAbbBBBb"}, RegexMatch{.regex = "a+b+", .text = "AaAaAbbBBBb", .m = false}
(263,1,0), 1, 26, Join, DdlogNode{.id = 9}, DdlogBinding{.tn = 0, .entity = 9}, (0, 9)
(263,1,0), 1, 26, Join, DdlogNode{.id = 10}, DdlogBinding{.tn = 1, .entity = 10}, (1, 10)
(263,1,0), 1, 26, Join, DdlogNode{.id = 11}, DdlogBinding{.tn = 2, .entity = 11}, (2, 11)
(263,1,0), 1, 26, Join, DdlogNode{.id = 12}, DdlogBinding{.tn = 3, .entity = 12}, (3, 12)
(263,1,0), 1, 26, Join, DdlogNode{.id = 13}, DdlogBinding{.tn = 4, .entity = 13}, (4, 13)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 0}, DdlogDependency{.parent = 1, .child = 0}, (1, 0)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 0}, DdlogDependency{.parent = 9, .child = 0}, (9, 0)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 0, .child = 1}, (0, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 2, .child = 1}, (2, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 11, .child = 1}, (11, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 2}, DdlogDependency{.parent = 1, .child = 2}, (1, 2)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 2}, DdlogDependency{.parent = 3, .child = 2}, (3, 2)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 3}, DdlogDependency{.parent = 2, .child = 3}, (2, 3)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 3}, DdlogDependency{.parent = 4, .child = 3}, (4, 3)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 4}, DdlogDependency{.parent = 3, .child = 4}, (3, 4)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 4}, DdlogDependency{.parent = 10, .child = 4}, (10, 4)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 3, .child = 5}, (3, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 6, .child = 5}, (6, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 5}, DdlogDependency{.parent = 12, .child = 5}, (12, 5)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 5, .child = 6}, (5, 6)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 7, .child = 6}, (7, 6)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 6, .child = 7}, (6, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 8, .child = 7}, (8, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 7}, DdlogDependency{.parent = 13, .child = 7}, (13, 7)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 8}, DdlogDependency{.parent = 0, .child = 8}, (0, 8)
(264,1,0), 1, ddlog_std::DDNestedTS{26,0}, Join, DdlogNode{.id = 8}, DdlogDependency{.parent = 7, .child = 8}, (7, 8)
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 9, .vals = [(0, 1)]}, 9), Span{.entity = 9, .tns = [0]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 10, .vals = [(1, 1)]}, 10), Span{.entity = 10, .tns = [1]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 11, .vals = [(2, 1)]}, 11), Span{.entity = 11, .tns = [2]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 12, .vals = [(3, 1)]}, 12), Span{.entity = 12, .tns = [3]}
(263,3,0), 1, 26, Condition, (ddlog_std::DDlogGroup{.key = 13, .vals = [(4, 1)]}, 13), Span{.entity = 13, .tns = [4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (9, 0), Span{.entity = 9, .tns = [0]}, ([0], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (10, 4), Span{.entity = 10, .tns = [1]}, ([1], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (11, 1), Span{.entity = 11, .tns = [2]}, ([2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (12, 5), Span{.entity = 12, .tns = [3]}, ([3], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,1}, Join, (13, 7), Span{.entity = 13, .tns = [4]}, ([4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1)]}, 0), Span{.entity = 0, .tns = [0]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([2], 1)]}, 1), Span{.entity = 1, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([3], 1)]}, 5), Span{.entity = 5, .tns = [3]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,1}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([4], 1)]}, 7), Span{.entity = 7, .tns = [4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (0, 1), Span{.entity = 0, .tns = [0]}, ([0], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (0, 8), Span{.entity = 0, .tns = [0]}, ([0], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (1, 0), Span{.entity = 1, .tns = [2]}, ([2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (1, 2), Span{.entity = 1, .tns = [2]}, ([2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (4, 3), Span{.entity = 4, .tns = [1]}, ([1], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (5, 6), Span{.entity = 5, .tns = [3]}, ([3], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (7, 6), Span{.entity = 7, .tns = [4]}, ([4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,2}, Join, (7, 8), Span{.entity = 7, .tns = [4]}, ([4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1)]}, 0), Span{.entity = 0, .tns = [0]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([2], 1)]}, 1), Span{.entity = 1, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([2], 1)]}, 2), Span{.entity = 2, .tns = [2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1)]}, 3), Span{.entity = 3, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,2}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (0, 1), Span{.entity = 0, .tns = [0]}, ([0], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (0, 8), Span{.entity = 0, .tns = [0]}, ([0], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (1, 0), Span{.entity = 1, .tns = [2]}, ([2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{26,3}, Join, (1, 2), Span{.entity = 1, .tns = [2]}, ([2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (2, 1), Span{.entity = 2, .tns = [2]}, ([2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (2, 3), Span{.entity = 2, .tns = [2]}, ([2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 2), Span{.entity = 3, .tns = [1]}, ([1], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 4), Span{.entity = 3, .tns = [1]}, ([1], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (3, 5), Span{.entity = 3, .tns = [1]}, ([1], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,3}, Join, (8, 7), Span{.entity = 8, .tns = [0, 4]}, ([0, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([2], 1)]}, 2), Span{.entity = 2, .tns = [2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1)]}, 3), Span{.entity = 3, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1), ([2], 1)]}, 3), Span{.entity = 3, .tns = [1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 2)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([3], 1)]}, 5), Span{.entity = 5, .tns = [3]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([4], 1)]}, 7), Span{.entity = 7, .tns = [4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,3}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (2, 1), Span{.entity = 2, .tns = [2]}, ([2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (2, 3), Span{.entity = 2, .tns = [2]}, ([2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 2), Span{.entity = 3, .tns = [1]}, ([1], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 4), Span{.entity = 3, .tns = [1]}, ([1], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (3, 5), Span{.entity = 3, .tns = [1]}, ([1], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 2), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 4), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (3, 5), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (5, 6), Span{.entity = 5, .tns = [3]}, ([3], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (7, 6), Span{.entity = 7, .tns = [4]}, ([4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (7, 8), Span{.entity = 7, .tns = [4]}, ([4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,4}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 4]}, ([0, 2, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,4}, Join, (8, 7), Span{.entity = 8, .tns = [0, 4]}, ([0, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([1], 1), ([2], 1)]}, 3), Span{.entity = 3, .tns = [1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 2)]}, 4), Span{.entity = 4, .tns = [1]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1), ([1, 2], 1)]}, 4), Span{.entity = 4, .tns = [1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 2), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 4), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (3, 5), Span{.entity = 3, .tns = [1, 2]}, ([1, 2], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (4, 3), Span{.entity = 4, .tns = [1]}, ([1], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (4, 3), Span{.entity = 4, .tns = [1, 2]}, ([1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,5}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,5}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 4]}, ([0, 2, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([1], 1), ([1, 2], 1)]}, 4), Span{.entity = 4, .tns = [1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (4, 3), Span{.entity = 4, .tns = [1, 2]}, ([1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (7, 6), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{26,6}, Join, (7, 8), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{26,6}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 2), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{26,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{26,7}, Join, (8, 7), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{26,7}, Join, (8, 7), Span{.entity = 8, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,4,0), -1, ddlog_std::DDNestedTS{26,7}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{26,7}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 2), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,1,0), 1, ddlog_std::DDNestedTS{27,0}, Join, DdlogNode{.id = 1}, DdlogDependency{.parent = 6, .child = 1}, (6, 1)
(264,1,0), 1, ddlog_std::DDNestedTS{27,0}, Join, DdlogNode{.id = 6}, DdlogDependency{.parent = 1, .child = 6}, (1, 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,2}, Join, (1, 6), Span{.entity = 1, .tns = [2]}, ([2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (1, 6), Span{.entity = 1, .tns = [2]}, ([2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,4,0), 1, ddlog_std::DDNestedTS{27,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,2}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 5), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,3}, Join, (6, 7), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,3}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2), ([2, 3, 4], 1)]}, 1), Span{.entity = 1, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,3}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 1), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 5), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (6, 7), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 1), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 5), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (6, 7), Span{.entity = 6, .tns = [2, 3, 4]}, ([2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,4}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2)]}, 1), Span{.entity = 1, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 2], 1), ([2], 2), ([2, 3, 4], 1)]}, 1), Span{.entity = 1, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 2), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2], 1), ([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([3], 1), ([4], 1)]}, 6), Span{.entity = 6, .tns = [3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 3, 4], 1), ([0, 2, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,4}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2]}, ([0, 1, 2], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 0)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2]}, ([0, 2], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 0), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 0)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 2), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (1, 6), Span{.entity = 1, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (2, 1), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (2, 3), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), -2, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (5, 6), Span{.entity = 5, .tns = [1, 3, 4]}, ([1, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 1), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 5), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (6, 7), Span{.entity = 6, .tns = [3, 4]}, ([3, 4], 7)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (7, 6), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,5}, Join, (7, 8), Span{.entity = 7, .tns = [0, 3, 4]}, ([0, 3, 4], 8)
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 1, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2], 1)]}, 0), Span{.entity = 0, .tns = [0, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 0, .vals = [([0], 1), ([0, 2, 3, 4], 1)]}, 0), Span{.entity = 0, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 2, 3, 4], 1), ([1, 2], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([1, 2], 1), ([3], 1), ([3, 4], 1)]}, 5), Span{.entity = 5, .tns = [1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 2), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 3, 4], 1), ([1, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 3, 4], 1), ([0, 2, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 2, 4], 1), ([3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 2, 3, 4]}
(264,4,0), -2, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,5}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2]}, ([0, 1, 2], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 8)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2]}, ([0, 2], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 1), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (0, 8), Span{.entity = 0, .tns = [0, 2, 3, 4]}, ([0, 2, 3, 4], 8)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 2)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 4)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2]}, ([0, 1, 2], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 2), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 2)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 4), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 4)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (3, 5), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (5, 6), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 6)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (5, 6), Span{.entity = 5, .tns = [1, 2, 3, 4]}, ([1, 2, 3, 4], 6)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 1)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 5)
(264,2,0), -1, ddlog_std::DDNestedTS{27,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 7)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 1), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 1)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 5), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 5)
(264,2,0), 1, ddlog_std::DDNestedTS{27,6}, Join, (6, 7), Span{.entity = 6, .tns = [0, 1, 3, 4]}, ([0, 1, 3, 4], 7)
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 1), ([0, 2], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2], 2), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 1, .vals = [([0, 1, 2, 3, 4], 3), ([2], 1)]}, 1), Span{.entity = 1, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 2, .vals = [([0, 1, 2, 3, 4], 2)]}, 2), Span{.entity = 2, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 1), ([1, 2], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 4, .vals = [([0, 1, 2, 3, 4], 1), ([1], 1)]}, 4), Span{.entity = 4, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -2, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2], 1), ([0, 1, 3, 4], 1), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 5, .vals = [([0, 1, 2, 3, 4], 2), ([3], 1)]}, 5), Span{.entity = 5, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 2), ([0, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 1, 2, 3, 4], 3)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 6, .vals = [([0, 2, 3, 4], 1), ([1, 2, 3, 4], 1)]}, 6), Span{.entity = 6, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 2, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 7, .vals = [([0, 1, 3, 4], 1), ([0, 2, 3, 4], 1), ([4], 1)]}, 7), Span{.entity = 7, .tns = [0, 1, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 1, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2], 1), ([0, 2, 3, 4], 1)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,4,0), -1, ddlog_std::DDNestedTS{27,6}, Condition, (ddlog_std::DDlogGroup{.key = 8, .vals = [([0, 2, 3, 4], 2)]}, 8), Span{.entity = 8, .tns = [0, 2, 3, 4]}
(264,2,0), -1, ddlog_std::DDNestedTS{27,7}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2]}, ([0, 1, 2], 3)
(264,2,0), 1, ddlog_std::DDNestedTS{27,7}, Join, (4, 3), Span{.entity = 4, .tns = [0, 1, 2, 3, 4]}, ([0, 1, 2, 3, 4], 3)
(264,4,0), -1, ddlog_std::DDNestedTS{27,7}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2], 1), ([0, 1, 2, 3, 4], 1)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(264,4,0), 1, ddlog_std::DDNestedTS{27,7}, Condition, (ddlog_std::DDlogGroup{.key = 3, .vals = [([0, 1, 2, 3, 4], 2)]}, 3), Span{.entity = 3, .tns = [0, 1, 2, 3, 4]}
(269,1,0), 1, 28, Join, Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
(269,2,0), 1, 28, Join, (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), Long{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}, LongJoin{.x0 = 0, .x1 = 1, .x2 = 2, .x3 = 3, .x4 = 4, .x5 = 5, .x6 = 6, .x7 = 7, .x8 = 8, .x9 = 9, .x10 = 10, .x11 = 11, .x12 = 12, .x13 = 13, .x14 = 14, .x15 = 15, .x16 = 16, .x17 = 17, .x18 = 18, .x19 = 19}
