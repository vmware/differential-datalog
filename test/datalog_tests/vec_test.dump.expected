vec_test::IntVecTransforms{.description = "(0,5]", .v = [1, 2, 3, 4, 5]}
vec_test::IntVecTransforms{.description = "+100", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
vec_test::IntVecTransforms{.description = ">3", .v = [4, 5, 6, 7, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .v = [100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]}
vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .v = [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]}
vec_test::IntVecTransforms{.description = "closure <closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .v = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210]}
vec_test::IntVecTransforms{.description = "evens", .v = [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]}
vec_test::IntVecTransforms{.description = "filter_map(if (x < 0){None} else {Some{x+1000}})", .v = [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010]}
vec_test::IntVecTransforms{.description = "flatmap(|x| [x, x + delta1, x + delta2])", .v = [-10, -1010, -2010, -9, -1009, -2009, -8, -1008, -2008, -7, -1007, -2007, -6, -1006, -2006, -5, -1005, -2005, -4, -1004, -2004, -3, -1003, -2003, -2, -1002, -2002, -1, -1001, -2001, 0, -1000, -2000, 1, -999, -1999, 2, -998, -1998, 3, -997, -1997, 4, -996, -1996, 5, -995, -1995, 6, -994, -1994, 7, -993, -1993, 8, -992, -1992, 9, -991, -1991, 10, -990, -1990]}
vec_test::IntVecTransforms{.description = "max_by(to_string)", .v = [9]}
vec_test::IntVecTransforms{.description = "min_by(x*x)", .v = [0]}
vec_test::IntVecTransforms{.description = "not in [-5, 0, 100] uaing 'all'", .v = [-10, -9, -8, -7, -6, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "not in [-5, 0, 100] using 'any'", .v = [-10, -9, -8, -7, -6, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "not in [-5, 0, 7]", .v = [-10, -9, -8, -7, -6, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "odds", .v = [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]}
vec_test::IntVecTransforms{.description = "sort_by(-x)", .v = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]}
vec_test::IntVecTransforms{.description = "sort_by(identity)", .v = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
vec_test::IntVecTransforms{.description = "sort_by(to_string)", .v = [-1, -10, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9]}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = true}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .equal = true}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .equal = true}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map((vec::map(v, ddlog_std::ref_new)), ddlog_std::deref))}), captured_args: ()>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x * x)}), captured_args: ()>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 100>>", .equal = false}
vec_test::CompareClosures{.c1 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .c2 = "<closure: (function(v: ddlog_std::Vec<ddlog_std::s64>):ddlog_std::Vec<ddlog_std::s64>{(vec::map(v, f))}), captured_args: <closure: (function(x: ddlog_std::s64):ddlog_std::s64{(x + inc)}), captured_args: 200>>", .equal = true}
vec_test::VecFolds{.description = "1+2+3+4+5", .a = 15}
