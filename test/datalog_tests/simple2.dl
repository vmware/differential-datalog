import fp
import log

/* Test `arrangeInput` logic in Compile.hs */

typedef TArrng1 = TArrng1{
    f1: bool,
    f2: bigint
}

typedef TArrng2 = TArrng2{
    f1: bool,
    f2: Ref<Ref<TArrng1>>
}

input relation Arrng1(
    f1: Ref<Ref<Ref<TArrng2>>>,
    f2: bigint
)

input relation Arrng2(
    f1: Ref<TArrng2>,
    f2: bigint,
    f3: bool
)

output relation Arrng1Arrng2(x: bigint)

Arrng1Arrng2(x.f2.f2) :-
    Arrng1(f1, f2),
    Arrng2(x, f1.f2.f2, _).

output relation Arrng1Arrng2_2(x: bigint)

Arrng1Arrng2_2(x.f2.f2) :-
    Arrng1(f1, f2),
    Arrng2(x, f1.f2.f2, f1.f2.f1).

input relation TArrng1[(Ref<Ref<Ref<TArrng2>>>, bigint)]

input relation TArrng2[(Ref<TArrng2>, bigint)]

output relation TArrng1Arrng2(x: bigint)

TArrng1Arrng2(x.f2.f2) :-
    TArrng1[t],
    TArrng2[(x, t.0.f2.f2)].


function ftoi_(l: double): signed<32> = {
    match (int_from_d(l)) {
        None -> 0,
        Some{x} -> {
            x as signed<32>
        }
    }
}

relation RFtoIDummy(x: signed<32>)
RFtoIDummy(0).
output relation RFloatToInt(_x:signed<32>)
RFloatToInt(_x) :- RFtoIDummy(0), var _x = ftoi_((- (64'f333.36: double))).

/* See #596 */
input relation Ints(x: bigint)
output relation SomeInts(x: Option<bigint>)

SomeInts(y) :-
    Ints(x),
    var y = Some{x},
    SomeInts(y).

/* See #592 */
function agg_avg_double_N(aggregate: Option<(double, double)>, item: Option<double>):
    Option<(double, double)> =
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{(x, 1)},
        (Some{x}, None)    -> Some{x},
        (Some{(sum,ct)}, Some{y}) -> Some{(sum + y, ct + 1)}
    }


/* See #603. New function syntax avoids ambiguity. */
output relation &FuncTest(x: string)
function myfunc(x: string): string { x }
&FuncTest("foo").

output relation SumsOfDoubles(x: double, y: double, sum: double)
input relation Doubles(xs: Vec<double>)

SumsOfDoubles(x, y, z) :-
    Doubles(xs),
    var x = FlatMap(xs),
    Doubles(ys),
    var y = FlatMap(ys),
    var z = x + y.

/* Attempt to confuse statics */

function weird_zero(x: 'A): usize {
    var empty_vec: Vec<'A> = vec_empty();
    vec_len(empty_vec)
}

function zero_test(): usize {
    weird_zero(32'd0)
}
