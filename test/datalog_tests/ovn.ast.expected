typedef ACL = ACL{id: uuid, name: std.Option<string>, logical_switch: uuid, priority: bigint, direction: string, _match: string, action: string, log: bool, severity: std.Option<string>}
typedef ACL_external_ids = ACL_external_ids{acl: uuid, key: string, value: string}
typedef Address_Set = Address_Set{id: uuid, name: string}
typedef Address_Set_addresses = Address_Set_addresses{address_set: uuid, address: string}
typedef Address_Set_external_ids = Address_Set_external_ids{address_set: uuid, key: string, value: string}
typedef Connection = Connection{id: uuid, target: string, is_connected: bool, max_backoff: std.Option<bigint>, inactivity_probe: std.Option<bigint>}
typedef Connection_external_ids = Connection_external_ids{connection: uuid, value: string}
typedef Connection_other_config = Connection_other_config{connection: uuid, other_config: string}
typedef Connection_status = Connection_status{connection: uuid, key: string, value: string}
typedef DHCP_Options = DHCP_Options{id: uuid, cidr: string}
typedef DHCP_Options_external_ids = DHCP_Options_external_ids{dhcp_options: uuid, key: string, value: string}
typedef DHCP_Options_netmask = DHCP_Options_netmask{dhcp_options: uuid, netmask: string}
typedef DHCP_Options_option_args = DHCP_Options_option_args{dhcp_options: uuid, option: string}
typedef DHCP_Options_options = DHCP_Options_options{dhcp_options: uuid, key: string, value: string}
typedef DHCP_Options_server_ip = DHCP_Options_server_ip{dhcp_options: uuid, server_ip: string}
typedef DHCP_Options_server_mac = DHCP_Options_server_mac{dhcp_options: uuid, server_mac: mac_addr_t}
typedef DHCP_Options_stateful = DHCP_Options_stateful{dhcp_options: uuid, stateful: bool}
typedef DNS = DNS{id: uuid, logical_switch: uuid}
typedef DNS_external_ids = DNS_external_ids{dns: uuid, key: string, value: string}
typedef DNS_records = DNS_records{dns: uuid, key: string, value: string}
typedef Gateway_Chassis = Gateway_Chassis{id: uuid, logical_router: uuid, name: string, chassis_name: string, priority: bigint}
typedef Gateway_Chassis_external_ids = Gateway_Chassis_external_ids{gateway_chassis: uuid, key: string, value: string}
typedef Gateway_Chassis_options = Gateway_Chassis_options{gateway_chassis: uuid, key: string, value: string}
typedef Load_Balancer = Load_Balancer{id: uuid, logical_switch: uuid, protocol: std.Option<string>, name: string}
typedef Load_Balancer_external_ids = Load_Balancer_external_ids{load_balancer: uuid, key: string, value: string}
typedef Load_Balancer_ip_addresses = Load_Balancer_ip_addresses{load_balancer: uuid, ip_address: string}
typedef Load_Balancer_vips = Load_Balancer_vips{load_balancer: uuid, key: string, value: string}
typedef Logical_Router = Logical_Router{id: uuid, enabled: std.Option<bool>, name: string}
typedef Logical_Router_Port = Logical_Router_Port{id: uuid, logical_router: uuid, name: string, mac: string, peer: std.Option<string>, enabled: std.Option<bool>}
typedef Logical_Router_Port_external_ids = Logical_Router_Port_external_ids{logical_router_port: uuid, key: string, value: string}
typedef Logical_Router_Port_ipv6_ra_configs = Logical_Router_Port_ipv6_ra_configs{logical_router_port: uuid, key: string, value: string}
typedef Logical_Router_Port_networks = Logical_Router_Port_networks{logical_router_port: uuid, network: string}
typedef Logical_Router_Port_options = Logical_Router_Port_options{logical_router_port: uuid, key: string, value: string}
typedef Logical_Router_Static_Route = Logical_Router_Static_Route{id: uuid, logical_router: uuid, ip_prefix: string, policy: std.Option<string>, nexthop: string, output_port: std.Option<string>}
typedef Logical_Router_Static_Route_external_ids = Logical_Router_Static_Route_external_ids{logical_router_static_route: uuid, key: string, value: string}
typedef Logical_Router_external_ids = Logical_Router_external_ids{logical_router: uuid, key: string, value: string}
typedef Logical_Router_options = Logical_Router_options{logical_router: uuid, key: string, value: string}
typedef Logical_Switch = Logical_Switch{id: uuid, name: string, _type: string}
typedef Logical_Switch_Port = Logical_Switch_Port{id: uuid, logical_switch: uuid, parent: std.Option<string>, tag_request: std.Option<bigint>, tag: std.Option<bigint>, up: std.Option<bool>, enabled: std.Option<bool>, dhcpv4_options: std.Option<uuid>, dhcpv6_options: std.Option<uuid>, name: string, _type: string}
typedef Logical_Switch_Port_addresses = Logical_Switch_Port_addresses{logical_switch_port: uuid, address: string}
typedef Logical_Switch_Port_dynamic_addresses = Logical_Switch_Port_dynamic_addresses{logical_switch_port: uuid, dynamic_address: string}
typedef Logical_Switch_Port_external_ids = Logical_Switch_Port_external_ids{logical_switch_port: uuid, key: string, value: string}
typedef Logical_Switch_Port_ips = Logical_Switch_Port_ips{logical_switch_port: uuid, mac: mac_addr_t, ip: ip_addr_t}
typedef Logical_Switch_Port_macs = Logical_Switch_Port_macs{logical_switch_port: uuid, mac: mac_addr_t}
typedef Logical_Switch_Port_options = Logical_Switch_Port_options{logical_switch_port: uuid, key: string, value: string}
typedef Logical_Switch_Port_port_security = Logical_Switch_Port_port_security{logical_switch_port: uuid, port_security: string}
typedef Logical_Switch_Port_ps_ips = Logical_Switch_Port_ps_ips{logical_switch_port: uuid, mac: mac_addr_t, ip: ip_subnet_t}
typedef Logical_Switch_Port_ps_macs = Logical_Switch_Port_ps_macs{logical_switch_port: uuid, mac: mac_addr_t}
typedef Logical_Switch_external_ids = Logical_Switch_external_ids{logical_switch: uuid, key: string, value: string}
typedef Logical_Switch_has_stateful_acl_action = Logical_Switch_has_stateful_acl_action{logical_switch: uuid}
typedef Logical_Switch_other_config = Logical_Switch_other_config{logical_switch: uuid, key: string, value: string}
typedef NAT = NAT{id: uuid, logical_router: uuid, external_ip: string, external_mac: std.Option<string>, logical_ip: string, logical_port: std.Option<string>, _type: std.Option<string>}
typedef NAT_external_ids = NAT_external_ids{nat: uuid, key: string, value: string}
typedef NB_Global = NB_Global{nb_cfg: bigint, sb_cfg: bigint, hv_cfg: bigint}
typedef NB_Global_external_ids = NB_Global_external_ids{key: string, value: string}
typedef QoS = QoS{id: uuid, logical_switch: uuid, priority: bigint, direction: string, _match: string}
typedef QoS_action = QoS_action{qos: uuid, key: string, value: bigint}
typedef QoS_bandwidth = QoS_bandwidth{qos: uuid, key: string, value: bigint}
typedef QoS_external_ids = QoS_external_ids{qos: uuid, key: string, value: string}
typedef SSL = SSL{id: uuid, private_key: string, certificate: string, bootstrap_ca_cert: bool, ssl_protocols: string, ssl_ciphers: string}
typedef SSL_external_ids = SSL_external_ids{ssl: uuid, key: string, value: string}
typedef ip4_addr_t = bit<32>
typedef ip4_subnet_t = IP4Subnet{addr: ip4_addr_t, mask: ip4_addr_t}
typedef ip6_addr_t = bit<128>
typedef ip6_subnet_t = IP6Subnet{addr: ip6_addr_t, mask: ip6_addr_t}
typedef ip_addr_t = IPAddr4{addr4: ip4_addr_t} | IPAddr6{addr6: ip6_addr_t}
typedef ip_port_t = IPPort{ip: string, port: std.Option<port_t>}
typedef ip_subnet_t = IPSubnet4{ip4_subnet: ip4_subnet_t} | IPSubnet6{ip6_subnet: ip6_subnet_t}
typedef log.log_level_t = signed<32>
typedef log.module_t = signed<32>
typedef mac_addr_t = bit<48>
typedef port_t = bit<16>
typedef std.Either<'A,'B> = std.Left{l: 'A} | std.Right{r: 'B}
extern type std.Group<'K,'V>
extern type std.Map<'K,'V>
#[rust = "serde(from=\"Option<A>\", into=\"Option<A>\", bound(serialize=\"A: Clone+Serialize\"))"]
typedef std.Option<'A> = std.None{} | std.Some{x: 'A}
#[size = 8]
extern type std.Ref<'A>
typedef std.Result<'V,'E> = std.Ok{res: 'V} | std.Err{err: 'E}
extern type std.Set<'A>
extern type std.Vec<'A>
typedef std.s128 = signed<128>
typedef std.s16 = signed<16>
typedef std.s32 = signed<32>
typedef std.s64 = signed<64>
typedef std.s8 = signed<8>
typedef std.u128 = bit<128>
typedef std.u16 = bit<16>
typedef std.u32 = bit<32>
typedef std.u64 = bit<64>
typedef std.u8 = bit<8>
typedef uuid = bit<128>
extern function build_dhcp_netmask (cidr: string): string
extern function eth_addr_from_string (str: string): std.Option<mac_addr_t>
extern function extract_ips (str: string): std.Set<ip_addr_t>
extern function extract_mac (str: string): (mac_addr_t, string)
extern function extract_subnets (str: string): std.Set<ip_subnet_t>
extern function in6_generate_lla (mac: mac_addr_t): ip6_addr_t
extern function ip_address_and_port_from_lb_key (key: string): ip_port_t
extern function ip_parse (str: string): std.Option<ip_addr_t>
extern function ipv6_string_mapped (addr: ip6_addr_t): string
extern function log.log (module: log.module_t, level: log.log_level_t, msg: string): bool
extern function std.__builtin_2string (x: 'X): string
extern function std.deref (x: std.Ref<'A>): 'A
extern function std.group2map (g: std.Group<'K1,('K2, 'V)>): std.Map<'K2,'V>
extern function std.group2set (g: std.Group<'K,'V>): std.Set<'V>
extern function std.group2setmap (g: std.Group<'K1,('K2, 'V)>): std.Map<'K2,std.Set<'V>>
extern function std.group2vec (g: std.Group<'K,'V>): std.Vec<'V>
extern function std.group_count (g: std.Group<'K,'V>): bit<64>
extern function std.group_first (g: std.Group<'K,'V>): 'V
extern function std.group_key (g: std.Group<'K,'V>): 'K
extern function std.group_max (g: std.Group<'K,'V>): 'V
extern function std.group_min (g: std.Group<'K,'V>): 'V
extern function std.group_nth (g: std.Group<'K,'V>, n: bit<64>): std.Option<'V>
extern function std.group_set_unions (g: std.Group<'K,std.Set<'A>>): std.Set<'A>
extern function std.group_setref_unions (g: std.Group<'K,std.Ref<std.Set<'A>>>): std.Ref<std.Set<'A>>
extern function std.group_sum (g: std.Group<'K,'V>): 'V
function std.group_unzip (g: std.Group<'K,('X, 'Y)>): (std.Vec<'X>, std.Vec<'Y>) =
    ((var xs: std.Vec<'X>) = std.vec_empty();
     ((var ys: std.Vec<'Y>) = std.vec_empty();
      (for (v in g) {
           ((var x, var y) = v;
            (std.vec_push(xs, x);
             std.vec_push(ys, y)))
       };
       (xs, ys))))
extern function std.hash128 (x: 'X): bit<128>
extern function std.hash64 (x: 'X): bit<64>
extern function std.hex (x: 'X): string
extern function std.htonl (x: bit<32>): bit<32>
extern function std.htons (x: bit<16>): bit<16>
function std.is_err (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> false,
        std.Err{.err=_} -> true
    }
function std.is_none (x: std.Option<'A>): bool =
    match (x) {
        std.None{} -> true,
        _ -> false
    }
function std.is_ok (res: std.Result<'V,'E>): bool =
    match (res) {
        std.Ok{.res=_} -> true,
        std.Err{.err=_} -> false
    }
function std.is_some (x: std.Option<'A>): bool =
    match (x) {
        std.Some{.x=_} -> true,
        _ -> false
    }
extern function std.map_contains_key (m: std.Map<'K,'V>, k: 'K): bool
extern function std.map_empty (): std.Map<'K,'V>
extern function std.map_get (m: std.Map<'K,'V>, k: 'K): std.Option<'V>
extern function std.map_insert (m: mut std.Map<'K,'V>, k: 'K, v: 'V): ()
extern function std.map_insert_imm (m: std.Map<'K,'V>, k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_is_empty (m: std.Map<'K,'V>): bool
extern function std.map_remove (m: mut std.Map<'K,'V>, k: 'K): ()
extern function std.map_singleton (k: 'K, v: 'V): std.Map<'K,'V>
extern function std.map_union (m1: std.Map<'K,'V>, m2: std.Map<'K,'V>): std.Map<'K,'V>
function std.max (x: 'A, y: 'A): 'A =
    if (x > y) {
        x
    } else {
          y
      }
function std.min (x: 'A, y: 'A): 'A =
    if (x < y) {
        x
    } else {
          y
      }
extern function std.ntohl (x: bit<32>): bit<32>
extern function std.ntohs (x: bit<16>): bit<16>
function std.option2set (o: std.Option<'X>): std.Set<'X> =
    match (o) {
        std.Some{.x=var x} -> std.set_singleton(x),
        std.None{} -> std.set_empty()
    }
function std.option2vec (o: std.Option<'X>): std.Vec<'X> =
    match (o) {
        std.Some{.x=var x} -> std.vec_singleton(x),
        std.None{} -> std.vec_empty()
    }
function std.option_unwrap_or (x: std.Option<'A>, def: 'A): 'A =
    match (x) {
        std.Some{.x=var v} -> v,
        std.None{} -> def
    }
extern function std.option_unwrap_or_default (opt: std.Option<'A>): 'A
extern function std.parse_dec_i64 (s: string): std.Option<signed<64>>
extern function std.parse_dec_u64 (s: string): std.Option<bit<64>>
extern function std.pow32 (base: 'A, exp: bit<32>): 'A
extern function std.range (from: 'A, to: 'A, step: 'A): std.Vec<'A>
extern function std.ref_new (x: 'A): std.Ref<'A>
function std.result_unwrap_or (res: std.Result<'V,'E>, def: 'V): 'V =
    match (res) {
        std.Ok{.res=var v} -> v,
        std.Err{.err=_} -> def
    }
extern function std.result_unwrap_or_default (res: std.Result<'V,'E>): 'V
extern function std.set2vec (s: std.Set<'A>): std.Vec<'A>
extern function std.set_contains (s: std.Set<'X>, v: 'X): bool
extern function std.set_empty (): std.Set<'X>
extern function std.set_insert (s: mut std.Set<'X>, v: 'X): ()
extern function std.set_insert_imm (s: std.Set<'X>, v: 'X): std.Set<'X>
extern function std.set_intersection (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_is_empty (s: std.Set<'X>): bool
extern function std.set_nth (s: std.Set<'X>, n: bit<64>): std.Option<'X>
extern function std.set_singleton (x: 'X): std.Set<'X>
extern function std.set_size (s: std.Set<'X>): bit<64>
extern function std.set_union (s1: std.Set<'X>, s2: std.Set<'X>): std.Set<'X>
extern function std.set_unions (sets: std.Vec<std.Set<'X>>): std.Set<'X>
extern function std.str_to_lower (s: string): string
extern function std.string_contains (s1: string, s2: string): bool
extern function std.string_ends_with (s: string, suffix: string): bool
extern function std.string_join (strings: std.Vec<string>, sep: string): string
extern function std.string_len (s: string): bit<64>
extern function std.string_replace (s: string, from: string, to: string): string
extern function std.string_reverse (s: string): string
extern function std.string_split (s: string, sep: string): std.Vec<string>
extern function std.string_starts_with (s: string, prefix: string): bool
extern function std.string_substr (s: string, start: bit<64>, end: bit<64>): string
extern function std.string_to_bytes (s: string): std.Vec<std.u8>
extern function std.string_to_lowercase (s: string): string
extern function std.string_to_uppercase (s: string): string
extern function std.string_trim (s: string): string
extern function std.vec2set (s: std.Vec<'A>): std.Set<'A>
extern function std.vec_append (v: mut std.Vec<'X>, other: std.Vec<'X>): ()
extern function std.vec_contains (v: std.Vec<'X>, x: 'X): bool
extern function std.vec_empty (): std.Vec<'A>
extern function std.vec_is_empty (v: std.Vec<'X>): bool
extern function std.vec_len (v: std.Vec<'X>): bit<64>
extern function std.vec_nth (v: std.Vec<'X>, n: bit<64>): std.Option<'X>
extern function std.vec_push (v: mut std.Vec<'X>, x: 'X): ()
extern function std.vec_push_imm (v: std.Vec<'X>, x: 'X): std.Vec<'X>
extern function std.vec_singleton (x: 'X): std.Vec<'X>
extern function std.vec_with_capacity (len: bit<64>): std.Vec<'A>
extern function std.vec_with_length (len: bit<64>, x: 'A): std.Vec<'A>
input relation ACL [ACL]
input relation ACL_external_ids [ACL_external_ids]
input relation Address_Set [Address_Set]
input relation Address_Set_addresses [Address_Set_addresses]
input relation Address_Set_external_ids [Address_Set_external_ids]
input relation Connection [Connection]
input relation Connection_external_ids [Connection_external_ids]
input relation Connection_other_config [Connection_other_config]
input relation Connection_status [Connection_status]
input relation DHCP_Options [DHCP_Options]
input relation DHCP_Options_external_ids [DHCP_Options_external_ids]
relation DHCP_Options_netmask [DHCP_Options_netmask]
relation DHCP_Options_option_args [DHCP_Options_option_args]
input relation DHCP_Options_options [DHCP_Options_options]
relation DHCP_Options_server_ip [DHCP_Options_server_ip]
relation DHCP_Options_server_mac [DHCP_Options_server_mac]
relation DHCP_Options_stateful [DHCP_Options_stateful]
input relation DNS [DNS]
input relation DNS_external_ids [DNS_external_ids]
input relation DNS_records [DNS_records]
input relation Gateway_Chassis [Gateway_Chassis]
input relation Gateway_Chassis_external_ids [Gateway_Chassis_external_ids]
input relation Gateway_Chassis_options [Gateway_Chassis_options]
input relation Load_Balancer [Load_Balancer]
input relation Load_Balancer_external_ids [Load_Balancer_external_ids]
relation Load_Balancer_ip_addresses [Load_Balancer_ip_addresses]
input relation Load_Balancer_vips [Load_Balancer_vips]
input relation Logical_Router [Logical_Router]
input relation Logical_Router_Port [Logical_Router_Port]
input relation Logical_Router_Port_external_ids [Logical_Router_Port_external_ids]
input relation Logical_Router_Port_ipv6_ra_configs [Logical_Router_Port_ipv6_ra_configs]
input relation Logical_Router_Port_networks [Logical_Router_Port_networks]
input relation Logical_Router_Port_options [Logical_Router_Port_options]
input relation Logical_Router_Static_Route [Logical_Router_Static_Route]
input relation Logical_Router_Static_Route_external_ids [Logical_Router_Static_Route_external_ids]
input relation Logical_Router_external_ids [Logical_Router_external_ids]
input relation Logical_Router_options [Logical_Router_options]
input relation Logical_Switch [Logical_Switch]
input relation Logical_Switch_Port [Logical_Switch_Port]
input relation Logical_Switch_Port_addresses [Logical_Switch_Port_addresses]
input relation Logical_Switch_Port_dynamic_addresses [Logical_Switch_Port_dynamic_addresses]
input relation Logical_Switch_Port_external_ids [Logical_Switch_Port_external_ids]
relation Logical_Switch_Port_ips [Logical_Switch_Port_ips]
relation Logical_Switch_Port_macs [Logical_Switch_Port_macs]
input relation Logical_Switch_Port_options [Logical_Switch_Port_options]
input relation Logical_Switch_Port_port_security [Logical_Switch_Port_port_security]
relation Logical_Switch_Port_ps_ips [Logical_Switch_Port_ps_ips]
relation Logical_Switch_Port_ps_macs [Logical_Switch_Port_ps_macs]
input relation Logical_Switch_external_ids [Logical_Switch_external_ids]
relation Logical_Switch_has_stateful_acl_action [Logical_Switch_has_stateful_acl_action]
input relation Logical_Switch_other_config [Logical_Switch_other_config]
input relation NAT [NAT]
input relation NAT_external_ids [NAT_external_ids]
input relation NB_Global [NB_Global]
input relation NB_Global_external_ids [NB_Global_external_ids]
input relation QoS [QoS]
input relation QoS_action [QoS_action]
input relation QoS_bandwidth [QoS_bandwidth]
input relation QoS_external_ids [QoS_external_ids]
input relation SSL [SSL]
input relation SSL_external_ids [SSL_external_ids]
Load_Balancer_ip_addresses(.load_balancer=lb, .ip_address=ip_address_and_port_from_lb_key(key).ip) :- Load_Balancer_vips(.load_balancer=lb, .key=key, .value=_).
Logical_Switch_Port_ips(.logical_switch_port=lsp, .mac=mac, .ip=ip) :- Logical_Switch_Port_addresses(.logical_switch_port=lsp, .address=addrs), (var mac, var ips) = extract_mac(addrs), var ip = FlatMap(extract_ips(ips)).
Logical_Switch_Port_ips(.logical_switch_port=lsp, .mac=mac, .ip=ip) :- Logical_Switch_Port_dynamic_addresses(.logical_switch_port=lsp, .dynamic_address=addrs), (var mac, var ips) = extract_mac(addrs), var ip = FlatMap(extract_ips(ips)).
Logical_Switch_Port_macs(.logical_switch_port=lsp, .mac=mac) :- Logical_Switch_Port_ips(.logical_switch_port=lsp, .mac=mac, .ip=_).
Logical_Switch_has_stateful_acl_action(.logical_switch=ls) :- ACL(.id=_, .name=_, .logical_switch=ls, .priority=_, .direction=_, ._match=_, .action="allow-related", .log=_, .severity=_).
Logical_Switch_Port_ps_ips(.logical_switch_port=lsp, .mac=mac, .ip=subnet) :- Logical_Switch_Port_port_security(.logical_switch_port=lsp, .port_security=addrs), (var mac, var ips) = extract_mac(addrs), var subnet = FlatMap(extract_subnets(ips)).
Logical_Switch_Port_ps_macs(.logical_switch_port=lsp, .mac=mac) :- Logical_Switch_Port_ps_ips(.logical_switch_port=lsp, .mac=mac, .ip=_).
DHCP_Options_option_args(.dhcp_options=opts, .option=((key ++ "=") ++ value)) :- DHCP_Options_options(.dhcp_options=opts, .key=key, .value=value), ((key != "server_mac") and (key != "dhcpv6_stateless")).
DHCP_Options_server_mac(.dhcp_options=opts, .server_mac=mac) :- DHCP_Options_options(.dhcp_options=opts, .key="server_mac", .value=val), std.Some{.x=var mac} = eth_addr_from_string(val).
DHCP_Options_server_mac(.dhcp_options=opts, .server_mac=mac) :- DHCP_Options_options(.dhcp_options=opts, .key="server_id", .value=val), std.Some{.x=var mac} = eth_addr_from_string(val).
DHCP_Options_server_ip(.dhcp_options=opts, .server_ip=val) :- DHCP_Options_options(.dhcp_options=opts, .key="server_id", .value=val), std.Some{.x=var ip4} = ip_parse(val).
DHCP_Options_server_ip(.dhcp_options=opts, .server_ip=ipv6_string_mapped(lla)) :- DHCP_Options_options(.dhcp_options=opts, .key="server_id", .value=val), std.None{} = ip_parse(val), std.Some{.x=var mac} = eth_addr_from_string(val), var lla = in6_generate_lla(mac).
DHCP_Options_netmask(.dhcp_options=opts, .netmask=build_dhcp_netmask(cidr)) :- DHCP_Options(.id=opts, .cidr=cidr).
DHCP_Options_stateful(.dhcp_options=opts, .stateful=true) :- DHCP_Options_options(.dhcp_options=opts, .key="dhcpv6_stateless", .value="false").
DHCP_Options_stateful(.dhcp_options=opts, .stateful=false) :- DHCP_Options_options(.dhcp_options=opts, .key="dhcpv6_stateless", .value="true").
