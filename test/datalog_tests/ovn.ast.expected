typedef ip4_addr_t = bit<32>
typedef ip4_subnet_t = IP4Subnet{addr: ip4_addr_t, mask: ip4_addr_t}
typedef ip6_addr_t = bit<128>
typedef ip6_subnet_t = IP6Subnet{addr: ip6_addr_t, mask: ip6_addr_t}
typedef ip_addr_t = IPAddr4{addr4: ip4_addr_t} | IPAddr6{addr6: ip6_addr_t}
typedef ip_port_t = IPPort{ip: string, port: option_t<port_t>}
typedef ip_subnet_t = IPSubnet4{ip4_subnet: ip4_subnet_t} | IPSubnet6{ip6_subnet: ip6_subnet_t}
typedef mac_addr_t = bit<48>
typedef option_t<'A> = None{} | Some{value: 'A}
typedef port_t = bit<16>
typedef set_t<'A>
typedef uuid = bit<128>
function extract_ips (str: string): set_t<ip_addr_t>
function ip_address_and_port_from_lb_key (key: string): ip_port_t
function is_none (x: option_t<'A>): bool =
    match (x) {
        None{} -> true,
        _ -> false
    }
function is_some (x: option_t<'A>): bool =
    match (x) {
        Some{} -> true,
        _ -> false
    }
ground relation ACL (
    id: uuid,
    name: option_t<string>,
    logical_switch: uuid,
    priority: int,
    direction: string,
    _match: string,
    action: string,
    log: bool,
    severity: option_t<string>)
ground relation ACL_external_ids (
    acl: uuid,
    key: string,
    value: string)
ground relation Address_Set (
    id: uuid,
    name: string)
ground relation Address_Set_addresses (
    address_set: uuid,
    address: string)
ground relation Address_Set_external_ids (
    address_set: uuid,
    key: string,
    value: string)
ground relation Connection (
    id: uuid,
    target: string,
    is_connected: bool,
    max_backoff: option_t<int>,
    inactivity_probe: option_t<int>)
ground relation Connection_external_ids (
    connection: uuid,
    value: string)
ground relation Connection_other_config (
    connection: uuid,
    other_config: string)
ground relation Connection_status (
    connection: uuid,
    key: string,
    value: string)
ground relation DHCP_Options (
    id: uuid,
    cidr: string)
ground relation DHCP_Options_external_ids (
    dhcp_options: uuid,
    key: string,
    value: string)
relation DHCP_Options_netmask (
    dhcp_options: uuid,
    netmask: string)
relation DHCP_Options_option_args (
    dhcp_options: uuid,
    option: string)
ground relation DHCP_Options_options (
    dhcp_options: uuid,
    key: string,
    value: string)
relation DHCP_Options_server_ip (
    dhcp_options: uuid,
    server_ip: string)
relation DHCP_Options_server_mac (
    dhcp_options: uuid,
    server_mac: mac_addr_t)
relation DHCP_Options_stateful (
    dhcp_options: uuid,
    stateful: bool)
ground relation DNS (
    id: uuid,
    logical_switch: uuid)
ground relation DNS_external_ids (
    dns: uuid,
    key: string,
    value: string)
ground relation DNS_records (
    dns: uuid,
    key: string,
    value: string)
ground relation Gateway_Chassis (
    id: uuid,
    logical_router: uuid,
    name: string,
    chassis_name: string,
    priority: int)
ground relation Gateway_Chassis_external_ids (
    gateway_chassis: uuid,
    key: string,
    value: string)
ground relation Gateway_Chassis_options (
    gateway_chassis: uuid,
    key: string,
    value: string)
ground relation Load_Balancer (
    id: uuid,
    logical_switch: uuid,
    protocol: option_t<string>,
    name: string)
ground relation Load_Balancer_external_ids (
    load_balancer: uuid,
    key: string,
    value: string)
relation Load_Balancer_ip_addresses (
    load_balancer: uuid,
    ip_address: string)
ground relation Load_Balancer_vips (
    load_balancer: uuid,
    key: string,
    value: string)
ground relation Logical_Router (
    id: uuid,
    enabled: option_t<bool>,
    name: string)
ground relation Logical_Router_Port (
    id: uuid,
    logical_router: uuid,
    name: string,
    mac: string,
    peer: option_t<string>,
    enabled: option_t<bool>)
ground relation Logical_Router_Port_external_ids (
    logical_router_port: uuid,
    key: string,
    value: string)
ground relation Logical_Router_Port_ipv6_ra_configs (
    logical_router_port: uuid,
    key: string,
    value: string)
ground relation Logical_Router_Port_networks (
    logical_router_port: uuid,
    network: string)
ground relation Logical_Router_Port_options (
    logical_router_port: uuid,
    key: string,
    value: string)
ground relation Logical_Router_Static_Route (
    id: uuid,
    logical_router: uuid,
    ip_prefix: string,
    policy: option_t<string>,
    nexthop: string,
    output_port: option_t<string>)
ground relation Logical_Router_Static_Route_external_ids (
    logical_router_static_route: uuid,
    key: string,
    value: string)
ground relation Logical_Router_external_ids (
    logical_router: uuid,
    key: string,
    value: string)
ground relation Logical_Router_options (
    logical_router: uuid,
    key: string,
    value: string)
ground relation Logical_Switch (
    id: uuid,
    name: string,
    type: string)
ground relation Logical_Switch_Port (
    id: uuid,
    logical_switch: uuid,
    parent: option_t<string>,
    tag_request: option_t<int>,
    tag: option_t<int>,
    up: option_t<bool>,
    enabled: option_t<bool>,
    dhcpv4_options: option_t<uuid>,
    dhcpv6_options: option_t<uuid>,
    name: string,
    type: string)
ground relation Logical_Switch_Port_addresses (
    logical_switch_port: uuid,
    address: string)
ground relation Logical_Switch_Port_dynamic_addresses (
    logical_switch_port: uuid,
    dynamic_address: string)
ground relation Logical_Switch_Port_external_ids (
    logical_switch_port: uuid,
    key: string,
    value: string)
relation Logical_Switch_Port_ips (
    logical_switch_port: uuid,
    mac: bit<48>,
    ip: ip_addr_t)
relation Logical_Switch_Port_macs (
    logical_switch_port: uuid,
    mac: bit<48>)
ground relation Logical_Switch_Port_options (
    logical_switch_port: uuid,
    key: string,
    value: string)
ground relation Logical_Switch_Port_port_security (
    logical_switch_port: uuid,
    port_security: string)
relation Logical_Switch_Port_ps_ips (
    logical_switch_port: uuid,
    mac: mac_addr_t,
    ip: ip_subnet_t)
relation Logical_Switch_Port_ps_macs (
    logical_switch_port: uuid,
    mac: mac_addr_t)
ground relation Logical_Switch_external_ids (
    logical_switch: uuid,
    key: string,
    value: string)
relation Logical_Switch_has_stateful_acl (
    logical_switch: uuid)
ground relation Logical_Switch_other_config (
    logical_switch: uuid,
    key: string,
    value: string)
ground relation NAT (
    id: uuid,
    logical_router: uuid,
    external_ip: string,
    external_mac: option_t<string>,
    logical_ip: string,
    logical_port: option_t<string>,
    type: option_t<string>)
ground relation NAT_external_ids (
    nat: uuid,
    key: string,
    value: string)
ground relation NB_Global (
    nb_cfg: int,
    sb_cfg: int,
    hv_cfg: int)
ground relation NB_Global_external_ids (
    key: string,
    value: string)
ground relation QoS (
    id: uuid,
    logical_switch: uuid,
    priority: int,
    direction: string,
    _match: string)
ground relation QoS_action (
    qos: uuid,
    key: string,
    value: int)
ground relation QoS_bandwidth (
    qos: uuid,
    key: string,
    value: int)
ground relation QoS_external_ids (
    qos: uuid,
    key: string,
    value: string)
ground relation SSL (
    id: uuid,
    private_key: string,
    certificate: string,
    bootstrap_ca_cert: bool,
    ssl_protocols: string,
    ssl_ciphers: string)
ground relation SSL_external_ids (
    ssl: uuid,
    key: string,
    value: string)
Load_Balancer_ip_addresses(lb, ip_address_and_port_from_lb_key(key).ip) :- Load_Balancer_vips(lb, key, _).
Logical_Switch_Port_ips(lsp, mac, ip) :- Logical_Switch_Port_addresses(lsp, addrs), (mac, ips) = extract_mac(addrs), FlatMap(ip = extract_ips(ips)).
Logical_Switch_Port_ips(lsp, mac, ip) :- Logical_Switch_Port_dynamic_addresses(lsp, addrs), (mac, ips) = extract_mac(addrs), FlatMap(ip = extract_ips(ips)).
Logical_Switch_Port_macs(lsp, mac) :- Logical_Switch_Port_ips(lsp, mac, _).
Logical_Switch_has_stateful_acl_action(ls) :- ACL(.logical_switch=ls, .action="allow-related").
Logical_Switch_Port_ps_ips(lsp, mac, subnet) :- Logical_Switch_Port_port_security(lsp, addrs), extract_mac((lsp, addrs), (), (mac, ips)), extract_subnets(ips, (), subnet).
Logical_Switch_Port_ps_macs(lsp, mac) :- Logical_Switch_Port_ps_ips(lsp, mac, _).
DHCP_Options_option_args(opts, ((key ++ "=") ++ value)) :- DHCP_Options_options(opts, key, value), ((key != "server_mac") and (key != "dhcpv6_stateless")).
DHCP_Options_server_mac(opts, mac) :- DHCP_Options_options(opts, "server_mac", val), Some{mac} = eth_addr_from_string(val).
DHCP_Options_server_mac(opts, mac) :- DHCP_Options_options(opts, "server_id", val), Some{mac} = eth_addr_from_string(val).
DHCP_Options_server_ip(opts, val) :- DHCP_Options_options(opts, "server_id", val), Some{ip4} = ip_parse(val).
DHCP_Options_server_ip(opts, ipv6_string_mapped(lla)) :- DHCP_Options_options(opts, "server_id", val), None{} = ip_parse(val), Some{mac} = eth_addr_from_string(val), lla = in6_generate_lla(mac).
DHCP_Options_netmask(opts, build_dhcp_netmask(cidr)) :- DHCP_Options(opts, cidr).
DHCP_Options_stateful(opts, true) :- DHCP_Options_options(opts, "dhcpv6_stateless", "false").
DHCP_Options_stateful(opts, false) :- DHCP_Options_options(opts, "dhcpv6_stateless", "true").