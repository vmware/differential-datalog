import time

/* This library has functions for supporting the translation of SQL into DDlog */

function sql_extract_year(d: Date): signed<64> {
    year(d) as signed<64>
}

function sql_extract_month(d: Date): signed<64> {
    month(d) as signed<8> as signed<64>
}

function sql_array_contains(a: Vec<'A>, e: 'A): bool {
    vec_contains(a, e)
}

function sql_extract_week(d: Date): signed<64> {
    week(d) as signed<8> as signed<64>
}

function sql_extract_day(d: Date): signed<64> {
    day(d) as signed<8> as signed<64>
}

function sql_extract_day_of_month(d: Date): signed<64> {
    sql_extract_day(d)
}

function sql_extract_doy(d: Date): signed<64> {
    ordinal(d) as signed<16> as signed<64>
}

function sql_extract_day_of_week(d: Date): signed<64> {
    match (weekday(d)) {
        Sunday -> 64'sd1,
        Monday -> 64'sd2,
        Tuesday -> 64'sd3,
        Wednesday -> 64'sd4,
        Thursday -> 64'sd5,
        Friday -> 64'sd6,
        Saturday -> 64'sd7
    }
}

function sql_extract_dow(d: Date): signed<64> {
    sql_extract_day_of_week(d)
}

function sql_extract_hour(t: Time): signed<64> {
    hour(t) as signed<8> as signed<64>
}

function sql_extract_minute(t: Time): signed<64> {
    minute(t) as signed<8> as signed<64>
}

function sql_extract_second(t: Time): signed<64> {
    second(t) as signed<8> as signed<64>
}

/*
unhandled time cases
case QUARTER:
case YEAR_OF_WEEK:
case YOW:
case TIMEZONE_MINUTE:
case TIMEZONE_HOUR:
*/

function sql_substr(s: string, start: signed<64>, end: signed<64>): string {
   string_substr(s, start as bit<64>, (start + end) as bit<64>)
}

function sql_substr_N(s: Option<string>, start: signed<64>, end: signed<64>): Option<string> {
   match (s) {
      Some{.x = var a} -> Some{sql_substr(a, start, end)},
      _                -> None
   }
}
function is_null(value: Option<'T>): bool {
   match (value) {
      Some{_} -> false,
      None    -> true
   }
}
function insert_non_null(s: mut Set<'T>, value: Option<'T>): () {
   match (value) {
      None    -> (),
      Some{x} -> set_insert(s, x)
   }
}
function unwrapBool(v: Option<bool>): bool {
   match (v) {
      Some{.x = var a} -> a,
      _                -> false
   }
}
function b_not_N(b: Option<bool>): Option<bool> {
   match (b) {
      Some{.x = var a} -> Some{not a},
      _                -> None
   }
}
function set_signed_sum(s: Set<signed<64>>): signed<64> {
   var result = 0: signed<64>;
   for (v in s) {
      result = result + v
   };
   result
}
function set_int_sum(s: Set<bigint>): bigint {
   var result = 0: bigint;
   for (v in s) {
      result = result + v
   };
   result
}
function sql_abs(value: signed<64>): signed<64> {
   if (value < 64'sd0) (64'sd0-value) else value
}
function sql_abs_N(value: Option<signed<64>>): Option<signed<64>> {
   match (value) {
       Some{.x = var a} -> Some{if (a < 64'sd0) (64'sd0-a) else a},
       _                -> None
   }
}
function agg_any_R(aggregate: bool, item: bool): bool {
    aggregate or item
}
function agg_some_R(aggregate: bool, item: bool): bool {
    agg_any_R(aggregate, item)
}
function agg_every_R(aggregate: bool, item: bool): bool {
    aggregate and item
}
function agg_count_R(aggregate: signed<64>, item: 'T): signed<64> {
    aggregate + 64'sd1
}
function agg_min_R(aggregate: (bool, 'T), item: 'T): (bool, 'T) {
    match (aggregate) {
        (true, _) -> (false, item),  // first item
        (_,    x) -> (false, min(x, item))
    }
}
function agg_max_R(aggregate: (bool, 'T), item: 'T): (bool, 'T) {
    match (aggregate) {
        (true, _) -> (false, item),  // first item
        (_,    x) -> (false, max(x, item))
    }
}
function agg_sum_signed_R(aggregate: signed<64>, item: signed<64>): signed<64> {
    aggregate + item
}
function agg_sum_int_R(aggregate: bigint, item: bigint): bigint {
    aggregate + item
}
function agg_sum_double_R(aggregate: double, item: double): double {
    aggregate + item
}
function agg_sum_float_R(aggregate: float, item: float): float {
    aggregate + item
}
function agg_avg_signed_R(aggregate: (signed<64>, signed<64>), item: signed<64>): (signed<64>, signed<64>) {
    (aggregate.0 + 64'sd1, aggregate.0 + item)
}
function agg_avg_int_R(aggregate: (bigint, bigint), item: bigint): (bigint, bigint) {
    (aggregate.0 + 1, aggregate.0 + item)
}
function agg_avg_double_R(aggregate: (double, double), item: double): (double, double) {
    (aggregate.0 + 64'f1.0, aggregate.0 + item)
}
function agg_avg_float_R(aggregate: (float, float), item: float): (float, float) {
    (aggregate.0 + 32'f1.0, aggregate.0 + item)
}
function agg_any_N(aggregate: Option<bool>, item: Option<bool>): Option<bool> {
   match ((aggregate, item)) {
      (None, None)       -> None,
      (None, Some{x})    -> Some{x},
      (Some{x}, None)    -> Some{x},
      (Some{x}, Some{y}) -> Some{x or y}
   }
}
function agg_some_N(aggregate: Option<bool>, item: Option<bool>): Option<bool> {
   agg_any_N(aggregate, item)
}
function agg_every_N(aggregate: Option<bool>, item: Option<bool>): Option<bool> {
   match ((aggregate, item)) {
      (None, None)       -> None,
      (None, Some{x})    -> Some{x},
      (Some{x}, None)    -> Some{x},
      (Some{x}, Some{y}) -> Some{x and y}
   }
}
function agg_count_N(aggregate: Option<signed<64>>, item: Option<'T>): Option<signed<64>> {
   match ((aggregate,item)) {
      (None, None)       -> None,
      (None, Some{x})    -> Some{64'sd1},
      (Some{x}, None)    -> Some{x},
      (Some{x}, Some{_}) -> Some{x + 64'sd1}
   }
}
function agg_min_N(aggregate: Option<'T>, item: Option<'T>): Option<'T> {
   match ((aggregate, item)) {
      (None, None)       -> None,
      (None, Some{x})    -> Some{x},
      (Some{x}, None)    -> Some{x},
      (Some{x}, Some{y}) -> Some{min(x, y)}
   }
}
function agg_max_N(aggregate: Option<'T>, item: Option<'T>): Option<'T> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{x},
        (Some{x}, None)    -> Some{x},
        (Some{x}, Some{y}) -> Some{max(x, y)}
    }
}
function agg_sum_signed_N(aggregate: Option<signed<64>>, item: Option<signed<64>>): Option<signed<64>> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{x},
        (Some{x}, None)    -> Some{x},
        (Some{x}, Some{y}) -> Some{x + y}
    }
}
function agg_sum_int_N(aggregate: Option<bigint>, item: Option<bigint>): Option<bigint> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{x},
        (Some{x}, None)    -> Some{x},
        (Some{x}, Some{y}) -> Some{x + y}
    }
}
function agg_sum_double_N(aggregate: Option<double>, item: Option<double>): Option<double> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{x},
        (Some{x}, None)    -> Some{x},
        (Some{x}, Some{y}) -> Some{x + y}
    }
}
function agg_sum_float_N(aggregate: Option<float>, item: Option<float>): Option<float> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{x},
        (Some{x}, None)    -> Some{x},
        (Some{x}, Some{y}) -> Some{x + y}
    }
}
function agg_avg_signed_N(aggregate: Option<(signed<64>, signed<64>)>, item: Option<signed<64>>):
    Option<(signed<64>, signed<64>)> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{(x, 64'sd1)},
        (Some{x}, None)    -> Some{x},
        (Some{(sum,ct)}, Some{y}) -> Some{(sum + y, ct + 64'sd1)}
    }
}
function agg_avg_int_N(aggregate: Option<(bigint, bigint)>, item: Option<bigint>):
    Option<(bigint, bigint)> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{(x, 1)},
        (Some{x}, None)    -> Some{x},
        (Some{(sum,ct)}, Some{y}) -> Some{(sum + y, ct + 1)}
    }
}
function agg_avg_double_N(aggregate: Option<(double, double)>, item: Option<double>):
    Option<(double, double)> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{(x, 64'f1.0)},
        (Some{x}, None)    -> Some{x},
        (Some{(sum,ct)}, Some{y}) -> Some{(sum + y, ct + 64'f1.0)}
    }
}
function agg_avg_float_N(aggregate: Option<(float, float)>, item: Option<float>):
    Option<(float, float)> {
    match ((aggregate, item)) {
        (None, None)       -> None,
        (None, Some{x})    -> Some{(x, 32'f1.0)},
        (Some{x}, None)    -> Some{x},
        (Some{(sum,ct)}, Some{y}) -> Some{(sum + y, ct + 32'f1.0)}
    }
}
function avg_signed_N(sum_count: Option<(signed<64>, signed<64>)>): Option<signed<64>> {
    match (sum_count) {
       None -> None,
       Some{(sum, count)} -> if (count == 64'sd0) Some{64'sd0} else Some{sum / count}
    }
}
function avg_int_N(sum_count: Option<(bigint, bigint)>): Option<bigint> {
    match (sum_count) {
       None -> None,
       Some{(sum, count)} -> if (count == 0) Some{0} else Some{sum / count}
    }
}
function avg_double_N(sum_count: Option<(double, double)>): Option<double> {
    match (sum_count) {
       None -> None,
       Some{(sum, count)} -> if (count == 64'f0.0) Some{64'f0.0} else Some{sum / count}
    }
}
function avg_float_N(sum_count: Option<(float, float)>): Option<float> {
    match (sum_count) {
       None -> None,
       Some{(sum, count)} -> if (count == 32'f0.0) Some{32'f0.0} else Some{sum / count}
    }
}
function avg_signed_R(sum_count: (signed<64>, signed<64>)): signed<64> {
    if (sum_count.1 == 64'sd0) 64'sd0 else (sum_count.0 / sum_count.1)
}
function avg_int_R(sum_count: (bigint, bigint)): bigint {
    if (sum_count.1 == 0) 0 else (sum_count.0 / sum_count.1)
}
function avg_float_R(sum_count: (float, float)): float {
    if (sum_count.1 == 32'f0.0) 32'f0.0 else (sum_count.0 / sum_count.1)
}
function avg_double_R(sum_count: (double, double)): double {
    if (sum_count.1 == 64'f0.0) 64'f0.0 else (sum_count.0 / sum_count.1)
}
function sql_concat(s0: string, s1: string): string {
     s0 ++ s1
}
function sql_concat_N(s0: Option<string>, s1: Option<string>): Option<string> {
    match ((s0,s1)) {
        (None, None)       -> None,
        (None, Some{x})    -> None,
        (Some{x}, None)    -> None,
        (Some{x}, Some{y}) -> Some{x ++ y}
    }
}